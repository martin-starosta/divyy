/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "app/api/analyze/route";
exports.ids = ["app/api/analyze/route"];
exports.modules = {

/***/ "(rsc)/../../node_modules/next/dist/build/webpack/loaders/next-app-loader/index.js?name=app%2Fapi%2Fanalyze%2Froute&page=%2Fapi%2Fanalyze%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fanalyze%2Froute.ts&appDir=%2FUsers%2Fmartinstarosta%2FDevelopment%2Fvibes%2Fdivyy%2Fapps%2Fweb%2Fsrc%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Fmartinstarosta%2FDevelopment%2Fvibes%2Fdivyy%2Fapps%2Fweb&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D&isGlobalNotFoundEnabled=!":

  !*** ../../node_modules/next/dist/build/webpack/loaders/next-app-loader/index.js?name=app%2Fapi%2Fanalyze%2Froute&page=%2Fapi%2Fanalyze%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fanalyze%2Froute.ts&appDir=%2FUsers%2Fmartinstarosta%2FDevelopment%2Fvibes%2Fdivyy%2Fapps%2Fweb%2Fsrc%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Fmartinstarosta%2FDevelopment%2Fvibes%2Fdivyy%2Fapps%2Fweb&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D&isGlobalNotFoundEnabled=! ***!

/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   handler: () => (/* binding */ handler),\n/* harmony export */   patchFetch: () => (/* binding */ patchFetch),\n/* harmony export */   routeModule: () => (/* binding */ routeModule),\n/* harmony export */   serverHooks: () => (/* binding */ serverHooks),\n/* harmony export */   workAsyncStorage: () => (/* binding */ workAsyncStorage),\n/* harmony export */   workUnitAsyncStorage: () => (/* binding */ workUnitAsyncStorage)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/route-modules/app-route/module.compiled */ \"(rsc)/../../node_modules/next/dist/server/route-modules/app-route/module.compiled.js\");\n/* harmony import */ var next_dist_server_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/route-kind */ \"(rsc)/../../node_modules/next/dist/server/route-kind.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/server/lib/patch-fetch */ \"(rsc)/../../node_modules/next/dist/server/lib/patch-fetch.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var next_dist_server_request_meta__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! next/dist/server/request-meta */ \"(rsc)/../../node_modules/next/dist/server/request-meta.js\");\n/* harmony import */ var next_dist_server_request_meta__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_request_meta__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var next_dist_server_lib_trace_tracer__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! next/dist/server/lib/trace/tracer */ \"(rsc)/../../node_modules/next/dist/server/lib/trace/tracer.js\");\n/* harmony import */ var next_dist_server_lib_trace_tracer__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_lib_trace_tracer__WEBPACK_IMPORTED_MODULE_4__);\n/* harmony import */ var next_dist_shared_lib_router_utils_app_paths__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! next/dist/shared/lib/router/utils/app-paths */ \"next/dist/shared/lib/router/utils/app-paths\");\n/* harmony import */ var next_dist_shared_lib_router_utils_app_paths__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(next_dist_shared_lib_router_utils_app_paths__WEBPACK_IMPORTED_MODULE_5__);\n/* harmony import */ var next_dist_server_base_http_node__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! next/dist/server/base-http/node */ \"(rsc)/../../node_modules/next/dist/server/base-http/node.js\");\n/* harmony import */ var next_dist_server_base_http_node__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_base_http_node__WEBPACK_IMPORTED_MODULE_6__);\n/* harmony import */ var next_dist_server_web_spec_extension_adapters_next_request__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! next/dist/server/web/spec-extension/adapters/next-request */ \"(rsc)/../../node_modules/next/dist/server/web/spec-extension/adapters/next-request.js\");\n/* harmony import */ var next_dist_server_web_spec_extension_adapters_next_request__WEBPACK_IMPORTED_MODULE_7___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_web_spec_extension_adapters_next_request__WEBPACK_IMPORTED_MODULE_7__);\n/* harmony import */ var next_dist_server_lib_trace_constants__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! next/dist/server/lib/trace/constants */ \"(rsc)/../../node_modules/next/dist/server/lib/trace/constants.js\");\n/* harmony import */ var next_dist_server_lib_trace_constants__WEBPACK_IMPORTED_MODULE_8___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_lib_trace_constants__WEBPACK_IMPORTED_MODULE_8__);\n/* harmony import */ var next_dist_server_instrumentation_utils__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! next/dist/server/instrumentation/utils */ \"(rsc)/../../node_modules/next/dist/server/instrumentation/utils.js\");\n/* harmony import */ var next_dist_server_send_response__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! next/dist/server/send-response */ \"(rsc)/../../node_modules/next/dist/server/send-response.js\");\n/* harmony import */ var next_dist_server_web_utils__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! next/dist/server/web/utils */ \"(rsc)/../../node_modules/next/dist/server/web/utils.js\");\n/* harmony import */ var next_dist_server_web_utils__WEBPACK_IMPORTED_MODULE_11___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_web_utils__WEBPACK_IMPORTED_MODULE_11__);\n/* harmony import */ var next_dist_server_lib_cache_control__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! next/dist/server/lib/cache-control */ \"(rsc)/../../node_modules/next/dist/server/lib/cache-control.js\");\n/* harmony import */ var next_dist_lib_constants__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! next/dist/lib/constants */ \"(rsc)/../../node_modules/next/dist/lib/constants.js\");\n/* harmony import */ var next_dist_lib_constants__WEBPACK_IMPORTED_MODULE_13___default = /*#__PURE__*/__webpack_require__.n(next_dist_lib_constants__WEBPACK_IMPORTED_MODULE_13__);\n/* harmony import */ var next_dist_shared_lib_no_fallback_error_external__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! next/dist/shared/lib/no-fallback-error.external */ \"next/dist/shared/lib/no-fallback-error.external\");\n/* harmony import */ var next_dist_shared_lib_no_fallback_error_external__WEBPACK_IMPORTED_MODULE_14___default = /*#__PURE__*/__webpack_require__.n(next_dist_shared_lib_no_fallback_error_external__WEBPACK_IMPORTED_MODULE_14__);\n/* harmony import */ var next_dist_server_response_cache__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! next/dist/server/response-cache */ \"(rsc)/../../node_modules/next/dist/server/response-cache/index.js\");\n/* harmony import */ var next_dist_server_response_cache__WEBPACK_IMPORTED_MODULE_15___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_response_cache__WEBPACK_IMPORTED_MODULE_15__);\n/* harmony import */ var _Users_martinstarosta_Development_vibes_divyy_apps_web_src_app_api_analyze_route_ts__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./src/app/api/analyze/route.ts */ \"(rsc)/./src/app/api/analyze/route.ts\");\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n// We inject the nextConfigOutput here so that we can use them in the route\n// module.\nconst nextConfigOutput = \"\"\nconst routeModule = new next_dist_server_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__.AppRouteRouteModule({\n    definition: {\n        kind: next_dist_server_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.APP_ROUTE,\n        page: \"/api/analyze/route\",\n        pathname: \"/api/analyze\",\n        filename: \"route\",\n        bundlePath: \"app/api/analyze/route\"\n    },\n    distDir: \".next\" || 0,\n    relativeProjectDir:  false || '',\n    resolvedPagePath: \"/Users/martinstarosta/Development/vibes/divyy/apps/web/src/app/api/analyze/route.ts\",\n    nextConfigOutput,\n    userland: _Users_martinstarosta_Development_vibes_divyy_apps_web_src_app_api_analyze_route_ts__WEBPACK_IMPORTED_MODULE_16__\n});\n// Pull out the exports that we need to expose from the module. This should\n// be eliminated when we've moved the other routes to the new format. These\n// are used to hook into the route.\nconst { workAsyncStorage, workUnitAsyncStorage, serverHooks } = routeModule;\nfunction patchFetch() {\n    return (0,next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__.patchFetch)({\n        workAsyncStorage,\n        workUnitAsyncStorage\n    });\n}\n\nasync function handler(req, res, ctx) {\n    var _nextConfig_experimental;\n    let srcPage = \"/api/analyze/route\";\n    // turbopack doesn't normalize `/index` in the page name\n    // so we need to to process dynamic routes properly\n    // TODO: fix turbopack providing differing value from webpack\n    if (false) {} else if (srcPage === '/index') {\n        // we always normalize /index specifically\n        srcPage = '/';\n    }\n    const multiZoneDraftMode = false;\n    const prepareResult = await routeModule.prepare(req, res, {\n        srcPage,\n        multiZoneDraftMode\n    });\n    if (!prepareResult) {\n        res.statusCode = 400;\n        res.end('Bad Request');\n        ctx.waitUntil == null ? void 0 : ctx.waitUntil.call(ctx, Promise.resolve());\n        return null;\n    }\n    const { buildId, params, nextConfig, isDraftMode, prerenderManifest, routerServerContext, isOnDemandRevalidate, revalidateOnlyGenerated, resolvedPathname } = prepareResult;\n    const normalizedSrcPage = (0,next_dist_shared_lib_router_utils_app_paths__WEBPACK_IMPORTED_MODULE_5__.normalizeAppPath)(srcPage);\n    let isIsr = Boolean(prerenderManifest.dynamicRoutes[normalizedSrcPage] || prerenderManifest.routes[resolvedPathname]);\n    if (isIsr && !isDraftMode) {\n        const isPrerendered = Boolean(prerenderManifest.routes[resolvedPathname]);\n        const prerenderInfo = prerenderManifest.dynamicRoutes[normalizedSrcPage];\n        if (prerenderInfo) {\n            if (prerenderInfo.fallback === false && !isPrerendered) {\n                throw new next_dist_shared_lib_no_fallback_error_external__WEBPACK_IMPORTED_MODULE_14__.NoFallbackError();\n            }\n        }\n    }\n    let cacheKey = null;\n    if (isIsr && !routeModule.isDev && !isDraftMode) {\n        cacheKey = resolvedPathname;\n        // ensure /index and / is normalized to one key\n        cacheKey = cacheKey === '/index' ? '/' : cacheKey;\n    }\n    const supportsDynamicResponse = // If we're in development, we always support dynamic HTML\n    routeModule.isDev === true || // If this is not SSG or does not have static paths, then it supports\n    // dynamic HTML.\n    !isIsr;\n    // This is a revalidation request if the request is for a static\n    // page and it is not being resumed from a postponed render and\n    // it is not a dynamic RSC request then it is a revalidation\n    // request.\n    const isRevalidate = isIsr && !supportsDynamicResponse;\n    const method = req.method || 'GET';\n    const tracer = (0,next_dist_server_lib_trace_tracer__WEBPACK_IMPORTED_MODULE_4__.getTracer)();\n    const activeSpan = tracer.getActiveScopeSpan();\n    const context = {\n        params,\n        prerenderManifest,\n        renderOpts: {\n            experimental: {\n                cacheComponents: Boolean(nextConfig.experimental.cacheComponents),\n                authInterrupts: Boolean(nextConfig.experimental.authInterrupts)\n            },\n            supportsDynamicResponse,\n            incrementalCache: (0,next_dist_server_request_meta__WEBPACK_IMPORTED_MODULE_3__.getRequestMeta)(req, 'incrementalCache'),\n            cacheLifeProfiles: (_nextConfig_experimental = nextConfig.experimental) == null ? void 0 : _nextConfig_experimental.cacheLife,\n            isRevalidate,\n            waitUntil: ctx.waitUntil,\n            onClose: (cb)=>{\n                res.on('close', cb);\n            },\n            onAfterTaskError: undefined,\n            onInstrumentationRequestError: (error, _request, errorContext)=>routeModule.onRequestError(req, error, errorContext, routerServerContext)\n        },\n        sharedContext: {\n            buildId\n        }\n    };\n    const nodeNextReq = new next_dist_server_base_http_node__WEBPACK_IMPORTED_MODULE_6__.NodeNextRequest(req);\n    const nodeNextRes = new next_dist_server_base_http_node__WEBPACK_IMPORTED_MODULE_6__.NodeNextResponse(res);\n    const nextReq = next_dist_server_web_spec_extension_adapters_next_request__WEBPACK_IMPORTED_MODULE_7__.NextRequestAdapter.fromNodeNextRequest(nodeNextReq, (0,next_dist_server_web_spec_extension_adapters_next_request__WEBPACK_IMPORTED_MODULE_7__.signalFromNodeResponse)(res));\n    try {\n        const invokeRouteModule = async (span)=>{\n            return routeModule.handle(nextReq, context).finally(()=>{\n                if (!span) return;\n                span.setAttributes({\n                    'http.status_code': res.statusCode,\n                    'next.rsc': false\n                });\n                const rootSpanAttributes = tracer.getRootSpanAttributes();\n                // We were unable to get attributes, probably OTEL is not enabled\n                if (!rootSpanAttributes) {\n                    return;\n                }\n                if (rootSpanAttributes.get('next.span_type') !== next_dist_server_lib_trace_constants__WEBPACK_IMPORTED_MODULE_8__.BaseServerSpan.handleRequest) {\n                    console.warn(`Unexpected root span type '${rootSpanAttributes.get('next.span_type')}'. Please report this Next.js issue https://github.com/vercel/next.js`);\n                    return;\n                }\n                const route = rootSpanAttributes.get('next.route');\n                if (route) {\n                    const name = `${method} ${route}`;\n                    span.setAttributes({\n                        'next.route': route,\n                        'http.route': route,\n                        'next.span_name': name\n                    });\n                    span.updateName(name);\n                } else {\n                    span.updateName(`${method} ${req.url}`);\n                }\n            });\n        };\n        const handleResponse = async (currentSpan)=>{\n            var _cacheEntry_value;\n            const responseGenerator = async ({ previousCacheEntry })=>{\n                try {\n                    if (!(0,next_dist_server_request_meta__WEBPACK_IMPORTED_MODULE_3__.getRequestMeta)(req, 'minimalMode') && isOnDemandRevalidate && revalidateOnlyGenerated && !previousCacheEntry) {\n                        res.statusCode = 404;\n                        // on-demand revalidate always sets this header\n                        res.setHeader('x-nextjs-cache', 'REVALIDATED');\n                        res.end('This page could not be found');\n                        return null;\n                    }\n                    const response = await invokeRouteModule(currentSpan);\n                    req.fetchMetrics = context.renderOpts.fetchMetrics;\n                    let pendingWaitUntil = context.renderOpts.pendingWaitUntil;\n                    // Attempt using provided waitUntil if available\n                    // if it's not we fallback to sendResponse's handling\n                    if (pendingWaitUntil) {\n                        if (ctx.waitUntil) {\n                            ctx.waitUntil(pendingWaitUntil);\n                            pendingWaitUntil = undefined;\n                        }\n                    }\n                    const cacheTags = context.renderOpts.collectedTags;\n                    // If the request is for a static response, we can cache it so long\n                    // as it's not edge.\n                    if (isIsr) {\n                        const blob = await response.blob();\n                        // Copy the headers from the response.\n                        const headers = (0,next_dist_server_web_utils__WEBPACK_IMPORTED_MODULE_11__.toNodeOutgoingHttpHeaders)(response.headers);\n                        if (cacheTags) {\n                            headers[next_dist_lib_constants__WEBPACK_IMPORTED_MODULE_13__.NEXT_CACHE_TAGS_HEADER] = cacheTags;\n                        }\n                        if (!headers['content-type'] && blob.type) {\n                            headers['content-type'] = blob.type;\n                        }\n                        const revalidate = typeof context.renderOpts.collectedRevalidate === 'undefined' || context.renderOpts.collectedRevalidate >= next_dist_lib_constants__WEBPACK_IMPORTED_MODULE_13__.INFINITE_CACHE ? false : context.renderOpts.collectedRevalidate;\n                        const expire = typeof context.renderOpts.collectedExpire === 'undefined' || context.renderOpts.collectedExpire >= next_dist_lib_constants__WEBPACK_IMPORTED_MODULE_13__.INFINITE_CACHE ? undefined : context.renderOpts.collectedExpire;\n                        // Create the cache entry for the response.\n                        const cacheEntry = {\n                            value: {\n                                kind: next_dist_server_response_cache__WEBPACK_IMPORTED_MODULE_15__.CachedRouteKind.APP_ROUTE,\n                                status: response.status,\n                                body: Buffer.from(await blob.arrayBuffer()),\n                                headers\n                            },\n                            cacheControl: {\n                                revalidate,\n                                expire\n                            }\n                        };\n                        return cacheEntry;\n                    } else {\n                        // send response without caching if not ISR\n                        await (0,next_dist_server_send_response__WEBPACK_IMPORTED_MODULE_10__.sendResponse)(nodeNextReq, nodeNextRes, response, context.renderOpts.pendingWaitUntil);\n                        return null;\n                    }\n                } catch (err) {\n                    // if this is a background revalidate we need to report\n                    // the request error here as it won't be bubbled\n                    if (previousCacheEntry == null ? void 0 : previousCacheEntry.isStale) {\n                        await routeModule.onRequestError(req, err, {\n                            routerKind: 'App Router',\n                            routePath: srcPage,\n                            routeType: 'route',\n                            revalidateReason: (0,next_dist_server_instrumentation_utils__WEBPACK_IMPORTED_MODULE_9__.getRevalidateReason)({\n                                isRevalidate,\n                                isOnDemandRevalidate\n                            })\n                        }, routerServerContext);\n                    }\n                    throw err;\n                }\n            };\n            const cacheEntry = await routeModule.handleResponse({\n                req,\n                nextConfig,\n                cacheKey,\n                routeKind: next_dist_server_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.APP_ROUTE,\n                isFallback: false,\n                prerenderManifest,\n                isRoutePPREnabled: false,\n                isOnDemandRevalidate,\n                revalidateOnlyGenerated,\n                responseGenerator,\n                waitUntil: ctx.waitUntil\n            });\n            // we don't create a cacheEntry for ISR\n            if (!isIsr) {\n                return null;\n            }\n            if ((cacheEntry == null ? void 0 : (_cacheEntry_value = cacheEntry.value) == null ? void 0 : _cacheEntry_value.kind) !== next_dist_server_response_cache__WEBPACK_IMPORTED_MODULE_15__.CachedRouteKind.APP_ROUTE) {\n                var _cacheEntry_value1;\n                throw Object.defineProperty(new Error(`Invariant: app-route received invalid cache entry ${cacheEntry == null ? void 0 : (_cacheEntry_value1 = cacheEntry.value) == null ? void 0 : _cacheEntry_value1.kind}`), \"__NEXT_ERROR_CODE\", {\n                    value: \"E701\",\n                    enumerable: false,\n                    configurable: true\n                });\n            }\n            if (!(0,next_dist_server_request_meta__WEBPACK_IMPORTED_MODULE_3__.getRequestMeta)(req, 'minimalMode')) {\n                res.setHeader('x-nextjs-cache', isOnDemandRevalidate ? 'REVALIDATED' : cacheEntry.isMiss ? 'MISS' : cacheEntry.isStale ? 'STALE' : 'HIT');\n            }\n            // Draft mode should never be cached\n            if (isDraftMode) {\n                res.setHeader('Cache-Control', 'private, no-cache, no-store, max-age=0, must-revalidate');\n            }\n            const headers = (0,next_dist_server_web_utils__WEBPACK_IMPORTED_MODULE_11__.fromNodeOutgoingHttpHeaders)(cacheEntry.value.headers);\n            if (!((0,next_dist_server_request_meta__WEBPACK_IMPORTED_MODULE_3__.getRequestMeta)(req, 'minimalMode') && isIsr)) {\n                headers.delete(next_dist_lib_constants__WEBPACK_IMPORTED_MODULE_13__.NEXT_CACHE_TAGS_HEADER);\n            }\n            // If cache control is already set on the response we don't\n            // override it to allow users to customize it via next.config\n            if (cacheEntry.cacheControl && !res.getHeader('Cache-Control') && !headers.get('Cache-Control')) {\n                headers.set('Cache-Control', (0,next_dist_server_lib_cache_control__WEBPACK_IMPORTED_MODULE_12__.getCacheControlHeader)(cacheEntry.cacheControl));\n            }\n            await (0,next_dist_server_send_response__WEBPACK_IMPORTED_MODULE_10__.sendResponse)(nodeNextReq, nodeNextRes, new Response(cacheEntry.value.body, {\n                headers,\n                status: cacheEntry.value.status || 200\n            }));\n            return null;\n        };\n        // TODO: activeSpan code path is for when wrapped by\n        // next-server can be removed when this is no longer used\n        if (activeSpan) {\n            await handleResponse(activeSpan);\n        } else {\n            await tracer.withPropagatedContext(req.headers, ()=>tracer.trace(next_dist_server_lib_trace_constants__WEBPACK_IMPORTED_MODULE_8__.BaseServerSpan.handleRequest, {\n                    spanName: `${method} ${req.url}`,\n                    kind: next_dist_server_lib_trace_tracer__WEBPACK_IMPORTED_MODULE_4__.SpanKind.SERVER,\n                    attributes: {\n                        'http.method': method,\n                        'http.target': req.url\n                    }\n                }, handleResponse));\n        }\n    } catch (err) {\n        // if we aren't wrapped by base-server handle here\n        if (!activeSpan && !(err instanceof next_dist_shared_lib_no_fallback_error_external__WEBPACK_IMPORTED_MODULE_14__.NoFallbackError)) {\n            await routeModule.onRequestError(req, err, {\n                routerKind: 'App Router',\n                routePath: normalizedSrcPage,\n                routeType: 'route',\n                revalidateReason: (0,next_dist_server_instrumentation_utils__WEBPACK_IMPORTED_MODULE_9__.getRevalidateReason)({\n                    isRevalidate,\n                    isOnDemandRevalidate\n                })\n            });\n        }\n        // rethrow so that we can handle serving error page\n        // If this is during static generation, throw the error again.\n        if (isIsr) throw err;\n        // Otherwise, send a 500 response.\n        await (0,next_dist_server_send_response__WEBPACK_IMPORTED_MODULE_10__.sendResponse)(nodeNextReq, nodeNextRes, new Response(null, {\n            status: 500\n        }));\n        return null;\n    }\n}\n\n//# sourceMappingURL=app-route.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/next/dist/build/webpack/loaders/next-app-loader/index.js?name=app%2Fapi%2Fanalyze%2Froute&page=%2Fapi%2Fanalyze%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fanalyze%2Froute.ts&appDir=%2FUsers%2Fmartinstarosta%2FDevelopment%2Fvibes%2Fdivyy%2Fapps%2Fweb%2Fsrc%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Fmartinstarosta%2FDevelopment%2Fvibes%2Fdivyy%2Fapps%2Fweb&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D&isGlobalNotFoundEnabled=!\n");

/***/ }),

/***/ "(rsc)/../../node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?server=true!":
/*!**********************************************************************************************************!*\
  !*** ../../node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?server=true! ***!
  \**********************************************************************************************************/
/***/ (() => {



/***/ }),

/***/ "(rsc)/../../packages/core/dist/calculators/DividendCalculator.js":
/*!******************************************************************!*\
  !*** ../../packages/core/dist/calculators/DividendCalculator.js ***!
  \******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DividendCalculator: () => (/* binding */ DividendCalculator)\n/* harmony export */ });\n/* harmony import */ var _utils_MathUtils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/MathUtils.js */ \"(rsc)/../../packages/core/dist/utils/MathUtils.js\");\n\nclass DividendCalculator {\n    static annualizeDividends(dividendEvents) {\n        const map = new Map();\n        for (const event of dividendEvents){\n            const year = event.year;\n            const amount = event.amount;\n            if (!isFinite(amount)) continue;\n            map.set(year, (map.get(year) || 0) + amount);\n        }\n        return [\n            ...map.entries()\n        ].sort((a, b)=>a[0] - b[0]);\n    }\n    static calculateTTMDividends(dividendEvents) {\n        const now = Date.now();\n        const oneYearAgo = now - 365 * 24 * 3600 * 1000;\n        return (0,_utils_MathUtils_js__WEBPACK_IMPORTED_MODULE_0__.sum)(dividendEvents.filter((d)=>d.date.getTime() > oneYearAgo).map((d)=>d.amount));\n    }\n    static calculateDividendStreak(annualSeries) {\n        const sorted = annualSeries.slice().sort((a, b)=>a[0] - b[0]);\n        let streak = 0;\n        // Improved calculation with better tolerance for real-world data issues\n        for(let i = sorted.length - 1; i > 0; i--){\n            const current = sorted[i][1];\n            const previous = sorted[i - 1][1];\n            // Allow up to 2% decline to handle data rounding, stock splits, and minor cuts\n            // This is more realistic for dividend analysis while still being conservative\n            if (current >= previous * 0.98) {\n                streak++;\n            } else {\n                // Check if this might be a data quality issue rather than a real cut\n                const decline = (previous - current) / previous;\n                // If decline is small (< 5%) and next year recovers, might be data noise\n                if (decline < 0.05 && i < sorted.length - 1) {\n                    const nextYear = sorted[i + 1][1];\n                    if (nextYear >= previous * 0.98) {\n                        // Likely data noise, continue streak but with lower confidence\n                        streak++;\n                        continue;\n                    }\n                }\n                break;\n            }\n        }\n        return streak;\n    }\n    static calculateSafeGrowth(cagr5, cagr3, fundamentals, streak) {\n        const growthBase = cagr5 ?? cagr3 ?? 0;\n        let safeGrowth = (0,_utils_MathUtils_js__WEBPACK_IMPORTED_MODULE_0__.clamp)(growthBase, -0.10, 0.15);\n        // Graceful handling of bad CAGRs for long streak stocks\n        // If CAGR < -5% but streak >= 20y, assume modest positive growth instead\n        if (safeGrowth < -0.05 && streak >= 20) {\n            // For long streak stocks with bad calculated CAGR, use modest positive growth\n            // This prevents \"negative growth\" from conflicting with a proven long streak\n            // Use conservative 1.5% as middle ground between 0-3%\n            const adjustedGrowth = 0.015;\n            console.warn(`⚠️  Adjusted negative CAGR (${(growthBase * 100).toFixed(1)}%) to +${(adjustedGrowth * 100).toFixed(1)}% for ${streak}-year streak stock`);\n            safeGrowth = adjustedGrowth;\n        }\n        const epsPayoutRatio = fundamentals.epsPayoutRatio;\n        const fcfPayoutRatio = fundamentals.fcfPayoutRatio;\n        if (isFinite(epsPayoutRatio) && epsPayoutRatio > 0.8 || isFinite(fcfPayoutRatio) && fcfPayoutRatio > 1.0 || streak < 3) {\n            safeGrowth = Math.min(safeGrowth, 0);\n        }\n        return safeGrowth;\n    }\n    static calculateGordonGrowthModel(forwardDividend, price, requiredReturn, safeGrowth) {\n        if (!price || !isFinite(forwardDividend)) return null;\n        const conservativeGrowth = Math.max(-0.05, Math.min(0.06, safeGrowth));\n        if (requiredReturn > conservativeGrowth) {\n            return forwardDividend / (requiredReturn - conservativeGrowth);\n        }\n        return null;\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/../../packages/core/dist/calculators/DividendCalculator.js\n");

/***/ }),

/***/ "(rsc)/../../packages/core/dist/calculators/ScoreCalculator.js":
/*!***************************************************************!*\
  !*** ../../packages/core/dist/calculators/ScoreCalculator.js ***!
  \***************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ScoreCalculator: () => (/* binding */ ScoreCalculator)\n/* harmony export */ });\n/* harmony import */ var _utils_MathUtils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/MathUtils.js */ \"(rsc)/../../packages/core/dist/utils/MathUtils.js\");\n/* harmony import */ var _models_DividendAnalysis_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../models/DividendAnalysis.js */ \"(rsc)/../../packages/core/dist/models/DividendAnalysis.js\");\n\n\nclass ScoreCalculator {\n    static calculatePayoutScore(payoutRatio) {\n        if (!isFinite(payoutRatio) || payoutRatio <= 0) return 100;\n        if (payoutRatio <= 0.6) return 100;\n        if (payoutRatio >= 1.0) return 0;\n        return (1 - (payoutRatio - 0.6) / 0.4) * 100;\n    }\n    static calculateFCFCoverageScore(coverage, payoutRatio = NaN) {\n        if (!isFinite(coverage)) {\n            if (isFinite(payoutRatio) && payoutRatio <= 0.6) {\n                return 50;\n            }\n            return 0;\n        }\n        if (coverage >= 2) return 100;\n        if (coverage <= 0) return 0;\n        return (0,_utils_MathUtils_js__WEBPACK_IMPORTED_MODULE_0__.clamp)(coverage / 2, 0, 1) * 100;\n    }\n    static calculateStreakScore(streak) {\n        return (0,_utils_MathUtils_js__WEBPACK_IMPORTED_MODULE_0__.clamp)(streak / 20, 0, 1) * 100;\n    }\n    static calculateGrowthScore(growthRate) {\n        const x = (0,_utils_MathUtils_js__WEBPACK_IMPORTED_MODULE_0__.clamp)((growthRate - -0.10) / (0.10 - -0.10), 0, 1);\n        return x * 100;\n    }\n    static calculateTrendScore(price, ema) {\n        if (!price || !ema.ema20 || !ema.ema50 || !ema.ema200) {\n            return 0;\n        }\n        let score = 0;\n        // EMA200 is the most important - if stock is persistently under EMA200, \n        // it indicates market doubts about fundamentals\n        if (price > ema.ema200) {\n            score += 50; // Increased weight for EMA200\n        } else {\n            // Stock is under EMA200 - significant negative signal\n            score -= 20; // Penalty for being under EMA200\n        }\n        // EMA50 provides medium-term trend context\n        if (price > ema.ema50) {\n            score += 30;\n        }\n        // EMA20 provides short-term trend context\n        if (price > ema.ema20) {\n            score += 20;\n        }\n        // Ensure score doesn't go below 0\n        return Math.max(0, score);\n    }\n    static calculateMACDScore(macd) {\n        // If no MACD data available, return neutral score\n        if (!macd || macd.macdLine === null || macd.signalLine === null || macd.histogram === null) {\n            return 50; // Neutral score when data unavailable\n        }\n        let score = 50; // Start with neutral score\n        // MACD Line vs Signal Line (primary signal)\n        if (macd.macdLine > macd.signalLine) {\n            // Bullish signal\n            const diff = macd.macdLine - macd.signalLine;\n            score += Math.min(30, diff * 15); // Up to 30 points for strong bullish signal\n        } else {\n            // Bearish signal\n            const diff = macd.signalLine - macd.macdLine;\n            score -= Math.min(30, diff * 15); // Down to 30 points for strong bearish signal\n        }\n        // Histogram analysis (momentum)\n        if (macd.histogram > 0) {\n            // Positive momentum\n            score += Math.min(20, macd.histogram * 10); // Up to 20 points for strong positive momentum\n        } else {\n            // Negative momentum\n            score -= Math.min(20, Math.abs(macd.histogram) * 10); // Down to 20 points for strong negative momentum\n        }\n        // MACD line position relative to zero (trend strength)\n        if (macd.macdLine > 0) {\n            // Above zero line - bullish trend\n            score += Math.min(10, macd.macdLine * 5);\n        } else {\n            // Below zero line - bearish trend  \n            score -= Math.min(10, Math.abs(macd.macdLine) * 5);\n        }\n        // Ensure score stays within 0-100 range\n        return Math.max(0, Math.min(100, score));\n    }\n    static calculateRSIScore(rsi) {\n        // If no RSI data available, return neutral score\n        if (!rsi || rsi.rsi === null) {\n            return 50; // Neutral score when data unavailable\n        }\n        const rsiValue = rsi.rsi;\n        let score = 50; // Start with neutral score\n        // RSI-based scoring logic for dividend stocks\n        // For dividend stocks, we prefer stocks that aren't severely overbought or oversold\n        if (rsiValue >= 20 && rsiValue <= 80) {\n            // Normal range - good for dividend stocks\n            if (rsiValue >= 40 && rsiValue <= 60) {\n                // Sweet spot for dividend investing - not extreme\n                score = 100;\n            } else if (rsiValue >= 30 && rsiValue <= 70) {\n                // Good range\n                score = 85;\n            } else {\n                // Still acceptable but getting toward extremes\n                score = 70;\n            }\n        } else if (rsiValue > 80) {\n            // Overbought - potentially risky entry point for dividend investors\n            if (rsiValue > 90) {\n                score = 10; // Extremely overbought\n            } else {\n                score = 30; // Very overbought\n            }\n        } else if (rsiValue < 20) {\n            // Oversold - could be opportunity but also risk\n            if (rsiValue < 10) {\n                score = 20; // Extremely oversold - high risk/reward\n            } else {\n                score = 40; // Oversold - potential opportunity\n            }\n        }\n        return Math.max(0, Math.min(100, score));\n    }\n    static calculateDividendScores(fundamentals, streak, safeGrowth, quote, ema, macd, rsi) {\n        return new _models_DividendAnalysis_js__WEBPACK_IMPORTED_MODULE_1__.DividendScores({\n            payout: this.calculatePayoutScore(fundamentals.epsPayoutRatio),\n            fcf: this.calculateFCFCoverageScore(fundamentals.fcfCoverage, fundamentals.epsPayoutRatio),\n            streak: this.calculateStreakScore(streak),\n            growth: this.calculateGrowthScore(safeGrowth),\n            trend: this.calculateTrendScore(quote.price, ema),\n            macd: this.calculateMACDScore(macd),\n            rsi: this.calculateRSIScore(rsi)\n        });\n    }\n    static calculateTotalScore(scores) {\n        return Math.round(0.25 * scores.payout + 0.25 * scores.fcf + 0.17 * scores.streak + 0.16 * scores.growth + 0.07 * scores.trend + 0.06 * scores.macd + 0.04 * scores.rsi);\n    }\n    /**\n     * Analyzes EMA trends to detect potential fundamental concerns\n     */ static analyzeEMATrends(price, ema) {\n        const concerns = [];\n        let bearishSignals = 0;\n        let bullishSignals = 0;\n        if (!price || !ema.ema20 || !ema.ema50 || !ema.ema200) {\n            return {\n                isUnderEMA200: false,\n                isUnderEMA50: false,\n                isUnderEMA20: false,\n                fundamentalConcerns: [\n                    'EMA data unavailable'\n                ],\n                trendStrength: 'neutral'\n            };\n        }\n        const isUnderEMA200 = price < ema.ema200;\n        const isUnderEMA50 = price < ema.ema50;\n        const isUnderEMA20 = price < ema.ema20;\n        // EMA200 analysis - most critical for fundamentals\n        if (isUnderEMA200) {\n            concerns.push('Stock trading below EMA200 - market may doubt fundamentals');\n            bearishSignals += 2; // Strong bearish signal\n        } else {\n            bullishSignals += 2; // Strong bullish signal\n        }\n        // EMA50 analysis\n        if (isUnderEMA50) {\n            concerns.push('Stock below EMA50 - medium-term trend is bearish');\n            bearishSignals += 1;\n        } else {\n            bullishSignals += 1;\n        }\n        // EMA20 analysis\n        if (isUnderEMA20) {\n            concerns.push('Stock below EMA20 - short-term momentum is negative');\n            bearishSignals += 1;\n        } else {\n            bullishSignals += 1;\n        }\n        // Determine trend strength\n        let trendStrength;\n        if (bearishSignals >= 3) trendStrength = 'strong_bearish';\n        else if (bearishSignals >= 2) trendStrength = 'bearish';\n        else if (bullishSignals >= 3) trendStrength = 'strong_bullish';\n        else if (bullishSignals >= 2) trendStrength = 'bullish';\n        else trendStrength = 'neutral';\n        return {\n            isUnderEMA200,\n            isUnderEMA50,\n            isUnderEMA20,\n            fundamentalConcerns: concerns,\n            trendStrength\n        };\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vLi4vcGFja2FnZXMvY29yZS9kaXN0L2NhbGN1bGF0b3JzL1Njb3JlQ2FsY3VsYXRvci5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBOEM7QUFDaUI7QUFDeEQsTUFBTUU7SUFDVCxPQUFPQyxxQkFBcUJDLFdBQVcsRUFBRTtRQUNyQyxJQUFJLENBQUNDLFNBQVNELGdCQUFnQkEsZUFBZSxHQUN6QyxPQUFPO1FBQ1gsSUFBSUEsZUFBZSxLQUNmLE9BQU87UUFDWCxJQUFJQSxlQUFlLEtBQ2YsT0FBTztRQUNYLE9BQU8sQ0FBQyxJQUFJLENBQUNBLGNBQWMsR0FBRSxJQUFLLEdBQUUsSUFBSztJQUM3QztJQUNBLE9BQU9FLDBCQUEwQkMsUUFBUSxFQUFFSCxjQUFjSSxHQUFHLEVBQUU7UUFDMUQsSUFBSSxDQUFDSCxTQUFTRSxXQUFXO1lBQ3JCLElBQUlGLFNBQVNELGdCQUFnQkEsZUFBZSxLQUFLO2dCQUM3QyxPQUFPO1lBQ1g7WUFDQSxPQUFPO1FBQ1g7UUFDQSxJQUFJRyxZQUFZLEdBQ1osT0FBTztRQUNYLElBQUlBLFlBQVksR0FDWixPQUFPO1FBQ1gsT0FBT1AsMERBQUtBLENBQUNPLFdBQVcsR0FBRyxHQUFHLEtBQUs7SUFDdkM7SUFDQSxPQUFPRSxxQkFBcUJDLE1BQU0sRUFBRTtRQUNoQyxPQUFPViwwREFBS0EsQ0FBQ1UsU0FBUyxJQUFJLEdBQUcsS0FBSztJQUN0QztJQUNBLE9BQU9DLHFCQUFxQkMsVUFBVSxFQUFFO1FBQ3BDLE1BQU1DLElBQUliLDBEQUFLQSxDQUFDLENBQUNZLGFBQWMsQ0FBQyxJQUFJLElBQU0sUUFBUSxDQUFDLElBQUksR0FBSSxHQUFHO1FBQzlELE9BQU9DLElBQUk7SUFDZjtJQUNBLE9BQU9DLG9CQUFvQkMsS0FBSyxFQUFFQyxHQUFHLEVBQUU7UUFDbkMsSUFBSSxDQUFDRCxTQUFTLENBQUNDLElBQUlDLEtBQUssSUFBSSxDQUFDRCxJQUFJRSxLQUFLLElBQUksQ0FBQ0YsSUFBSUcsTUFBTSxFQUFFO1lBQ25ELE9BQU87UUFDWDtRQUNBLElBQUlDLFFBQVE7UUFDWix5RUFBeUU7UUFDekUsZ0RBQWdEO1FBQ2hELElBQUlMLFFBQVFDLElBQUlHLE1BQU0sRUFBRTtZQUNwQkMsU0FBUyxJQUFJLDhCQUE4QjtRQUMvQyxPQUNLO1lBQ0Qsc0RBQXNEO1lBQ3REQSxTQUFTLElBQUksaUNBQWlDO1FBQ2xEO1FBQ0EsMkNBQTJDO1FBQzNDLElBQUlMLFFBQVFDLElBQUlFLEtBQUssRUFBRTtZQUNuQkUsU0FBUztRQUNiO1FBQ0EsMENBQTBDO1FBQzFDLElBQUlMLFFBQVFDLElBQUlDLEtBQUssRUFBRTtZQUNuQkcsU0FBUztRQUNiO1FBQ0Esa0NBQWtDO1FBQ2xDLE9BQU9DLEtBQUtDLEdBQUcsQ0FBQyxHQUFHRjtJQUN2QjtJQUNBLE9BQU9HLG1CQUFtQkMsSUFBSSxFQUFFO1FBQzVCLGtEQUFrRDtRQUNsRCxJQUFJLENBQUNBLFFBQVFBLEtBQUtDLFFBQVEsS0FBSyxRQUFRRCxLQUFLRSxVQUFVLEtBQUssUUFBUUYsS0FBS0csU0FBUyxLQUFLLE1BQU07WUFDeEYsT0FBTyxJQUFJLHNDQUFzQztRQUNyRDtRQUNBLElBQUlQLFFBQVEsSUFBSSwyQkFBMkI7UUFDM0MsNENBQTRDO1FBQzVDLElBQUlJLEtBQUtDLFFBQVEsR0FBR0QsS0FBS0UsVUFBVSxFQUFFO1lBQ2pDLGlCQUFpQjtZQUNqQixNQUFNRSxPQUFPSixLQUFLQyxRQUFRLEdBQUdELEtBQUtFLFVBQVU7WUFDNUNOLFNBQVNDLEtBQUtRLEdBQUcsQ0FBQyxJQUFJRCxPQUFPLEtBQUssNENBQTRDO1FBQ2xGLE9BQ0s7WUFDRCxpQkFBaUI7WUFDakIsTUFBTUEsT0FBT0osS0FBS0UsVUFBVSxHQUFHRixLQUFLQyxRQUFRO1lBQzVDTCxTQUFTQyxLQUFLUSxHQUFHLENBQUMsSUFBSUQsT0FBTyxLQUFLLDhDQUE4QztRQUNwRjtRQUNBLGdDQUFnQztRQUNoQyxJQUFJSixLQUFLRyxTQUFTLEdBQUcsR0FBRztZQUNwQixvQkFBb0I7WUFDcEJQLFNBQVNDLEtBQUtRLEdBQUcsQ0FBQyxJQUFJTCxLQUFLRyxTQUFTLEdBQUcsS0FBSywrQ0FBK0M7UUFDL0YsT0FDSztZQUNELG9CQUFvQjtZQUNwQlAsU0FBU0MsS0FBS1EsR0FBRyxDQUFDLElBQUlSLEtBQUtTLEdBQUcsQ0FBQ04sS0FBS0csU0FBUyxJQUFJLEtBQUssaURBQWlEO1FBQzNHO1FBQ0EsdURBQXVEO1FBQ3ZELElBQUlILEtBQUtDLFFBQVEsR0FBRyxHQUFHO1lBQ25CLGtDQUFrQztZQUNsQ0wsU0FBU0MsS0FBS1EsR0FBRyxDQUFDLElBQUlMLEtBQUtDLFFBQVEsR0FBRztRQUMxQyxPQUNLO1lBQ0Qsb0NBQW9DO1lBQ3BDTCxTQUFTQyxLQUFLUSxHQUFHLENBQUMsSUFBSVIsS0FBS1MsR0FBRyxDQUFDTixLQUFLQyxRQUFRLElBQUk7UUFDcEQ7UUFDQSx3Q0FBd0M7UUFDeEMsT0FBT0osS0FBS0MsR0FBRyxDQUFDLEdBQUdELEtBQUtRLEdBQUcsQ0FBQyxLQUFLVDtJQUNyQztJQUNBLE9BQU9XLGtCQUFrQkMsR0FBRyxFQUFFO1FBQzFCLGlEQUFpRDtRQUNqRCxJQUFJLENBQUNBLE9BQU9BLElBQUlBLEdBQUcsS0FBSyxNQUFNO1lBQzFCLE9BQU8sSUFBSSxzQ0FBc0M7UUFDckQ7UUFDQSxNQUFNQyxXQUFXRCxJQUFJQSxHQUFHO1FBQ3hCLElBQUlaLFFBQVEsSUFBSSwyQkFBMkI7UUFDM0MsOENBQThDO1FBQzlDLG9GQUFvRjtRQUNwRixJQUFJYSxZQUFZLE1BQU1BLFlBQVksSUFBSTtZQUNsQywwQ0FBMEM7WUFDMUMsSUFBSUEsWUFBWSxNQUFNQSxZQUFZLElBQUk7Z0JBQ2xDLGtEQUFrRDtnQkFDbERiLFFBQVE7WUFDWixPQUNLLElBQUlhLFlBQVksTUFBTUEsWUFBWSxJQUFJO2dCQUN2QyxhQUFhO2dCQUNiYixRQUFRO1lBQ1osT0FDSztnQkFDRCwrQ0FBK0M7Z0JBQy9DQSxRQUFRO1lBQ1o7UUFDSixPQUNLLElBQUlhLFdBQVcsSUFBSTtZQUNwQixvRUFBb0U7WUFDcEUsSUFBSUEsV0FBVyxJQUFJO2dCQUNmYixRQUFRLElBQUksdUJBQXVCO1lBQ3ZDLE9BQ0s7Z0JBQ0RBLFFBQVEsSUFBSSxrQkFBa0I7WUFDbEM7UUFDSixPQUNLLElBQUlhLFdBQVcsSUFBSTtZQUNwQixnREFBZ0Q7WUFDaEQsSUFBSUEsV0FBVyxJQUFJO2dCQUNmYixRQUFRLElBQUksd0NBQXdDO1lBQ3hELE9BQ0s7Z0JBQ0RBLFFBQVEsSUFBSSxtQ0FBbUM7WUFDbkQ7UUFDSjtRQUNBLE9BQU9DLEtBQUtDLEdBQUcsQ0FBQyxHQUFHRCxLQUFLUSxHQUFHLENBQUMsS0FBS1Q7SUFDckM7SUFDQSxPQUFPYyx3QkFBd0JDLFlBQVksRUFBRXpCLE1BQU0sRUFBRTBCLFVBQVUsRUFBRUMsS0FBSyxFQUFFckIsR0FBRyxFQUFFUSxJQUFJLEVBQUVRLEdBQUcsRUFBRTtRQUNwRixPQUFPLElBQUkvQix1RUFBY0EsQ0FBQztZQUN0QnFDLFFBQVEsSUFBSSxDQUFDbkMsb0JBQW9CLENBQUNnQyxhQUFhSSxjQUFjO1lBQzdEQyxLQUFLLElBQUksQ0FBQ2xDLHlCQUF5QixDQUFDNkIsYUFBYU0sV0FBVyxFQUFFTixhQUFhSSxjQUFjO1lBQ3pGN0IsUUFBUSxJQUFJLENBQUNELG9CQUFvQixDQUFDQztZQUNsQ2dDLFFBQVEsSUFBSSxDQUFDL0Isb0JBQW9CLENBQUN5QjtZQUNsQ08sT0FBTyxJQUFJLENBQUM3QixtQkFBbUIsQ0FBQ3VCLE1BQU10QixLQUFLLEVBQUVDO1lBQzdDUSxNQUFNLElBQUksQ0FBQ0Qsa0JBQWtCLENBQUNDO1lBQzlCUSxLQUFLLElBQUksQ0FBQ0QsaUJBQWlCLENBQUNDO1FBQ2hDO0lBQ0o7SUFDQSxPQUFPWSxvQkFBb0JDLE1BQU0sRUFBRTtRQUMvQixPQUFPeEIsS0FBS3lCLEtBQUssQ0FBQyxPQUFPRCxPQUFPUCxNQUFNLEdBQ2xDLE9BQU9PLE9BQU9MLEdBQUcsR0FDakIsT0FBT0ssT0FBT25DLE1BQU0sR0FDcEIsT0FBT21DLE9BQU9ILE1BQU0sR0FDcEIsT0FBT0csT0FBT0YsS0FBSyxHQUNuQixPQUFPRSxPQUFPckIsSUFBSSxHQUNsQixPQUFPcUIsT0FBT2IsR0FBRztJQUN6QjtJQUNBOztLQUVDLEdBQ0QsT0FBT2UsaUJBQWlCaEMsS0FBSyxFQUFFQyxHQUFHLEVBQUU7UUFDaEMsTUFBTWdDLFdBQVcsRUFBRTtRQUNuQixJQUFJQyxpQkFBaUI7UUFDckIsSUFBSUMsaUJBQWlCO1FBQ3JCLElBQUksQ0FBQ25DLFNBQVMsQ0FBQ0MsSUFBSUMsS0FBSyxJQUFJLENBQUNELElBQUlFLEtBQUssSUFBSSxDQUFDRixJQUFJRyxNQUFNLEVBQUU7WUFDbkQsT0FBTztnQkFDSGdDLGVBQWU7Z0JBQ2ZDLGNBQWM7Z0JBQ2RDLGNBQWM7Z0JBQ2RDLHFCQUFxQjtvQkFBQztpQkFBdUI7Z0JBQzdDQyxlQUFlO1lBQ25CO1FBQ0o7UUFDQSxNQUFNSixnQkFBZ0JwQyxRQUFRQyxJQUFJRyxNQUFNO1FBQ3hDLE1BQU1pQyxlQUFlckMsUUFBUUMsSUFBSUUsS0FBSztRQUN0QyxNQUFNbUMsZUFBZXRDLFFBQVFDLElBQUlDLEtBQUs7UUFDdEMsbURBQW1EO1FBQ25ELElBQUlrQyxlQUFlO1lBQ2ZILFNBQVNRLElBQUksQ0FBQztZQUNkUCxrQkFBa0IsR0FBRyx3QkFBd0I7UUFDakQsT0FDSztZQUNEQyxrQkFBa0IsR0FBRyx3QkFBd0I7UUFDakQ7UUFDQSxpQkFBaUI7UUFDakIsSUFBSUUsY0FBYztZQUNkSixTQUFTUSxJQUFJLENBQUM7WUFDZFAsa0JBQWtCO1FBQ3RCLE9BQ0s7WUFDREMsa0JBQWtCO1FBQ3RCO1FBQ0EsaUJBQWlCO1FBQ2pCLElBQUlHLGNBQWM7WUFDZEwsU0FBU1EsSUFBSSxDQUFDO1lBQ2RQLGtCQUFrQjtRQUN0QixPQUNLO1lBQ0RDLGtCQUFrQjtRQUN0QjtRQUNBLDJCQUEyQjtRQUMzQixJQUFJSztRQUNKLElBQUlOLGtCQUFrQixHQUNsQk0sZ0JBQWdCO2FBQ2YsSUFBSU4sa0JBQWtCLEdBQ3ZCTSxnQkFBZ0I7YUFDZixJQUFJTCxrQkFBa0IsR0FDdkJLLGdCQUFnQjthQUNmLElBQUlMLGtCQUFrQixHQUN2QkssZ0JBQWdCO2FBRWhCQSxnQkFBZ0I7UUFDcEIsT0FBTztZQUNISjtZQUNBQztZQUNBQztZQUNBQyxxQkFBcUJOO1lBQ3JCTztRQUNKO0lBQ0o7QUFDSiIsInNvdXJjZXMiOlsiL1VzZXJzL21hcnRpbnN0YXJvc3RhL0RldmVsb3BtZW50L3ZpYmVzL2Rpdnl5L3BhY2thZ2VzL2NvcmUvZGlzdC9jYWxjdWxhdG9ycy9TY29yZUNhbGN1bGF0b3IuanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgY2xhbXAgfSBmcm9tIFwiLi4vdXRpbHMvTWF0aFV0aWxzLmpzXCI7XG5pbXBvcnQgeyBEaXZpZGVuZFNjb3JlcyB9IGZyb20gXCIuLi9tb2RlbHMvRGl2aWRlbmRBbmFseXNpcy5qc1wiO1xuZXhwb3J0IGNsYXNzIFNjb3JlQ2FsY3VsYXRvciB7XG4gICAgc3RhdGljIGNhbGN1bGF0ZVBheW91dFNjb3JlKHBheW91dFJhdGlvKSB7XG4gICAgICAgIGlmICghaXNGaW5pdGUocGF5b3V0UmF0aW8pIHx8IHBheW91dFJhdGlvIDw9IDApXG4gICAgICAgICAgICByZXR1cm4gMTAwO1xuICAgICAgICBpZiAocGF5b3V0UmF0aW8gPD0gMC42KVxuICAgICAgICAgICAgcmV0dXJuIDEwMDtcbiAgICAgICAgaWYgKHBheW91dFJhdGlvID49IDEuMClcbiAgICAgICAgICAgIHJldHVybiAwO1xuICAgICAgICByZXR1cm4gKDEgLSAocGF5b3V0UmF0aW8gLSAwLjYpIC8gMC40KSAqIDEwMDtcbiAgICB9XG4gICAgc3RhdGljIGNhbGN1bGF0ZUZDRkNvdmVyYWdlU2NvcmUoY292ZXJhZ2UsIHBheW91dFJhdGlvID0gTmFOKSB7XG4gICAgICAgIGlmICghaXNGaW5pdGUoY292ZXJhZ2UpKSB7XG4gICAgICAgICAgICBpZiAoaXNGaW5pdGUocGF5b3V0UmF0aW8pICYmIHBheW91dFJhdGlvIDw9IDAuNikge1xuICAgICAgICAgICAgICAgIHJldHVybiA1MDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiAwO1xuICAgICAgICB9XG4gICAgICAgIGlmIChjb3ZlcmFnZSA+PSAyKVxuICAgICAgICAgICAgcmV0dXJuIDEwMDtcbiAgICAgICAgaWYgKGNvdmVyYWdlIDw9IDApXG4gICAgICAgICAgICByZXR1cm4gMDtcbiAgICAgICAgcmV0dXJuIGNsYW1wKGNvdmVyYWdlIC8gMiwgMCwgMSkgKiAxMDA7XG4gICAgfVxuICAgIHN0YXRpYyBjYWxjdWxhdGVTdHJlYWtTY29yZShzdHJlYWspIHtcbiAgICAgICAgcmV0dXJuIGNsYW1wKHN0cmVhayAvIDIwLCAwLCAxKSAqIDEwMDtcbiAgICB9XG4gICAgc3RhdGljIGNhbGN1bGF0ZUdyb3d0aFNjb3JlKGdyb3d0aFJhdGUpIHtcbiAgICAgICAgY29uc3QgeCA9IGNsYW1wKChncm93dGhSYXRlIC0gKC0wLjEwKSkgLyAoMC4xMCAtICgtMC4xMCkpLCAwLCAxKTtcbiAgICAgICAgcmV0dXJuIHggKiAxMDA7XG4gICAgfVxuICAgIHN0YXRpYyBjYWxjdWxhdGVUcmVuZFNjb3JlKHByaWNlLCBlbWEpIHtcbiAgICAgICAgaWYgKCFwcmljZSB8fCAhZW1hLmVtYTIwIHx8ICFlbWEuZW1hNTAgfHwgIWVtYS5lbWEyMDApIHtcbiAgICAgICAgICAgIHJldHVybiAwO1xuICAgICAgICB9XG4gICAgICAgIGxldCBzY29yZSA9IDA7XG4gICAgICAgIC8vIEVNQTIwMCBpcyB0aGUgbW9zdCBpbXBvcnRhbnQgLSBpZiBzdG9jayBpcyBwZXJzaXN0ZW50bHkgdW5kZXIgRU1BMjAwLCBcbiAgICAgICAgLy8gaXQgaW5kaWNhdGVzIG1hcmtldCBkb3VidHMgYWJvdXQgZnVuZGFtZW50YWxzXG4gICAgICAgIGlmIChwcmljZSA+IGVtYS5lbWEyMDApIHtcbiAgICAgICAgICAgIHNjb3JlICs9IDUwOyAvLyBJbmNyZWFzZWQgd2VpZ2h0IGZvciBFTUEyMDBcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIC8vIFN0b2NrIGlzIHVuZGVyIEVNQTIwMCAtIHNpZ25pZmljYW50IG5lZ2F0aXZlIHNpZ25hbFxuICAgICAgICAgICAgc2NvcmUgLT0gMjA7IC8vIFBlbmFsdHkgZm9yIGJlaW5nIHVuZGVyIEVNQTIwMFxuICAgICAgICB9XG4gICAgICAgIC8vIEVNQTUwIHByb3ZpZGVzIG1lZGl1bS10ZXJtIHRyZW5kIGNvbnRleHRcbiAgICAgICAgaWYgKHByaWNlID4gZW1hLmVtYTUwKSB7XG4gICAgICAgICAgICBzY29yZSArPSAzMDtcbiAgICAgICAgfVxuICAgICAgICAvLyBFTUEyMCBwcm92aWRlcyBzaG9ydC10ZXJtIHRyZW5kIGNvbnRleHRcbiAgICAgICAgaWYgKHByaWNlID4gZW1hLmVtYTIwKSB7XG4gICAgICAgICAgICBzY29yZSArPSAyMDtcbiAgICAgICAgfVxuICAgICAgICAvLyBFbnN1cmUgc2NvcmUgZG9lc24ndCBnbyBiZWxvdyAwXG4gICAgICAgIHJldHVybiBNYXRoLm1heCgwLCBzY29yZSk7XG4gICAgfVxuICAgIHN0YXRpYyBjYWxjdWxhdGVNQUNEU2NvcmUobWFjZCkge1xuICAgICAgICAvLyBJZiBubyBNQUNEIGRhdGEgYXZhaWxhYmxlLCByZXR1cm4gbmV1dHJhbCBzY29yZVxuICAgICAgICBpZiAoIW1hY2QgfHwgbWFjZC5tYWNkTGluZSA9PT0gbnVsbCB8fCBtYWNkLnNpZ25hbExpbmUgPT09IG51bGwgfHwgbWFjZC5oaXN0b2dyYW0gPT09IG51bGwpIHtcbiAgICAgICAgICAgIHJldHVybiA1MDsgLy8gTmV1dHJhbCBzY29yZSB3aGVuIGRhdGEgdW5hdmFpbGFibGVcbiAgICAgICAgfVxuICAgICAgICBsZXQgc2NvcmUgPSA1MDsgLy8gU3RhcnQgd2l0aCBuZXV0cmFsIHNjb3JlXG4gICAgICAgIC8vIE1BQ0QgTGluZSB2cyBTaWduYWwgTGluZSAocHJpbWFyeSBzaWduYWwpXG4gICAgICAgIGlmIChtYWNkLm1hY2RMaW5lID4gbWFjZC5zaWduYWxMaW5lKSB7XG4gICAgICAgICAgICAvLyBCdWxsaXNoIHNpZ25hbFxuICAgICAgICAgICAgY29uc3QgZGlmZiA9IG1hY2QubWFjZExpbmUgLSBtYWNkLnNpZ25hbExpbmU7XG4gICAgICAgICAgICBzY29yZSArPSBNYXRoLm1pbigzMCwgZGlmZiAqIDE1KTsgLy8gVXAgdG8gMzAgcG9pbnRzIGZvciBzdHJvbmcgYnVsbGlzaCBzaWduYWxcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIC8vIEJlYXJpc2ggc2lnbmFsXG4gICAgICAgICAgICBjb25zdCBkaWZmID0gbWFjZC5zaWduYWxMaW5lIC0gbWFjZC5tYWNkTGluZTtcbiAgICAgICAgICAgIHNjb3JlIC09IE1hdGgubWluKDMwLCBkaWZmICogMTUpOyAvLyBEb3duIHRvIDMwIHBvaW50cyBmb3Igc3Ryb25nIGJlYXJpc2ggc2lnbmFsXG4gICAgICAgIH1cbiAgICAgICAgLy8gSGlzdG9ncmFtIGFuYWx5c2lzIChtb21lbnR1bSlcbiAgICAgICAgaWYgKG1hY2QuaGlzdG9ncmFtID4gMCkge1xuICAgICAgICAgICAgLy8gUG9zaXRpdmUgbW9tZW50dW1cbiAgICAgICAgICAgIHNjb3JlICs9IE1hdGgubWluKDIwLCBtYWNkLmhpc3RvZ3JhbSAqIDEwKTsgLy8gVXAgdG8gMjAgcG9pbnRzIGZvciBzdHJvbmcgcG9zaXRpdmUgbW9tZW50dW1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIC8vIE5lZ2F0aXZlIG1vbWVudHVtXG4gICAgICAgICAgICBzY29yZSAtPSBNYXRoLm1pbigyMCwgTWF0aC5hYnMobWFjZC5oaXN0b2dyYW0pICogMTApOyAvLyBEb3duIHRvIDIwIHBvaW50cyBmb3Igc3Ryb25nIG5lZ2F0aXZlIG1vbWVudHVtXG4gICAgICAgIH1cbiAgICAgICAgLy8gTUFDRCBsaW5lIHBvc2l0aW9uIHJlbGF0aXZlIHRvIHplcm8gKHRyZW5kIHN0cmVuZ3RoKVxuICAgICAgICBpZiAobWFjZC5tYWNkTGluZSA+IDApIHtcbiAgICAgICAgICAgIC8vIEFib3ZlIHplcm8gbGluZSAtIGJ1bGxpc2ggdHJlbmRcbiAgICAgICAgICAgIHNjb3JlICs9IE1hdGgubWluKDEwLCBtYWNkLm1hY2RMaW5lICogNSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAvLyBCZWxvdyB6ZXJvIGxpbmUgLSBiZWFyaXNoIHRyZW5kICBcbiAgICAgICAgICAgIHNjb3JlIC09IE1hdGgubWluKDEwLCBNYXRoLmFicyhtYWNkLm1hY2RMaW5lKSAqIDUpO1xuICAgICAgICB9XG4gICAgICAgIC8vIEVuc3VyZSBzY29yZSBzdGF5cyB3aXRoaW4gMC0xMDAgcmFuZ2VcbiAgICAgICAgcmV0dXJuIE1hdGgubWF4KDAsIE1hdGgubWluKDEwMCwgc2NvcmUpKTtcbiAgICB9XG4gICAgc3RhdGljIGNhbGN1bGF0ZVJTSVNjb3JlKHJzaSkge1xuICAgICAgICAvLyBJZiBubyBSU0kgZGF0YSBhdmFpbGFibGUsIHJldHVybiBuZXV0cmFsIHNjb3JlXG4gICAgICAgIGlmICghcnNpIHx8IHJzaS5yc2kgPT09IG51bGwpIHtcbiAgICAgICAgICAgIHJldHVybiA1MDsgLy8gTmV1dHJhbCBzY29yZSB3aGVuIGRhdGEgdW5hdmFpbGFibGVcbiAgICAgICAgfVxuICAgICAgICBjb25zdCByc2lWYWx1ZSA9IHJzaS5yc2k7XG4gICAgICAgIGxldCBzY29yZSA9IDUwOyAvLyBTdGFydCB3aXRoIG5ldXRyYWwgc2NvcmVcbiAgICAgICAgLy8gUlNJLWJhc2VkIHNjb3JpbmcgbG9naWMgZm9yIGRpdmlkZW5kIHN0b2Nrc1xuICAgICAgICAvLyBGb3IgZGl2aWRlbmQgc3RvY2tzLCB3ZSBwcmVmZXIgc3RvY2tzIHRoYXQgYXJlbid0IHNldmVyZWx5IG92ZXJib3VnaHQgb3Igb3ZlcnNvbGRcbiAgICAgICAgaWYgKHJzaVZhbHVlID49IDIwICYmIHJzaVZhbHVlIDw9IDgwKSB7XG4gICAgICAgICAgICAvLyBOb3JtYWwgcmFuZ2UgLSBnb29kIGZvciBkaXZpZGVuZCBzdG9ja3NcbiAgICAgICAgICAgIGlmIChyc2lWYWx1ZSA+PSA0MCAmJiByc2lWYWx1ZSA8PSA2MCkge1xuICAgICAgICAgICAgICAgIC8vIFN3ZWV0IHNwb3QgZm9yIGRpdmlkZW5kIGludmVzdGluZyAtIG5vdCBleHRyZW1lXG4gICAgICAgICAgICAgICAgc2NvcmUgPSAxMDA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChyc2lWYWx1ZSA+PSAzMCAmJiByc2lWYWx1ZSA8PSA3MCkge1xuICAgICAgICAgICAgICAgIC8vIEdvb2QgcmFuZ2VcbiAgICAgICAgICAgICAgICBzY29yZSA9IDg1O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgLy8gU3RpbGwgYWNjZXB0YWJsZSBidXQgZ2V0dGluZyB0b3dhcmQgZXh0cmVtZXNcbiAgICAgICAgICAgICAgICBzY29yZSA9IDcwO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHJzaVZhbHVlID4gODApIHtcbiAgICAgICAgICAgIC8vIE92ZXJib3VnaHQgLSBwb3RlbnRpYWxseSByaXNreSBlbnRyeSBwb2ludCBmb3IgZGl2aWRlbmQgaW52ZXN0b3JzXG4gICAgICAgICAgICBpZiAocnNpVmFsdWUgPiA5MCkge1xuICAgICAgICAgICAgICAgIHNjb3JlID0gMTA7IC8vIEV4dHJlbWVseSBvdmVyYm91Z2h0XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBzY29yZSA9IDMwOyAvLyBWZXJ5IG92ZXJib3VnaHRcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChyc2lWYWx1ZSA8IDIwKSB7XG4gICAgICAgICAgICAvLyBPdmVyc29sZCAtIGNvdWxkIGJlIG9wcG9ydHVuaXR5IGJ1dCBhbHNvIHJpc2tcbiAgICAgICAgICAgIGlmIChyc2lWYWx1ZSA8IDEwKSB7XG4gICAgICAgICAgICAgICAgc2NvcmUgPSAyMDsgLy8gRXh0cmVtZWx5IG92ZXJzb2xkIC0gaGlnaCByaXNrL3Jld2FyZFxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgc2NvcmUgPSA0MDsgLy8gT3ZlcnNvbGQgLSBwb3RlbnRpYWwgb3Bwb3J0dW5pdHlcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gTWF0aC5tYXgoMCwgTWF0aC5taW4oMTAwLCBzY29yZSkpO1xuICAgIH1cbiAgICBzdGF0aWMgY2FsY3VsYXRlRGl2aWRlbmRTY29yZXMoZnVuZGFtZW50YWxzLCBzdHJlYWssIHNhZmVHcm93dGgsIHF1b3RlLCBlbWEsIG1hY2QsIHJzaSkge1xuICAgICAgICByZXR1cm4gbmV3IERpdmlkZW5kU2NvcmVzKHtcbiAgICAgICAgICAgIHBheW91dDogdGhpcy5jYWxjdWxhdGVQYXlvdXRTY29yZShmdW5kYW1lbnRhbHMuZXBzUGF5b3V0UmF0aW8pLFxuICAgICAgICAgICAgZmNmOiB0aGlzLmNhbGN1bGF0ZUZDRkNvdmVyYWdlU2NvcmUoZnVuZGFtZW50YWxzLmZjZkNvdmVyYWdlLCBmdW5kYW1lbnRhbHMuZXBzUGF5b3V0UmF0aW8pLFxuICAgICAgICAgICAgc3RyZWFrOiB0aGlzLmNhbGN1bGF0ZVN0cmVha1Njb3JlKHN0cmVhayksXG4gICAgICAgICAgICBncm93dGg6IHRoaXMuY2FsY3VsYXRlR3Jvd3RoU2NvcmUoc2FmZUdyb3d0aCksXG4gICAgICAgICAgICB0cmVuZDogdGhpcy5jYWxjdWxhdGVUcmVuZFNjb3JlKHF1b3RlLnByaWNlLCBlbWEpLFxuICAgICAgICAgICAgbWFjZDogdGhpcy5jYWxjdWxhdGVNQUNEU2NvcmUobWFjZCksXG4gICAgICAgICAgICByc2k6IHRoaXMuY2FsY3VsYXRlUlNJU2NvcmUocnNpKVxuICAgICAgICB9KTtcbiAgICB9XG4gICAgc3RhdGljIGNhbGN1bGF0ZVRvdGFsU2NvcmUoc2NvcmVzKSB7XG4gICAgICAgIHJldHVybiBNYXRoLnJvdW5kKDAuMjUgKiBzY29yZXMucGF5b3V0ICtcbiAgICAgICAgICAgIDAuMjUgKiBzY29yZXMuZmNmICtcbiAgICAgICAgICAgIDAuMTcgKiBzY29yZXMuc3RyZWFrICtcbiAgICAgICAgICAgIDAuMTYgKiBzY29yZXMuZ3Jvd3RoICtcbiAgICAgICAgICAgIDAuMDcgKiBzY29yZXMudHJlbmQgK1xuICAgICAgICAgICAgMC4wNiAqIHNjb3Jlcy5tYWNkICtcbiAgICAgICAgICAgIDAuMDQgKiBzY29yZXMucnNpKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQW5hbHl6ZXMgRU1BIHRyZW5kcyB0byBkZXRlY3QgcG90ZW50aWFsIGZ1bmRhbWVudGFsIGNvbmNlcm5zXG4gICAgICovXG4gICAgc3RhdGljIGFuYWx5emVFTUFUcmVuZHMocHJpY2UsIGVtYSkge1xuICAgICAgICBjb25zdCBjb25jZXJucyA9IFtdO1xuICAgICAgICBsZXQgYmVhcmlzaFNpZ25hbHMgPSAwO1xuICAgICAgICBsZXQgYnVsbGlzaFNpZ25hbHMgPSAwO1xuICAgICAgICBpZiAoIXByaWNlIHx8ICFlbWEuZW1hMjAgfHwgIWVtYS5lbWE1MCB8fCAhZW1hLmVtYTIwMCkge1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICBpc1VuZGVyRU1BMjAwOiBmYWxzZSxcbiAgICAgICAgICAgICAgICBpc1VuZGVyRU1BNTA6IGZhbHNlLFxuICAgICAgICAgICAgICAgIGlzVW5kZXJFTUEyMDogZmFsc2UsXG4gICAgICAgICAgICAgICAgZnVuZGFtZW50YWxDb25jZXJuczogWydFTUEgZGF0YSB1bmF2YWlsYWJsZSddLFxuICAgICAgICAgICAgICAgIHRyZW5kU3RyZW5ndGg6ICduZXV0cmFsJ1xuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBpc1VuZGVyRU1BMjAwID0gcHJpY2UgPCBlbWEuZW1hMjAwO1xuICAgICAgICBjb25zdCBpc1VuZGVyRU1BNTAgPSBwcmljZSA8IGVtYS5lbWE1MDtcbiAgICAgICAgY29uc3QgaXNVbmRlckVNQTIwID0gcHJpY2UgPCBlbWEuZW1hMjA7XG4gICAgICAgIC8vIEVNQTIwMCBhbmFseXNpcyAtIG1vc3QgY3JpdGljYWwgZm9yIGZ1bmRhbWVudGFsc1xuICAgICAgICBpZiAoaXNVbmRlckVNQTIwMCkge1xuICAgICAgICAgICAgY29uY2VybnMucHVzaCgnU3RvY2sgdHJhZGluZyBiZWxvdyBFTUEyMDAgLSBtYXJrZXQgbWF5IGRvdWJ0IGZ1bmRhbWVudGFscycpO1xuICAgICAgICAgICAgYmVhcmlzaFNpZ25hbHMgKz0gMjsgLy8gU3Ryb25nIGJlYXJpc2ggc2lnbmFsXG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBidWxsaXNoU2lnbmFscyArPSAyOyAvLyBTdHJvbmcgYnVsbGlzaCBzaWduYWxcbiAgICAgICAgfVxuICAgICAgICAvLyBFTUE1MCBhbmFseXNpc1xuICAgICAgICBpZiAoaXNVbmRlckVNQTUwKSB7XG4gICAgICAgICAgICBjb25jZXJucy5wdXNoKCdTdG9jayBiZWxvdyBFTUE1MCAtIG1lZGl1bS10ZXJtIHRyZW5kIGlzIGJlYXJpc2gnKTtcbiAgICAgICAgICAgIGJlYXJpc2hTaWduYWxzICs9IDE7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBidWxsaXNoU2lnbmFscyArPSAxO1xuICAgICAgICB9XG4gICAgICAgIC8vIEVNQTIwIGFuYWx5c2lzXG4gICAgICAgIGlmIChpc1VuZGVyRU1BMjApIHtcbiAgICAgICAgICAgIGNvbmNlcm5zLnB1c2goJ1N0b2NrIGJlbG93IEVNQTIwIC0gc2hvcnQtdGVybSBtb21lbnR1bSBpcyBuZWdhdGl2ZScpO1xuICAgICAgICAgICAgYmVhcmlzaFNpZ25hbHMgKz0gMTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGJ1bGxpc2hTaWduYWxzICs9IDE7XG4gICAgICAgIH1cbiAgICAgICAgLy8gRGV0ZXJtaW5lIHRyZW5kIHN0cmVuZ3RoXG4gICAgICAgIGxldCB0cmVuZFN0cmVuZ3RoO1xuICAgICAgICBpZiAoYmVhcmlzaFNpZ25hbHMgPj0gMylcbiAgICAgICAgICAgIHRyZW5kU3RyZW5ndGggPSAnc3Ryb25nX2JlYXJpc2gnO1xuICAgICAgICBlbHNlIGlmIChiZWFyaXNoU2lnbmFscyA+PSAyKVxuICAgICAgICAgICAgdHJlbmRTdHJlbmd0aCA9ICdiZWFyaXNoJztcbiAgICAgICAgZWxzZSBpZiAoYnVsbGlzaFNpZ25hbHMgPj0gMylcbiAgICAgICAgICAgIHRyZW5kU3RyZW5ndGggPSAnc3Ryb25nX2J1bGxpc2gnO1xuICAgICAgICBlbHNlIGlmIChidWxsaXNoU2lnbmFscyA+PSAyKVxuICAgICAgICAgICAgdHJlbmRTdHJlbmd0aCA9ICdidWxsaXNoJztcbiAgICAgICAgZWxzZVxuICAgICAgICAgICAgdHJlbmRTdHJlbmd0aCA9ICduZXV0cmFsJztcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGlzVW5kZXJFTUEyMDAsXG4gICAgICAgICAgICBpc1VuZGVyRU1BNTAsXG4gICAgICAgICAgICBpc1VuZGVyRU1BMjAsXG4gICAgICAgICAgICBmdW5kYW1lbnRhbENvbmNlcm5zOiBjb25jZXJucyxcbiAgICAgICAgICAgIHRyZW5kU3RyZW5ndGhcbiAgICAgICAgfTtcbiAgICB9XG59XG4iXSwibmFtZXMiOlsiY2xhbXAiLCJEaXZpZGVuZFNjb3JlcyIsIlNjb3JlQ2FsY3VsYXRvciIsImNhbGN1bGF0ZVBheW91dFNjb3JlIiwicGF5b3V0UmF0aW8iLCJpc0Zpbml0ZSIsImNhbGN1bGF0ZUZDRkNvdmVyYWdlU2NvcmUiLCJjb3ZlcmFnZSIsIk5hTiIsImNhbGN1bGF0ZVN0cmVha1Njb3JlIiwic3RyZWFrIiwiY2FsY3VsYXRlR3Jvd3RoU2NvcmUiLCJncm93dGhSYXRlIiwieCIsImNhbGN1bGF0ZVRyZW5kU2NvcmUiLCJwcmljZSIsImVtYSIsImVtYTIwIiwiZW1hNTAiLCJlbWEyMDAiLCJzY29yZSIsIk1hdGgiLCJtYXgiLCJjYWxjdWxhdGVNQUNEU2NvcmUiLCJtYWNkIiwibWFjZExpbmUiLCJzaWduYWxMaW5lIiwiaGlzdG9ncmFtIiwiZGlmZiIsIm1pbiIsImFicyIsImNhbGN1bGF0ZVJTSVNjb3JlIiwicnNpIiwicnNpVmFsdWUiLCJjYWxjdWxhdGVEaXZpZGVuZFNjb3JlcyIsImZ1bmRhbWVudGFscyIsInNhZmVHcm93dGgiLCJxdW90ZSIsInBheW91dCIsImVwc1BheW91dFJhdGlvIiwiZmNmIiwiZmNmQ292ZXJhZ2UiLCJncm93dGgiLCJ0cmVuZCIsImNhbGN1bGF0ZVRvdGFsU2NvcmUiLCJzY29yZXMiLCJyb3VuZCIsImFuYWx5emVFTUFUcmVuZHMiLCJjb25jZXJucyIsImJlYXJpc2hTaWduYWxzIiwiYnVsbGlzaFNpZ25hbHMiLCJpc1VuZGVyRU1BMjAwIiwiaXNVbmRlckVNQTUwIiwiaXNVbmRlckVNQTIwIiwiZnVuZGFtZW50YWxDb25jZXJucyIsInRyZW5kU3RyZW5ndGgiLCJwdXNoIl0sImlnbm9yZUxpc3QiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/../../packages/core/dist/calculators/ScoreCalculator.js\n");

/***/ }),

/***/ "(rsc)/../../packages/core/dist/calculators/TechnicalIndicatorCalculator.js":
/*!****************************************************************************!*\
  !*** ../../packages/core/dist/calculators/TechnicalIndicatorCalculator.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   TechnicalIndicatorCalculator: () => (/* binding */ TechnicalIndicatorCalculator)\n/* harmony export */ });\nclass TechnicalIndicatorCalculator {\n    static calculateEMA(data, period) {\n        if (data.length < period) {\n            return [];\n        }\n        const ema = new Array(data.length).fill(NaN);\n        let sum = 0;\n        // Calculate the initial SMA\n        for(let i = 0; i < period; i++){\n            sum += data[i];\n        }\n        ema[period - 1] = sum / period;\n        // Calculate the EMA for the rest of the data\n        const multiplier = 2 / (period + 1);\n        for(let i = period; i < data.length; i++){\n            ema[i] = (data[i] - ema[i - 1]) * multiplier + ema[i - 1];\n        }\n        return ema;\n    }\n    /**\n     * Calculate MACD (Moving Average Convergence Divergence)\n     * @param data Array of closing prices (in chronological order, oldest first)\n     * @param fastPeriod Fast EMA period (default: 12)\n     * @param slowPeriod Slow EMA period (default: 26)\n     * @param signalPeriod Signal line EMA period (default: 9)\n     * @returns MACD data with current values\n     */ static calculateMACD(data, fastPeriod = 12, slowPeriod = 26, signalPeriod = 9) {\n        // Need at least slowPeriod + signalPeriod data points for meaningful MACD\n        const minDataPoints = slowPeriod + signalPeriod;\n        if (data.length < minDataPoints) {\n            return {\n                macdLine: null,\n                signalLine: null,\n                histogram: null\n            };\n        }\n        // Calculate fast and slow EMAs\n        const fastEMA = this.calculateEMA(data, fastPeriod);\n        const slowEMA = this.calculateEMA(data, slowPeriod);\n        // Calculate MACD line (fast EMA - slow EMA)\n        const macdLine = [];\n        for(let i = slowPeriod - 1; i < data.length; i++){\n            if (!isNaN(fastEMA[i]) && !isNaN(slowEMA[i])) {\n                macdLine.push(fastEMA[i] - slowEMA[i]);\n            }\n        }\n        // Calculate signal line (EMA of MACD line)\n        const signalEMA = this.calculateEMA(macdLine, signalPeriod);\n        // Calculate histogram (MACD line - signal line)\n        const currentMacd = macdLine.length > 0 ? macdLine[macdLine.length - 1] : null;\n        const currentSignal = signalEMA.length > 0 ? signalEMA[signalEMA.length - 1] : null;\n        const currentHistogram = currentMacd !== null && currentSignal !== null && !isNaN(currentSignal) ? currentMacd - currentSignal : null;\n        return {\n            macdLine: currentMacd,\n            signalLine: currentSignal,\n            histogram: currentHistogram\n        };\n    }\n    /**\n     * Analyze MACD signals for trading insights\n     * @param macd Current MACD data\n     * @param previousMacd Previous MACD data (optional, for trend analysis)\n     * @returns MACD analysis with signals and trend strength\n     */ static analyzeMACD(macd, previousMacd) {\n        const fundamentalConcerns = [];\n        // If no MACD data available\n        if (macd.macdLine === null || macd.signalLine === null || macd.histogram === null) {\n            fundamentalConcerns.push('MACD data unavailable');\n            return {\n                signal: 'neutral',\n                strength: 'weak',\n                crossover: 'none',\n                fundamentalConcerns\n            };\n        }\n        // Determine signal based on MACD position relative to signal line\n        let signal = 'neutral';\n        if (macd.macdLine > macd.signalLine) {\n            signal = 'bullish';\n        } else if (macd.macdLine < macd.signalLine) {\n            signal = 'bearish';\n        }\n        // Determine crossover if previous data is available\n        let crossover = 'none';\n        if (previousMacd && previousMacd.macdLine !== null && previousMacd.signalLine !== null) {\n            const wasAbove = previousMacd.macdLine > previousMacd.signalLine;\n            const isAbove = macd.macdLine > macd.signalLine;\n            if (!wasAbove && isAbove) {\n                crossover = 'bullish_crossover';\n            } else if (wasAbove && !isAbove) {\n                crossover = 'bearish_crossover';\n            }\n        }\n        // Determine strength based on histogram magnitude and distance from zero\n        let strength = 'weak';\n        const histogramAbs = Math.abs(macd.histogram);\n        const macdAbs = Math.abs(macd.macdLine);\n        if (histogramAbs > 0.5 && macdAbs > 1.0) {\n            strength = 'strong';\n        } else if (histogramAbs > 0.2 && macdAbs > 0.5) {\n            strength = 'moderate';\n        }\n        // Add fundamental concerns based on MACD analysis\n        if (signal === 'bearish' && strength === 'strong') {\n            fundamentalConcerns.push('Strong bearish MACD signal may indicate fundamental weakness');\n        }\n        if (crossover === 'bearish_crossover') {\n            fundamentalConcerns.push('Recent bearish MACD crossover suggests potential trend reversal');\n        }\n        if (macd.histogram < -0.5) {\n            fundamentalConcerns.push('MACD histogram strongly negative - momentum deteriorating');\n        }\n        return {\n            signal,\n            strength,\n            crossover,\n            fundamentalConcerns\n        };\n    }\n    /**\n     * Calculate RSI (Relative Strength Index)\n     * @param data Array of closing prices (in chronological order, oldest first)\n     * @param period RSI period (default: 14)\n     * @returns RSI data with current value\n     */ static calculateRSI(data, period = 14) {\n        // Need at least period + 1 data points for RSI calculation\n        if (data.length < period + 1) {\n            return {\n                rsi: null,\n                period\n            };\n        }\n        const gains = [];\n        const losses = [];\n        // Calculate price changes\n        for(let i = 1; i < data.length; i++){\n            const change = data[i] - data[i - 1];\n            gains.push(change > 0 ? change : 0);\n            losses.push(change < 0 ? Math.abs(change) : 0);\n        }\n        // Calculate initial averages using SMA for first period\n        let avgGain = gains.slice(0, period).reduce((sum, gain)=>sum + gain, 0) / period;\n        let avgLoss = losses.slice(0, period).reduce((sum, loss)=>sum + loss, 0) / period;\n        // Calculate subsequent averages using Wilder's smoothing method\n        for(let i = period; i < gains.length; i++){\n            avgGain = (avgGain * (period - 1) + gains[i]) / period;\n            avgLoss = (avgLoss * (period - 1) + losses[i]) / period;\n        }\n        // Calculate RSI\n        if (avgLoss === 0) {\n            return {\n                rsi: 100,\n                period\n            }; // All gains, no losses\n        }\n        const rs = avgGain / avgLoss;\n        const rsi = 100 - 100 / (1 + rs);\n        return {\n            rsi: Math.round(rsi * 100) / 100,\n            period\n        };\n    }\n    /**\n     * Analyze RSI signals for trading insights\n     * @param rsiData Current RSI data\n     * @param previousRsi Previous RSI value (optional, for trend analysis)\n     * @returns RSI analysis with signals and conditions\n     */ static analyzeRSI(rsiData, previousRsi) {\n        const fundamentalConcerns = [];\n        // If no RSI data available\n        if (rsiData.rsi === null) {\n            fundamentalConcerns.push('RSI data unavailable');\n            return {\n                signal: 'neutral',\n                strength: 'weak',\n                condition: 'normal',\n                trend: 'stable',\n                fundamentalConcerns\n            };\n        }\n        const rsi = rsiData.rsi;\n        // Determine signal based on RSI thresholds\n        let signal = 'neutral';\n        let condition = 'normal';\n        if (rsi >= 70) {\n            signal = 'overbought';\n            if (rsi >= 80) {\n                condition = 'extreme_overbought';\n            }\n        } else if (rsi <= 30) {\n            signal = 'oversold';\n            if (rsi <= 20) {\n                condition = 'extreme_oversold';\n            }\n        }\n        // Determine strength based on how extreme the RSI is\n        let strength = 'weak';\n        if (rsi >= 80 || rsi <= 20) {\n            strength = 'strong';\n        } else if (rsi >= 70 || rsi <= 30) {\n            strength = 'moderate';\n        }\n        // Determine trend if previous RSI is available\n        let trend = 'stable';\n        if (previousRsi !== undefined) {\n            const rsiChange = rsi - previousRsi;\n            if (Math.abs(rsiChange) > 2) {\n                trend = rsiChange > 0 ? 'rising' : 'falling';\n            }\n        }\n        // Add fundamental concerns based on RSI analysis\n        if (condition === 'extreme_overbought') {\n            fundamentalConcerns.push('Stock severely overbought - potential price correction ahead');\n        } else if (signal === 'overbought' && strength === 'moderate') {\n            fundamentalConcerns.push('Stock overbought - momentum may be unsustainable');\n        }\n        if (condition === 'extreme_oversold') {\n            fundamentalConcerns.push('Stock severely oversold - may indicate fundamental issues or opportunity');\n        }\n        if (rsi > 70 && trend === 'rising') {\n            fundamentalConcerns.push('RSI rising into overbought territory - consider timing of entry');\n        }\n        return {\n            signal,\n            strength,\n            condition,\n            trend,\n            fundamentalConcerns\n        };\n    }\n    static extractClosePricesFromAlphaVantage(timeSeries) {\n        const dailyData = timeSeries[\"Time Series (Daily)\"];\n        if (!dailyData) {\n            return [];\n        }\n        const dates = Object.keys(dailyData).sort((a, b)=>new Date(a).getTime() - new Date(b).getTime());\n        return dates.map((date)=>parseFloat(dailyData[date][\"4. close\"]));\n    }\n    static extractClosePricesFromYahoo(historicalPrices) {\n        // Sort by date ascending to ensure correct EMA calculation\n        const sortedPrices = historicalPrices.sort((a, b)=>a.date.getTime() - b.date.getTime());\n        return sortedPrices.map((data)=>data.close);\n    }\n    // Unified method for extracting close prices from either source\n    static extractClosePrices(data) {\n        if (!data) {\n            return [];\n        }\n        if (this.isAlphaVantageData(data)) {\n            return this.extractClosePricesFromAlphaVantage(data);\n        } else {\n            return this.extractClosePricesFromYahoo(data);\n        }\n    }\n    static isAlphaVantageData(data) {\n        return data && typeof data === 'object' && 'Time Series (Daily)' in data;\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vLi4vcGFja2FnZXMvY29yZS9kaXN0L2NhbGN1bGF0b3JzL1RlY2huaWNhbEluZGljYXRvckNhbGN1bGF0b3IuanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFPLE1BQU1BO0lBQ1QsT0FBT0MsYUFBYUMsSUFBSSxFQUFFQyxNQUFNLEVBQUU7UUFDOUIsSUFBSUQsS0FBS0UsTUFBTSxHQUFHRCxRQUFRO1lBQ3RCLE9BQU8sRUFBRTtRQUNiO1FBQ0EsTUFBTUUsTUFBTSxJQUFJQyxNQUFNSixLQUFLRSxNQUFNLEVBQUVHLElBQUksQ0FBQ0M7UUFDeEMsSUFBSUMsTUFBTTtRQUNWLDRCQUE0QjtRQUM1QixJQUFLLElBQUlDLElBQUksR0FBR0EsSUFBSVAsUUFBUU8sSUFBSztZQUM3QkQsT0FBT1AsSUFBSSxDQUFDUSxFQUFFO1FBQ2xCO1FBQ0FMLEdBQUcsQ0FBQ0YsU0FBUyxFQUFFLEdBQUdNLE1BQU1OO1FBQ3hCLDZDQUE2QztRQUM3QyxNQUFNUSxhQUFhLElBQUtSLENBQUFBLFNBQVM7UUFDakMsSUFBSyxJQUFJTyxJQUFJUCxRQUFRTyxJQUFJUixLQUFLRSxNQUFNLEVBQUVNLElBQUs7WUFDdkNMLEdBQUcsQ0FBQ0ssRUFBRSxHQUFHLENBQUNSLElBQUksQ0FBQ1EsRUFBRSxHQUFHTCxHQUFHLENBQUNLLElBQUksRUFBRSxJQUFJQyxhQUFhTixHQUFHLENBQUNLLElBQUksRUFBRTtRQUM3RDtRQUNBLE9BQU9MO0lBQ1g7SUFDQTs7Ozs7OztLQU9DLEdBQ0QsT0FBT08sY0FBY1YsSUFBSSxFQUFFVyxhQUFhLEVBQUUsRUFBRUMsYUFBYSxFQUFFLEVBQUVDLGVBQWUsQ0FBQyxFQUFFO1FBQzNFLDBFQUEwRTtRQUMxRSxNQUFNQyxnQkFBZ0JGLGFBQWFDO1FBQ25DLElBQUliLEtBQUtFLE1BQU0sR0FBR1ksZUFBZTtZQUM3QixPQUFPO2dCQUNIQyxVQUFVO2dCQUNWQyxZQUFZO2dCQUNaQyxXQUFXO1lBQ2Y7UUFDSjtRQUNBLCtCQUErQjtRQUMvQixNQUFNQyxVQUFVLElBQUksQ0FBQ25CLFlBQVksQ0FBQ0MsTUFBTVc7UUFDeEMsTUFBTVEsVUFBVSxJQUFJLENBQUNwQixZQUFZLENBQUNDLE1BQU1ZO1FBQ3hDLDRDQUE0QztRQUM1QyxNQUFNRyxXQUFXLEVBQUU7UUFDbkIsSUFBSyxJQUFJUCxJQUFJSSxhQUFhLEdBQUdKLElBQUlSLEtBQUtFLE1BQU0sRUFBRU0sSUFBSztZQUMvQyxJQUFJLENBQUNZLE1BQU1GLE9BQU8sQ0FBQ1YsRUFBRSxLQUFLLENBQUNZLE1BQU1ELE9BQU8sQ0FBQ1gsRUFBRSxHQUFHO2dCQUMxQ08sU0FBU00sSUFBSSxDQUFDSCxPQUFPLENBQUNWLEVBQUUsR0FBR1csT0FBTyxDQUFDWCxFQUFFO1lBQ3pDO1FBQ0o7UUFDQSwyQ0FBMkM7UUFDM0MsTUFBTWMsWUFBWSxJQUFJLENBQUN2QixZQUFZLENBQUNnQixVQUFVRjtRQUM5QyxnREFBZ0Q7UUFDaEQsTUFBTVUsY0FBY1IsU0FBU2IsTUFBTSxHQUFHLElBQUlhLFFBQVEsQ0FBQ0EsU0FBU2IsTUFBTSxHQUFHLEVBQUUsR0FBRztRQUMxRSxNQUFNc0IsZ0JBQWdCRixVQUFVcEIsTUFBTSxHQUFHLElBQUlvQixTQUFTLENBQUNBLFVBQVVwQixNQUFNLEdBQUcsRUFBRSxHQUFHO1FBQy9FLE1BQU11QixtQkFBbUIsZ0JBQWlCLFFBQVFELGtCQUFrQixRQUFRLENBQUNKLE1BQU1JLGlCQUM3RUQsY0FBY0MsZ0JBQ2Q7UUFDTixPQUFPO1lBQ0hULFVBQVVRO1lBQ1ZQLFlBQVlRO1lBQ1pQLFdBQVdRO1FBQ2Y7SUFDSjtJQUNBOzs7OztLQUtDLEdBQ0QsT0FBT0MsWUFBWUMsSUFBSSxFQUFFQyxZQUFZLEVBQUU7UUFDbkMsTUFBTUMsc0JBQXNCLEVBQUU7UUFDOUIsNEJBQTRCO1FBQzVCLElBQUlGLEtBQUtaLFFBQVEsS0FBSyxRQUFRWSxLQUFLWCxVQUFVLEtBQUssUUFBUVcsS0FBS1YsU0FBUyxLQUFLLE1BQU07WUFDL0VZLG9CQUFvQlIsSUFBSSxDQUFDO1lBQ3pCLE9BQU87Z0JBQ0hTLFFBQVE7Z0JBQ1JDLFVBQVU7Z0JBQ1ZDLFdBQVc7Z0JBQ1hIO1lBQ0o7UUFDSjtRQUNBLGtFQUFrRTtRQUNsRSxJQUFJQyxTQUFTO1FBQ2IsSUFBSUgsS0FBS1osUUFBUSxHQUFHWSxLQUFLWCxVQUFVLEVBQUU7WUFDakNjLFNBQVM7UUFDYixPQUNLLElBQUlILEtBQUtaLFFBQVEsR0FBR1ksS0FBS1gsVUFBVSxFQUFFO1lBQ3RDYyxTQUFTO1FBQ2I7UUFDQSxvREFBb0Q7UUFDcEQsSUFBSUUsWUFBWTtRQUNoQixJQUFJSixnQkFBZ0JBLGFBQWFiLFFBQVEsS0FBSyxRQUFRYSxhQUFhWixVQUFVLEtBQUssTUFBTTtZQUNwRixNQUFNaUIsV0FBV0wsYUFBYWIsUUFBUSxHQUFHYSxhQUFhWixVQUFVO1lBQ2hFLE1BQU1rQixVQUFVUCxLQUFLWixRQUFRLEdBQUdZLEtBQUtYLFVBQVU7WUFDL0MsSUFBSSxDQUFDaUIsWUFBWUMsU0FBUztnQkFDdEJGLFlBQVk7WUFDaEIsT0FDSyxJQUFJQyxZQUFZLENBQUNDLFNBQVM7Z0JBQzNCRixZQUFZO1lBQ2hCO1FBQ0o7UUFDQSx5RUFBeUU7UUFDekUsSUFBSUQsV0FBVztRQUNmLE1BQU1JLGVBQWVDLEtBQUtDLEdBQUcsQ0FBQ1YsS0FBS1YsU0FBUztRQUM1QyxNQUFNcUIsVUFBVUYsS0FBS0MsR0FBRyxDQUFDVixLQUFLWixRQUFRO1FBQ3RDLElBQUlvQixlQUFlLE9BQU9HLFVBQVUsS0FBSztZQUNyQ1AsV0FBVztRQUNmLE9BQ0ssSUFBSUksZUFBZSxPQUFPRyxVQUFVLEtBQUs7WUFDMUNQLFdBQVc7UUFDZjtRQUNBLGtEQUFrRDtRQUNsRCxJQUFJRCxXQUFXLGFBQWFDLGFBQWEsVUFBVTtZQUMvQ0Ysb0JBQW9CUixJQUFJLENBQUM7UUFDN0I7UUFDQSxJQUFJVyxjQUFjLHFCQUFxQjtZQUNuQ0gsb0JBQW9CUixJQUFJLENBQUM7UUFDN0I7UUFDQSxJQUFJTSxLQUFLVixTQUFTLEdBQUcsQ0FBQyxLQUFLO1lBQ3ZCWSxvQkFBb0JSLElBQUksQ0FBQztRQUM3QjtRQUNBLE9BQU87WUFDSFM7WUFDQUM7WUFDQUM7WUFDQUg7UUFDSjtJQUNKO0lBQ0E7Ozs7O0tBS0MsR0FDRCxPQUFPVSxhQUFhdkMsSUFBSSxFQUFFQyxTQUFTLEVBQUUsRUFBRTtRQUNuQywyREFBMkQ7UUFDM0QsSUFBSUQsS0FBS0UsTUFBTSxHQUFHRCxTQUFTLEdBQUc7WUFDMUIsT0FBTztnQkFDSHVDLEtBQUs7Z0JBQ0x2QztZQUNKO1FBQ0o7UUFDQSxNQUFNd0MsUUFBUSxFQUFFO1FBQ2hCLE1BQU1DLFNBQVMsRUFBRTtRQUNqQiwwQkFBMEI7UUFDMUIsSUFBSyxJQUFJbEMsSUFBSSxHQUFHQSxJQUFJUixLQUFLRSxNQUFNLEVBQUVNLElBQUs7WUFDbEMsTUFBTW1DLFNBQVMzQyxJQUFJLENBQUNRLEVBQUUsR0FBR1IsSUFBSSxDQUFDUSxJQUFJLEVBQUU7WUFDcENpQyxNQUFNcEIsSUFBSSxDQUFDc0IsU0FBUyxJQUFJQSxTQUFTO1lBQ2pDRCxPQUFPckIsSUFBSSxDQUFDc0IsU0FBUyxJQUFJUCxLQUFLQyxHQUFHLENBQUNNLFVBQVU7UUFDaEQ7UUFDQSx3REFBd0Q7UUFDeEQsSUFBSUMsVUFBVUgsTUFBTUksS0FBSyxDQUFDLEdBQUc1QyxRQUFRNkMsTUFBTSxDQUFDLENBQUN2QyxLQUFLd0MsT0FBU3hDLE1BQU13QyxNQUFNLEtBQUs5QztRQUM1RSxJQUFJK0MsVUFBVU4sT0FBT0csS0FBSyxDQUFDLEdBQUc1QyxRQUFRNkMsTUFBTSxDQUFDLENBQUN2QyxLQUFLMEMsT0FBUzFDLE1BQU0wQyxNQUFNLEtBQUtoRDtRQUM3RSxnRUFBZ0U7UUFDaEUsSUFBSyxJQUFJTyxJQUFJUCxRQUFRTyxJQUFJaUMsTUFBTXZDLE1BQU0sRUFBRU0sSUFBSztZQUN4Q29DLFVBQVUsQ0FBQyxVQUFZM0MsQ0FBQUEsU0FBUyxLQUFNd0MsS0FBSyxDQUFDakMsRUFBRSxJQUFJUDtZQUNsRCtDLFVBQVUsQ0FBQyxVQUFZL0MsQ0FBQUEsU0FBUyxLQUFNeUMsTUFBTSxDQUFDbEMsRUFBRSxJQUFJUDtRQUN2RDtRQUNBLGdCQUFnQjtRQUNoQixJQUFJK0MsWUFBWSxHQUFHO1lBQ2YsT0FBTztnQkFBRVIsS0FBSztnQkFBS3ZDO1lBQU8sR0FBRyx1QkFBdUI7UUFDeEQ7UUFDQSxNQUFNaUQsS0FBS04sVUFBVUk7UUFDckIsTUFBTVIsTUFBTSxNQUFPLE1BQU8sS0FBSVUsRUFBQztRQUMvQixPQUFPO1lBQ0hWLEtBQUtKLEtBQUtlLEtBQUssQ0FBQ1gsTUFBTSxPQUFPO1lBQzdCdkM7UUFDSjtJQUNKO0lBQ0E7Ozs7O0tBS0MsR0FDRCxPQUFPbUQsV0FBV0MsT0FBTyxFQUFFQyxXQUFXLEVBQUU7UUFDcEMsTUFBTXpCLHNCQUFzQixFQUFFO1FBQzlCLDJCQUEyQjtRQUMzQixJQUFJd0IsUUFBUWIsR0FBRyxLQUFLLE1BQU07WUFDdEJYLG9CQUFvQlIsSUFBSSxDQUFDO1lBQ3pCLE9BQU87Z0JBQ0hTLFFBQVE7Z0JBQ1JDLFVBQVU7Z0JBQ1Z3QixXQUFXO2dCQUNYQyxPQUFPO2dCQUNQM0I7WUFDSjtRQUNKO1FBQ0EsTUFBTVcsTUFBTWEsUUFBUWIsR0FBRztRQUN2QiwyQ0FBMkM7UUFDM0MsSUFBSVYsU0FBUztRQUNiLElBQUl5QixZQUFZO1FBQ2hCLElBQUlmLE9BQU8sSUFBSTtZQUNYVixTQUFTO1lBQ1QsSUFBSVUsT0FBTyxJQUFJO2dCQUNYZSxZQUFZO1lBQ2hCO1FBQ0osT0FDSyxJQUFJZixPQUFPLElBQUk7WUFDaEJWLFNBQVM7WUFDVCxJQUFJVSxPQUFPLElBQUk7Z0JBQ1hlLFlBQVk7WUFDaEI7UUFDSjtRQUNBLHFEQUFxRDtRQUNyRCxJQUFJeEIsV0FBVztRQUNmLElBQUlTLE9BQU8sTUFBTUEsT0FBTyxJQUFJO1lBQ3hCVCxXQUFXO1FBQ2YsT0FDSyxJQUFJUyxPQUFPLE1BQU1BLE9BQU8sSUFBSTtZQUM3QlQsV0FBVztRQUNmO1FBQ0EsK0NBQStDO1FBQy9DLElBQUl5QixRQUFRO1FBQ1osSUFBSUYsZ0JBQWdCRyxXQUFXO1lBQzNCLE1BQU1DLFlBQVlsQixNQUFNYztZQUN4QixJQUFJbEIsS0FBS0MsR0FBRyxDQUFDcUIsYUFBYSxHQUFHO2dCQUN6QkYsUUFBUUUsWUFBWSxJQUFJLFdBQVc7WUFDdkM7UUFDSjtRQUNBLGlEQUFpRDtRQUNqRCxJQUFJSCxjQUFjLHNCQUFzQjtZQUNwQzFCLG9CQUFvQlIsSUFBSSxDQUFDO1FBQzdCLE9BQ0ssSUFBSVMsV0FBVyxnQkFBZ0JDLGFBQWEsWUFBWTtZQUN6REYsb0JBQW9CUixJQUFJLENBQUM7UUFDN0I7UUFDQSxJQUFJa0MsY0FBYyxvQkFBb0I7WUFDbEMxQixvQkFBb0JSLElBQUksQ0FBQztRQUM3QjtRQUNBLElBQUltQixNQUFNLE1BQU1nQixVQUFVLFVBQVU7WUFDaEMzQixvQkFBb0JSLElBQUksQ0FBQztRQUM3QjtRQUNBLE9BQU87WUFDSFM7WUFDQUM7WUFDQXdCO1lBQ0FDO1lBQ0EzQjtRQUNKO0lBQ0o7SUFDQSxPQUFPOEIsbUNBQW1DQyxVQUFVLEVBQUU7UUFDbEQsTUFBTUMsWUFBWUQsVUFBVSxDQUFDLHNCQUFzQjtRQUNuRCxJQUFJLENBQUNDLFdBQVc7WUFDWixPQUFPLEVBQUU7UUFDYjtRQUNBLE1BQU1DLFFBQVFDLE9BQU9DLElBQUksQ0FBQ0gsV0FBV0ksSUFBSSxDQUFDLENBQUNDLEdBQUdDLElBQU0sSUFBSUMsS0FBS0YsR0FBR0csT0FBTyxLQUFLLElBQUlELEtBQUtELEdBQUdFLE9BQU87UUFDL0YsT0FBT1AsTUFBTVEsR0FBRyxDQUFDQyxDQUFBQSxPQUFRQyxXQUFXWCxTQUFTLENBQUNVLEtBQUssQ0FBQyxXQUFXO0lBQ25FO0lBQ0EsT0FBT0UsNEJBQTRCQyxnQkFBZ0IsRUFBRTtRQUNqRCwyREFBMkQ7UUFDM0QsTUFBTUMsZUFBZUQsaUJBQWlCVCxJQUFJLENBQUMsQ0FBQ0MsR0FBR0MsSUFBTUQsRUFBRUssSUFBSSxDQUFDRixPQUFPLEtBQUtGLEVBQUVJLElBQUksQ0FBQ0YsT0FBTztRQUN0RixPQUFPTSxhQUFhTCxHQUFHLENBQUN0RSxDQUFBQSxPQUFRQSxLQUFLNEUsS0FBSztJQUM5QztJQUNBLGdFQUFnRTtJQUNoRSxPQUFPQyxtQkFBbUI3RSxJQUFJLEVBQUU7UUFDNUIsSUFBSSxDQUFDQSxNQUFNO1lBQ1AsT0FBTyxFQUFFO1FBQ2I7UUFDQSxJQUFJLElBQUksQ0FBQzhFLGtCQUFrQixDQUFDOUUsT0FBTztZQUMvQixPQUFPLElBQUksQ0FBQzJELGtDQUFrQyxDQUFDM0Q7UUFDbkQsT0FDSztZQUNELE9BQU8sSUFBSSxDQUFDeUUsMkJBQTJCLENBQUN6RTtRQUM1QztJQUNKO0lBQ0EsT0FBTzhFLG1CQUFtQjlFLElBQUksRUFBRTtRQUM1QixPQUFPQSxRQUFRLE9BQU9BLFNBQVMsWUFBWSx5QkFBeUJBO0lBQ3hFO0FBQ0oiLCJzb3VyY2VzIjpbIi9Vc2Vycy9tYXJ0aW5zdGFyb3N0YS9EZXZlbG9wbWVudC92aWJlcy9kaXZ5eS9wYWNrYWdlcy9jb3JlL2Rpc3QvY2FsY3VsYXRvcnMvVGVjaG5pY2FsSW5kaWNhdG9yQ2FsY3VsYXRvci5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgY2xhc3MgVGVjaG5pY2FsSW5kaWNhdG9yQ2FsY3VsYXRvciB7XG4gICAgc3RhdGljIGNhbGN1bGF0ZUVNQShkYXRhLCBwZXJpb2QpIHtcbiAgICAgICAgaWYgKGRhdGEubGVuZ3RoIDwgcGVyaW9kKSB7XG4gICAgICAgICAgICByZXR1cm4gW107XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgZW1hID0gbmV3IEFycmF5KGRhdGEubGVuZ3RoKS5maWxsKE5hTik7XG4gICAgICAgIGxldCBzdW0gPSAwO1xuICAgICAgICAvLyBDYWxjdWxhdGUgdGhlIGluaXRpYWwgU01BXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcGVyaW9kOyBpKyspIHtcbiAgICAgICAgICAgIHN1bSArPSBkYXRhW2ldO1xuICAgICAgICB9XG4gICAgICAgIGVtYVtwZXJpb2QgLSAxXSA9IHN1bSAvIHBlcmlvZDtcbiAgICAgICAgLy8gQ2FsY3VsYXRlIHRoZSBFTUEgZm9yIHRoZSByZXN0IG9mIHRoZSBkYXRhXG4gICAgICAgIGNvbnN0IG11bHRpcGxpZXIgPSAyIC8gKHBlcmlvZCArIDEpO1xuICAgICAgICBmb3IgKGxldCBpID0gcGVyaW9kOyBpIDwgZGF0YS5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgZW1hW2ldID0gKGRhdGFbaV0gLSBlbWFbaSAtIDFdKSAqIG11bHRpcGxpZXIgKyBlbWFbaSAtIDFdO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBlbWE7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENhbGN1bGF0ZSBNQUNEIChNb3ZpbmcgQXZlcmFnZSBDb252ZXJnZW5jZSBEaXZlcmdlbmNlKVxuICAgICAqIEBwYXJhbSBkYXRhIEFycmF5IG9mIGNsb3NpbmcgcHJpY2VzIChpbiBjaHJvbm9sb2dpY2FsIG9yZGVyLCBvbGRlc3QgZmlyc3QpXG4gICAgICogQHBhcmFtIGZhc3RQZXJpb2QgRmFzdCBFTUEgcGVyaW9kIChkZWZhdWx0OiAxMilcbiAgICAgKiBAcGFyYW0gc2xvd1BlcmlvZCBTbG93IEVNQSBwZXJpb2QgKGRlZmF1bHQ6IDI2KVxuICAgICAqIEBwYXJhbSBzaWduYWxQZXJpb2QgU2lnbmFsIGxpbmUgRU1BIHBlcmlvZCAoZGVmYXVsdDogOSlcbiAgICAgKiBAcmV0dXJucyBNQUNEIGRhdGEgd2l0aCBjdXJyZW50IHZhbHVlc1xuICAgICAqL1xuICAgIHN0YXRpYyBjYWxjdWxhdGVNQUNEKGRhdGEsIGZhc3RQZXJpb2QgPSAxMiwgc2xvd1BlcmlvZCA9IDI2LCBzaWduYWxQZXJpb2QgPSA5KSB7XG4gICAgICAgIC8vIE5lZWQgYXQgbGVhc3Qgc2xvd1BlcmlvZCArIHNpZ25hbFBlcmlvZCBkYXRhIHBvaW50cyBmb3IgbWVhbmluZ2Z1bCBNQUNEXG4gICAgICAgIGNvbnN0IG1pbkRhdGFQb2ludHMgPSBzbG93UGVyaW9kICsgc2lnbmFsUGVyaW9kO1xuICAgICAgICBpZiAoZGF0YS5sZW5ndGggPCBtaW5EYXRhUG9pbnRzKSB7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIG1hY2RMaW5lOiBudWxsLFxuICAgICAgICAgICAgICAgIHNpZ25hbExpbmU6IG51bGwsXG4gICAgICAgICAgICAgICAgaGlzdG9ncmFtOiBudWxsXG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICAgIC8vIENhbGN1bGF0ZSBmYXN0IGFuZCBzbG93IEVNQXNcbiAgICAgICAgY29uc3QgZmFzdEVNQSA9IHRoaXMuY2FsY3VsYXRlRU1BKGRhdGEsIGZhc3RQZXJpb2QpO1xuICAgICAgICBjb25zdCBzbG93RU1BID0gdGhpcy5jYWxjdWxhdGVFTUEoZGF0YSwgc2xvd1BlcmlvZCk7XG4gICAgICAgIC8vIENhbGN1bGF0ZSBNQUNEIGxpbmUgKGZhc3QgRU1BIC0gc2xvdyBFTUEpXG4gICAgICAgIGNvbnN0IG1hY2RMaW5lID0gW107XG4gICAgICAgIGZvciAobGV0IGkgPSBzbG93UGVyaW9kIC0gMTsgaSA8IGRhdGEubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGlmICghaXNOYU4oZmFzdEVNQVtpXSkgJiYgIWlzTmFOKHNsb3dFTUFbaV0pKSB7XG4gICAgICAgICAgICAgICAgbWFjZExpbmUucHVzaChmYXN0RU1BW2ldIC0gc2xvd0VNQVtpXSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgLy8gQ2FsY3VsYXRlIHNpZ25hbCBsaW5lIChFTUEgb2YgTUFDRCBsaW5lKVxuICAgICAgICBjb25zdCBzaWduYWxFTUEgPSB0aGlzLmNhbGN1bGF0ZUVNQShtYWNkTGluZSwgc2lnbmFsUGVyaW9kKTtcbiAgICAgICAgLy8gQ2FsY3VsYXRlIGhpc3RvZ3JhbSAoTUFDRCBsaW5lIC0gc2lnbmFsIGxpbmUpXG4gICAgICAgIGNvbnN0IGN1cnJlbnRNYWNkID0gbWFjZExpbmUubGVuZ3RoID4gMCA/IG1hY2RMaW5lW21hY2RMaW5lLmxlbmd0aCAtIDFdIDogbnVsbDtcbiAgICAgICAgY29uc3QgY3VycmVudFNpZ25hbCA9IHNpZ25hbEVNQS5sZW5ndGggPiAwID8gc2lnbmFsRU1BW3NpZ25hbEVNQS5sZW5ndGggLSAxXSA6IG51bGw7XG4gICAgICAgIGNvbnN0IGN1cnJlbnRIaXN0b2dyYW0gPSAoY3VycmVudE1hY2QgIT09IG51bGwgJiYgY3VycmVudFNpZ25hbCAhPT0gbnVsbCAmJiAhaXNOYU4oY3VycmVudFNpZ25hbCkpXG4gICAgICAgICAgICA/IGN1cnJlbnRNYWNkIC0gY3VycmVudFNpZ25hbFxuICAgICAgICAgICAgOiBudWxsO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgbWFjZExpbmU6IGN1cnJlbnRNYWNkLFxuICAgICAgICAgICAgc2lnbmFsTGluZTogY3VycmVudFNpZ25hbCxcbiAgICAgICAgICAgIGhpc3RvZ3JhbTogY3VycmVudEhpc3RvZ3JhbVxuICAgICAgICB9O1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBBbmFseXplIE1BQ0Qgc2lnbmFscyBmb3IgdHJhZGluZyBpbnNpZ2h0c1xuICAgICAqIEBwYXJhbSBtYWNkIEN1cnJlbnQgTUFDRCBkYXRhXG4gICAgICogQHBhcmFtIHByZXZpb3VzTWFjZCBQcmV2aW91cyBNQUNEIGRhdGEgKG9wdGlvbmFsLCBmb3IgdHJlbmQgYW5hbHlzaXMpXG4gICAgICogQHJldHVybnMgTUFDRCBhbmFseXNpcyB3aXRoIHNpZ25hbHMgYW5kIHRyZW5kIHN0cmVuZ3RoXG4gICAgICovXG4gICAgc3RhdGljIGFuYWx5emVNQUNEKG1hY2QsIHByZXZpb3VzTWFjZCkge1xuICAgICAgICBjb25zdCBmdW5kYW1lbnRhbENvbmNlcm5zID0gW107XG4gICAgICAgIC8vIElmIG5vIE1BQ0QgZGF0YSBhdmFpbGFibGVcbiAgICAgICAgaWYgKG1hY2QubWFjZExpbmUgPT09IG51bGwgfHwgbWFjZC5zaWduYWxMaW5lID09PSBudWxsIHx8IG1hY2QuaGlzdG9ncmFtID09PSBudWxsKSB7XG4gICAgICAgICAgICBmdW5kYW1lbnRhbENvbmNlcm5zLnB1c2goJ01BQ0QgZGF0YSB1bmF2YWlsYWJsZScpO1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICBzaWduYWw6ICduZXV0cmFsJyxcbiAgICAgICAgICAgICAgICBzdHJlbmd0aDogJ3dlYWsnLFxuICAgICAgICAgICAgICAgIGNyb3Nzb3ZlcjogJ25vbmUnLFxuICAgICAgICAgICAgICAgIGZ1bmRhbWVudGFsQ29uY2VybnNcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgICAgLy8gRGV0ZXJtaW5lIHNpZ25hbCBiYXNlZCBvbiBNQUNEIHBvc2l0aW9uIHJlbGF0aXZlIHRvIHNpZ25hbCBsaW5lXG4gICAgICAgIGxldCBzaWduYWwgPSAnbmV1dHJhbCc7XG4gICAgICAgIGlmIChtYWNkLm1hY2RMaW5lID4gbWFjZC5zaWduYWxMaW5lKSB7XG4gICAgICAgICAgICBzaWduYWwgPSAnYnVsbGlzaCc7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAobWFjZC5tYWNkTGluZSA8IG1hY2Quc2lnbmFsTGluZSkge1xuICAgICAgICAgICAgc2lnbmFsID0gJ2JlYXJpc2gnO1xuICAgICAgICB9XG4gICAgICAgIC8vIERldGVybWluZSBjcm9zc292ZXIgaWYgcHJldmlvdXMgZGF0YSBpcyBhdmFpbGFibGVcbiAgICAgICAgbGV0IGNyb3Nzb3ZlciA9ICdub25lJztcbiAgICAgICAgaWYgKHByZXZpb3VzTWFjZCAmJiBwcmV2aW91c01hY2QubWFjZExpbmUgIT09IG51bGwgJiYgcHJldmlvdXNNYWNkLnNpZ25hbExpbmUgIT09IG51bGwpIHtcbiAgICAgICAgICAgIGNvbnN0IHdhc0Fib3ZlID0gcHJldmlvdXNNYWNkLm1hY2RMaW5lID4gcHJldmlvdXNNYWNkLnNpZ25hbExpbmU7XG4gICAgICAgICAgICBjb25zdCBpc0Fib3ZlID0gbWFjZC5tYWNkTGluZSA+IG1hY2Quc2lnbmFsTGluZTtcbiAgICAgICAgICAgIGlmICghd2FzQWJvdmUgJiYgaXNBYm92ZSkge1xuICAgICAgICAgICAgICAgIGNyb3Nzb3ZlciA9ICdidWxsaXNoX2Nyb3Nzb3Zlcic7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmICh3YXNBYm92ZSAmJiAhaXNBYm92ZSkge1xuICAgICAgICAgICAgICAgIGNyb3Nzb3ZlciA9ICdiZWFyaXNoX2Nyb3Nzb3Zlcic7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgLy8gRGV0ZXJtaW5lIHN0cmVuZ3RoIGJhc2VkIG9uIGhpc3RvZ3JhbSBtYWduaXR1ZGUgYW5kIGRpc3RhbmNlIGZyb20gemVyb1xuICAgICAgICBsZXQgc3RyZW5ndGggPSAnd2Vhayc7XG4gICAgICAgIGNvbnN0IGhpc3RvZ3JhbUFicyA9IE1hdGguYWJzKG1hY2QuaGlzdG9ncmFtKTtcbiAgICAgICAgY29uc3QgbWFjZEFicyA9IE1hdGguYWJzKG1hY2QubWFjZExpbmUpO1xuICAgICAgICBpZiAoaGlzdG9ncmFtQWJzID4gMC41ICYmIG1hY2RBYnMgPiAxLjApIHtcbiAgICAgICAgICAgIHN0cmVuZ3RoID0gJ3N0cm9uZyc7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoaGlzdG9ncmFtQWJzID4gMC4yICYmIG1hY2RBYnMgPiAwLjUpIHtcbiAgICAgICAgICAgIHN0cmVuZ3RoID0gJ21vZGVyYXRlJztcbiAgICAgICAgfVxuICAgICAgICAvLyBBZGQgZnVuZGFtZW50YWwgY29uY2VybnMgYmFzZWQgb24gTUFDRCBhbmFseXNpc1xuICAgICAgICBpZiAoc2lnbmFsID09PSAnYmVhcmlzaCcgJiYgc3RyZW5ndGggPT09ICdzdHJvbmcnKSB7XG4gICAgICAgICAgICBmdW5kYW1lbnRhbENvbmNlcm5zLnB1c2goJ1N0cm9uZyBiZWFyaXNoIE1BQ0Qgc2lnbmFsIG1heSBpbmRpY2F0ZSBmdW5kYW1lbnRhbCB3ZWFrbmVzcycpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChjcm9zc292ZXIgPT09ICdiZWFyaXNoX2Nyb3Nzb3ZlcicpIHtcbiAgICAgICAgICAgIGZ1bmRhbWVudGFsQ29uY2VybnMucHVzaCgnUmVjZW50IGJlYXJpc2ggTUFDRCBjcm9zc292ZXIgc3VnZ2VzdHMgcG90ZW50aWFsIHRyZW5kIHJldmVyc2FsJyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG1hY2QuaGlzdG9ncmFtIDwgLTAuNSkge1xuICAgICAgICAgICAgZnVuZGFtZW50YWxDb25jZXJucy5wdXNoKCdNQUNEIGhpc3RvZ3JhbSBzdHJvbmdseSBuZWdhdGl2ZSAtIG1vbWVudHVtIGRldGVyaW9yYXRpbmcnKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgc2lnbmFsLFxuICAgICAgICAgICAgc3RyZW5ndGgsXG4gICAgICAgICAgICBjcm9zc292ZXIsXG4gICAgICAgICAgICBmdW5kYW1lbnRhbENvbmNlcm5zXG4gICAgICAgIH07XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENhbGN1bGF0ZSBSU0kgKFJlbGF0aXZlIFN0cmVuZ3RoIEluZGV4KVxuICAgICAqIEBwYXJhbSBkYXRhIEFycmF5IG9mIGNsb3NpbmcgcHJpY2VzIChpbiBjaHJvbm9sb2dpY2FsIG9yZGVyLCBvbGRlc3QgZmlyc3QpXG4gICAgICogQHBhcmFtIHBlcmlvZCBSU0kgcGVyaW9kIChkZWZhdWx0OiAxNClcbiAgICAgKiBAcmV0dXJucyBSU0kgZGF0YSB3aXRoIGN1cnJlbnQgdmFsdWVcbiAgICAgKi9cbiAgICBzdGF0aWMgY2FsY3VsYXRlUlNJKGRhdGEsIHBlcmlvZCA9IDE0KSB7XG4gICAgICAgIC8vIE5lZWQgYXQgbGVhc3QgcGVyaW9kICsgMSBkYXRhIHBvaW50cyBmb3IgUlNJIGNhbGN1bGF0aW9uXG4gICAgICAgIGlmIChkYXRhLmxlbmd0aCA8IHBlcmlvZCArIDEpIHtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgcnNpOiBudWxsLFxuICAgICAgICAgICAgICAgIHBlcmlvZFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBnYWlucyA9IFtdO1xuICAgICAgICBjb25zdCBsb3NzZXMgPSBbXTtcbiAgICAgICAgLy8gQ2FsY3VsYXRlIHByaWNlIGNoYW5nZXNcbiAgICAgICAgZm9yIChsZXQgaSA9IDE7IGkgPCBkYXRhLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBjb25zdCBjaGFuZ2UgPSBkYXRhW2ldIC0gZGF0YVtpIC0gMV07XG4gICAgICAgICAgICBnYWlucy5wdXNoKGNoYW5nZSA+IDAgPyBjaGFuZ2UgOiAwKTtcbiAgICAgICAgICAgIGxvc3Nlcy5wdXNoKGNoYW5nZSA8IDAgPyBNYXRoLmFicyhjaGFuZ2UpIDogMCk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gQ2FsY3VsYXRlIGluaXRpYWwgYXZlcmFnZXMgdXNpbmcgU01BIGZvciBmaXJzdCBwZXJpb2RcbiAgICAgICAgbGV0IGF2Z0dhaW4gPSBnYWlucy5zbGljZSgwLCBwZXJpb2QpLnJlZHVjZSgoc3VtLCBnYWluKSA9PiBzdW0gKyBnYWluLCAwKSAvIHBlcmlvZDtcbiAgICAgICAgbGV0IGF2Z0xvc3MgPSBsb3NzZXMuc2xpY2UoMCwgcGVyaW9kKS5yZWR1Y2UoKHN1bSwgbG9zcykgPT4gc3VtICsgbG9zcywgMCkgLyBwZXJpb2Q7XG4gICAgICAgIC8vIENhbGN1bGF0ZSBzdWJzZXF1ZW50IGF2ZXJhZ2VzIHVzaW5nIFdpbGRlcidzIHNtb290aGluZyBtZXRob2RcbiAgICAgICAgZm9yIChsZXQgaSA9IHBlcmlvZDsgaSA8IGdhaW5zLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBhdmdHYWluID0gKChhdmdHYWluICogKHBlcmlvZCAtIDEpKSArIGdhaW5zW2ldKSAvIHBlcmlvZDtcbiAgICAgICAgICAgIGF2Z0xvc3MgPSAoKGF2Z0xvc3MgKiAocGVyaW9kIC0gMSkpICsgbG9zc2VzW2ldKSAvIHBlcmlvZDtcbiAgICAgICAgfVxuICAgICAgICAvLyBDYWxjdWxhdGUgUlNJXG4gICAgICAgIGlmIChhdmdMb3NzID09PSAwKSB7XG4gICAgICAgICAgICByZXR1cm4geyByc2k6IDEwMCwgcGVyaW9kIH07IC8vIEFsbCBnYWlucywgbm8gbG9zc2VzXG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgcnMgPSBhdmdHYWluIC8gYXZnTG9zcztcbiAgICAgICAgY29uc3QgcnNpID0gMTAwIC0gKDEwMCAvICgxICsgcnMpKTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHJzaTogTWF0aC5yb3VuZChyc2kgKiAxMDApIC8gMTAwLCAvLyBSb3VuZCB0byAyIGRlY2ltYWwgcGxhY2VzXG4gICAgICAgICAgICBwZXJpb2RcbiAgICAgICAgfTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQW5hbHl6ZSBSU0kgc2lnbmFscyBmb3IgdHJhZGluZyBpbnNpZ2h0c1xuICAgICAqIEBwYXJhbSByc2lEYXRhIEN1cnJlbnQgUlNJIGRhdGFcbiAgICAgKiBAcGFyYW0gcHJldmlvdXNSc2kgUHJldmlvdXMgUlNJIHZhbHVlIChvcHRpb25hbCwgZm9yIHRyZW5kIGFuYWx5c2lzKVxuICAgICAqIEByZXR1cm5zIFJTSSBhbmFseXNpcyB3aXRoIHNpZ25hbHMgYW5kIGNvbmRpdGlvbnNcbiAgICAgKi9cbiAgICBzdGF0aWMgYW5hbHl6ZVJTSShyc2lEYXRhLCBwcmV2aW91c1JzaSkge1xuICAgICAgICBjb25zdCBmdW5kYW1lbnRhbENvbmNlcm5zID0gW107XG4gICAgICAgIC8vIElmIG5vIFJTSSBkYXRhIGF2YWlsYWJsZVxuICAgICAgICBpZiAocnNpRGF0YS5yc2kgPT09IG51bGwpIHtcbiAgICAgICAgICAgIGZ1bmRhbWVudGFsQ29uY2VybnMucHVzaCgnUlNJIGRhdGEgdW5hdmFpbGFibGUnKTtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgc2lnbmFsOiAnbmV1dHJhbCcsXG4gICAgICAgICAgICAgICAgc3RyZW5ndGg6ICd3ZWFrJyxcbiAgICAgICAgICAgICAgICBjb25kaXRpb246ICdub3JtYWwnLFxuICAgICAgICAgICAgICAgIHRyZW5kOiAnc3RhYmxlJyxcbiAgICAgICAgICAgICAgICBmdW5kYW1lbnRhbENvbmNlcm5zXG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHJzaSA9IHJzaURhdGEucnNpO1xuICAgICAgICAvLyBEZXRlcm1pbmUgc2lnbmFsIGJhc2VkIG9uIFJTSSB0aHJlc2hvbGRzXG4gICAgICAgIGxldCBzaWduYWwgPSAnbmV1dHJhbCc7XG4gICAgICAgIGxldCBjb25kaXRpb24gPSAnbm9ybWFsJztcbiAgICAgICAgaWYgKHJzaSA+PSA3MCkge1xuICAgICAgICAgICAgc2lnbmFsID0gJ292ZXJib3VnaHQnO1xuICAgICAgICAgICAgaWYgKHJzaSA+PSA4MCkge1xuICAgICAgICAgICAgICAgIGNvbmRpdGlvbiA9ICdleHRyZW1lX292ZXJib3VnaHQnO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHJzaSA8PSAzMCkge1xuICAgICAgICAgICAgc2lnbmFsID0gJ292ZXJzb2xkJztcbiAgICAgICAgICAgIGlmIChyc2kgPD0gMjApIHtcbiAgICAgICAgICAgICAgICBjb25kaXRpb24gPSAnZXh0cmVtZV9vdmVyc29sZCc7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgLy8gRGV0ZXJtaW5lIHN0cmVuZ3RoIGJhc2VkIG9uIGhvdyBleHRyZW1lIHRoZSBSU0kgaXNcbiAgICAgICAgbGV0IHN0cmVuZ3RoID0gJ3dlYWsnO1xuICAgICAgICBpZiAocnNpID49IDgwIHx8IHJzaSA8PSAyMCkge1xuICAgICAgICAgICAgc3RyZW5ndGggPSAnc3Ryb25nJztcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChyc2kgPj0gNzAgfHwgcnNpIDw9IDMwKSB7XG4gICAgICAgICAgICBzdHJlbmd0aCA9ICdtb2RlcmF0ZSc7XG4gICAgICAgIH1cbiAgICAgICAgLy8gRGV0ZXJtaW5lIHRyZW5kIGlmIHByZXZpb3VzIFJTSSBpcyBhdmFpbGFibGVcbiAgICAgICAgbGV0IHRyZW5kID0gJ3N0YWJsZSc7XG4gICAgICAgIGlmIChwcmV2aW91c1JzaSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBjb25zdCByc2lDaGFuZ2UgPSByc2kgLSBwcmV2aW91c1JzaTtcbiAgICAgICAgICAgIGlmIChNYXRoLmFicyhyc2lDaGFuZ2UpID4gMikgeyAvLyBTaWduaWZpY2FudCBjaGFuZ2UgdGhyZXNob2xkXG4gICAgICAgICAgICAgICAgdHJlbmQgPSByc2lDaGFuZ2UgPiAwID8gJ3Jpc2luZycgOiAnZmFsbGluZyc7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgLy8gQWRkIGZ1bmRhbWVudGFsIGNvbmNlcm5zIGJhc2VkIG9uIFJTSSBhbmFseXNpc1xuICAgICAgICBpZiAoY29uZGl0aW9uID09PSAnZXh0cmVtZV9vdmVyYm91Z2h0Jykge1xuICAgICAgICAgICAgZnVuZGFtZW50YWxDb25jZXJucy5wdXNoKCdTdG9jayBzZXZlcmVseSBvdmVyYm91Z2h0IC0gcG90ZW50aWFsIHByaWNlIGNvcnJlY3Rpb24gYWhlYWQnKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChzaWduYWwgPT09ICdvdmVyYm91Z2h0JyAmJiBzdHJlbmd0aCA9PT0gJ21vZGVyYXRlJykge1xuICAgICAgICAgICAgZnVuZGFtZW50YWxDb25jZXJucy5wdXNoKCdTdG9jayBvdmVyYm91Z2h0IC0gbW9tZW50dW0gbWF5IGJlIHVuc3VzdGFpbmFibGUnKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoY29uZGl0aW9uID09PSAnZXh0cmVtZV9vdmVyc29sZCcpIHtcbiAgICAgICAgICAgIGZ1bmRhbWVudGFsQ29uY2VybnMucHVzaCgnU3RvY2sgc2V2ZXJlbHkgb3ZlcnNvbGQgLSBtYXkgaW5kaWNhdGUgZnVuZGFtZW50YWwgaXNzdWVzIG9yIG9wcG9ydHVuaXR5Jyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHJzaSA+IDcwICYmIHRyZW5kID09PSAncmlzaW5nJykge1xuICAgICAgICAgICAgZnVuZGFtZW50YWxDb25jZXJucy5wdXNoKCdSU0kgcmlzaW5nIGludG8gb3ZlcmJvdWdodCB0ZXJyaXRvcnkgLSBjb25zaWRlciB0aW1pbmcgb2YgZW50cnknKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgc2lnbmFsLFxuICAgICAgICAgICAgc3RyZW5ndGgsXG4gICAgICAgICAgICBjb25kaXRpb24sXG4gICAgICAgICAgICB0cmVuZCxcbiAgICAgICAgICAgIGZ1bmRhbWVudGFsQ29uY2VybnNcbiAgICAgICAgfTtcbiAgICB9XG4gICAgc3RhdGljIGV4dHJhY3RDbG9zZVByaWNlc0Zyb21BbHBoYVZhbnRhZ2UodGltZVNlcmllcykge1xuICAgICAgICBjb25zdCBkYWlseURhdGEgPSB0aW1lU2VyaWVzW1wiVGltZSBTZXJpZXMgKERhaWx5KVwiXTtcbiAgICAgICAgaWYgKCFkYWlseURhdGEpIHtcbiAgICAgICAgICAgIHJldHVybiBbXTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBkYXRlcyA9IE9iamVjdC5rZXlzKGRhaWx5RGF0YSkuc29ydCgoYSwgYikgPT4gbmV3IERhdGUoYSkuZ2V0VGltZSgpIC0gbmV3IERhdGUoYikuZ2V0VGltZSgpKTtcbiAgICAgICAgcmV0dXJuIGRhdGVzLm1hcChkYXRlID0+IHBhcnNlRmxvYXQoZGFpbHlEYXRhW2RhdGVdW1wiNC4gY2xvc2VcIl0pKTtcbiAgICB9XG4gICAgc3RhdGljIGV4dHJhY3RDbG9zZVByaWNlc0Zyb21ZYWhvbyhoaXN0b3JpY2FsUHJpY2VzKSB7XG4gICAgICAgIC8vIFNvcnQgYnkgZGF0ZSBhc2NlbmRpbmcgdG8gZW5zdXJlIGNvcnJlY3QgRU1BIGNhbGN1bGF0aW9uXG4gICAgICAgIGNvbnN0IHNvcnRlZFByaWNlcyA9IGhpc3RvcmljYWxQcmljZXMuc29ydCgoYSwgYikgPT4gYS5kYXRlLmdldFRpbWUoKSAtIGIuZGF0ZS5nZXRUaW1lKCkpO1xuICAgICAgICByZXR1cm4gc29ydGVkUHJpY2VzLm1hcChkYXRhID0+IGRhdGEuY2xvc2UpO1xuICAgIH1cbiAgICAvLyBVbmlmaWVkIG1ldGhvZCBmb3IgZXh0cmFjdGluZyBjbG9zZSBwcmljZXMgZnJvbSBlaXRoZXIgc291cmNlXG4gICAgc3RhdGljIGV4dHJhY3RDbG9zZVByaWNlcyhkYXRhKSB7XG4gICAgICAgIGlmICghZGF0YSkge1xuICAgICAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLmlzQWxwaGFWYW50YWdlRGF0YShkYXRhKSkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZXh0cmFjdENsb3NlUHJpY2VzRnJvbUFscGhhVmFudGFnZShkYXRhKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmV4dHJhY3RDbG9zZVByaWNlc0Zyb21ZYWhvbyhkYXRhKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBzdGF0aWMgaXNBbHBoYVZhbnRhZ2VEYXRhKGRhdGEpIHtcbiAgICAgICAgcmV0dXJuIGRhdGEgJiYgdHlwZW9mIGRhdGEgPT09ICdvYmplY3QnICYmICdUaW1lIFNlcmllcyAoRGFpbHkpJyBpbiBkYXRhO1xuICAgIH1cbn1cbiJdLCJuYW1lcyI6WyJUZWNobmljYWxJbmRpY2F0b3JDYWxjdWxhdG9yIiwiY2FsY3VsYXRlRU1BIiwiZGF0YSIsInBlcmlvZCIsImxlbmd0aCIsImVtYSIsIkFycmF5IiwiZmlsbCIsIk5hTiIsInN1bSIsImkiLCJtdWx0aXBsaWVyIiwiY2FsY3VsYXRlTUFDRCIsImZhc3RQZXJpb2QiLCJzbG93UGVyaW9kIiwic2lnbmFsUGVyaW9kIiwibWluRGF0YVBvaW50cyIsIm1hY2RMaW5lIiwic2lnbmFsTGluZSIsImhpc3RvZ3JhbSIsImZhc3RFTUEiLCJzbG93RU1BIiwiaXNOYU4iLCJwdXNoIiwic2lnbmFsRU1BIiwiY3VycmVudE1hY2QiLCJjdXJyZW50U2lnbmFsIiwiY3VycmVudEhpc3RvZ3JhbSIsImFuYWx5emVNQUNEIiwibWFjZCIsInByZXZpb3VzTWFjZCIsImZ1bmRhbWVudGFsQ29uY2VybnMiLCJzaWduYWwiLCJzdHJlbmd0aCIsImNyb3Nzb3ZlciIsIndhc0Fib3ZlIiwiaXNBYm92ZSIsImhpc3RvZ3JhbUFicyIsIk1hdGgiLCJhYnMiLCJtYWNkQWJzIiwiY2FsY3VsYXRlUlNJIiwicnNpIiwiZ2FpbnMiLCJsb3NzZXMiLCJjaGFuZ2UiLCJhdmdHYWluIiwic2xpY2UiLCJyZWR1Y2UiLCJnYWluIiwiYXZnTG9zcyIsImxvc3MiLCJycyIsInJvdW5kIiwiYW5hbHl6ZVJTSSIsInJzaURhdGEiLCJwcmV2aW91c1JzaSIsImNvbmRpdGlvbiIsInRyZW5kIiwidW5kZWZpbmVkIiwicnNpQ2hhbmdlIiwiZXh0cmFjdENsb3NlUHJpY2VzRnJvbUFscGhhVmFudGFnZSIsInRpbWVTZXJpZXMiLCJkYWlseURhdGEiLCJkYXRlcyIsIk9iamVjdCIsImtleXMiLCJzb3J0IiwiYSIsImIiLCJEYXRlIiwiZ2V0VGltZSIsIm1hcCIsImRhdGUiLCJwYXJzZUZsb2F0IiwiZXh0cmFjdENsb3NlUHJpY2VzRnJvbVlhaG9vIiwiaGlzdG9yaWNhbFByaWNlcyIsInNvcnRlZFByaWNlcyIsImNsb3NlIiwiZXh0cmFjdENsb3NlUHJpY2VzIiwiaXNBbHBoYVZhbnRhZ2VEYXRhIl0sImlnbm9yZUxpc3QiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/../../packages/core/dist/calculators/TechnicalIndicatorCalculator.js\n");

/***/ }),

/***/ "(rsc)/../../packages/core/dist/cli/DivvyCliApp.js":
/*!***************************************************!*\
  !*** ../../packages/core/dist/cli/DivvyCliApp.js ***!
  \***************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DivvyCliApp: () => (/* binding */ DivvyCliApp)\n/* harmony export */ });\n/* harmony import */ var commander__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! commander */ \"(rsc)/../../node_modules/commander/esm.mjs\");\n/* harmony import */ var _services_DividendAnalysisService_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../services/DividendAnalysisService.js */ \"(rsc)/../../packages/core/dist/services/DividendAnalysisService.js\");\n/* harmony import */ var _calculators_DividendCalculator_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../calculators/DividendCalculator.js */ \"(rsc)/../../packages/core/dist/calculators/DividendCalculator.js\");\n/* harmony import */ var _formatters_OutputFormatter_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../formatters/OutputFormatter.js */ \"(rsc)/../../packages/core/dist/formatters/OutputFormatter.js\");\n/* harmony import */ var _formatters_ErrorFormatter_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../formatters/ErrorFormatter.js */ \"(rsc)/../../packages/core/dist/formatters/ErrorFormatter.js\");\n/* harmony import */ var _validation_InputValidator_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../validation/InputValidator.js */ \"(rsc)/../../packages/core/dist/validation/InputValidator.js\");\n/* harmony import */ var _services_FallbackDataProvider_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../services/FallbackDataProvider.js */ \"(rsc)/../../packages/core/dist/services/FallbackDataProvider.js\");\n/* harmony import */ var _errors_DivvyErrors_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../errors/DivvyErrors.js */ \"(rsc)/../../packages/core/dist/errors/DivvyErrors.js\");\n\n\n\n\n\n\n\n\nclass DivvyCliApp {\n    constructor(){\n        this.analysisService = new _services_DividendAnalysisService_js__WEBPACK_IMPORTED_MODULE_1__.DividendAnalysisService();\n        this.program = new commander__WEBPACK_IMPORTED_MODULE_0__.Command();\n        this.setupCommander();\n    }\n    setupCommander() {\n        this.program.name(\"divvy\").description(\"Estimate dividend yield potential for a stock (free data). Results are automatically saved to database.\").argument(\"<ticker>\", \"Stock ticker symbol, e.g. AAPL\").option(\"-y, --years <n>\", \"Years of dividend history to fetch\", \"15\").option(\"--r <pct>\", \"Required return for optional DDM output (e.g. 0.09)\", \"0.09\").option(\"--provider <name>\", \"Data provider: yahoo, av, or auto\", \"yahoo\").option(\"--no-save\", \"Skip saving analysis results to database\").option(\"--force-fresh\", \"Force fresh analysis, bypass 24h cache\").option(\"--verbose\", \"Show detailed data quality information\").option(\"--no-warnings\", \"Suppress warning messages\").version(\"1.0.0\").helpOption(\"-h, --help\", \"Display help for command\");\n    }\n    parseArguments() {\n        this.program.parse(process.argv);\n        const options = this.program.opts();\n        // Validate arguments exist\n        if (this.program.args.length === 0) {\n            throw new _errors_DivvyErrors_js__WEBPACK_IMPORTED_MODULE_7__.ValidationError('Ticker symbol is required. Usage: divvy <TICKER>', 'ticker');\n        }\n        // Validate ticker\n        const ticker = _validation_InputValidator_js__WEBPACK_IMPORTED_MODULE_5__.InputValidator.validateTicker(this.program.args[0]);\n        // Validate years\n        const years = _validation_InputValidator_js__WEBPACK_IMPORTED_MODULE_5__.InputValidator.validateYears(options.years);\n        // Validate required return\n        const requiredReturn = _validation_InputValidator_js__WEBPACK_IMPORTED_MODULE_5__.InputValidator.validateRequiredReturn(options.r);\n        // Validate provider\n        const provider = _validation_InputValidator_js__WEBPACK_IMPORTED_MODULE_5__.InputValidator.validateProvider(options.provider);\n        // Validate all options together\n        _validation_InputValidator_js__WEBPACK_IMPORTED_MODULE_5__.InputValidator.validateCommanderOptions(options);\n        return {\n            ticker,\n            years,\n            requiredReturn,\n            provider\n        };\n    }\n    async run() {\n        try {\n            // Health check (optional)\n            if (true) {\n                const healthCheck = await this.analysisService.healthCheck();\n                if (!healthCheck.available && healthCheck.error) {\n                    console.warn(`⚠️  Data source warning: ${healthCheck.error}`);\n                    console.warn('   Analysis will proceed but may have limited data.\\n');\n                }\n            }\n            const { ticker, years, requiredReturn, provider } = this.parseArguments();\n            const options = this.program.opts();\n            // Show progress for long operations\n            if (!options.quiet) {\n                console.log(`🔍 Analyzing ${ticker}... (${years} years of data)`);\n            }\n            const analysis = await this.analysisService.analyze(ticker, years, requiredReturn, options.save !== false, options.forceFresh, provider);\n            // Show data quality warnings if enabled\n            if (!options.noWarnings) {\n                const warnings = await this.gatherWarnings(analysis);\n                if (warnings.length > 0) {\n                    console.log(_formatters_ErrorFormatter_js__WEBPACK_IMPORTED_MODULE_4__.ErrorFormatter.formatWarnings(warnings));\n                }\n            }\n            // Show verbose data quality information\n            if (options.verbose) {\n                const qualityReport = _services_FallbackDataProvider_js__WEBPACK_IMPORTED_MODULE_6__.FallbackDataProvider.assessDataQuality(true, analysis.annualDividends.length, this.countFundamentalFields(analysis.fundamentals), 5 // total fundamental fields\n                );\n                console.log(_formatters_ErrorFormatter_js__WEBPACK_IMPORTED_MODULE_4__.ErrorFormatter.formatDataQualityReport(qualityReport.score, qualityReport.level, qualityReport.recommendations));\n            }\n            // Display main analysis\n            _formatters_OutputFormatter_js__WEBPACK_IMPORTED_MODULE_3__.OutputFormatter.formatDividendAnalysis(analysis, requiredReturn);\n            // Display Gordon Growth Model if applicable\n            const ddmPrice = _calculators_DividendCalculator_js__WEBPACK_IMPORTED_MODULE_2__.DividendCalculator.calculateGordonGrowthModel(analysis.forwardDividend, analysis.quote.price, requiredReturn, analysis.safeGrowth);\n            if (ddmPrice) {\n                _formatters_OutputFormatter_js__WEBPACK_IMPORTED_MODULE_3__.OutputFormatter.formatGordonGrowthModel(ddmPrice, analysis.quote.price, requiredReturn, analysis.safeGrowth);\n            }\n            _formatters_OutputFormatter_js__WEBPACK_IMPORTED_MODULE_3__.OutputFormatter.formatFooter();\n            // Exit successfully\n            process.exit(0);\n        } catch (error) {\n            await this.handleError(error);\n        }\n    }\n    async handleError(error) {\n        const err = error instanceof Error ? error : new Error('Unknown error occurred');\n        // Format and display the error\n        const formattedError = _formatters_ErrorFormatter_js__WEBPACK_IMPORTED_MODULE_4__.ErrorFormatter.formatError(err);\n        console.error(formattedError);\n        // For debugging in development\n        if ( true && err.stack) {\n            console.error('\\nStack Trace:', err.stack);\n        }\n        // Set appropriate exit code\n        let exitCode = 1;\n        if (err instanceof _errors_DivvyErrors_js__WEBPACK_IMPORTED_MODULE_7__.ValidationError) {\n            exitCode = 2; // Invalid input\n        } else if (err instanceof _errors_DivvyErrors_js__WEBPACK_IMPORTED_MODULE_7__.DivvyError && !err.isRetryable) {\n            exitCode = 3; // Permanent failure\n        }\n        // Network/retry errors use default exit code 1\n        process.exit(exitCode);\n    }\n    async gatherWarnings(analysis) {\n        const warnings = [];\n        // Check for data completeness\n        if (analysis.annualDividends.length < 5) {\n            warnings.push('Limited dividend history may affect accuracy');\n        }\n        if (!isFinite(analysis.fundamentals.epsPayoutRatio)) {\n            warnings.push('EPS payout ratio unavailable - using estimates');\n        }\n        if (!isFinite(analysis.fundamentals.fcfCoverage)) {\n            warnings.push('Free cash flow data unavailable - using estimates');\n        }\n        // Check for unusual values\n        if (analysis.streak === 0 && analysis.ttmDividends > 0) {\n            warnings.push('Recent dividend cut detected');\n        }\n        if (analysis.totalScore < 30) {\n            warnings.push('Low dividend sustainability score - exercise caution');\n        }\n        // Check EMA trends for fundamental concerns\n        if (analysis.ema && analysis.ema.ema200 && analysis.quote.price) {\n            const { ScoreCalculator } = await Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ../calculators/ScoreCalculator.js */ \"(rsc)/../../packages/core/dist/calculators/ScoreCalculator.js\"));\n            const emaAnalysis = ScoreCalculator.analyzeEMATrends(analysis.quote.price, analysis.ema);\n            if (emaAnalysis.isUnderEMA200) {\n                warnings.push('Stock trading below EMA200 - market may doubt fundamentals');\n            }\n            if (emaAnalysis.trendStrength === 'strong_bearish' || emaAnalysis.trendStrength === 'bearish') {\n                warnings.push(`Bearish technical trend detected (${emaAnalysis.trendStrength})`);\n            }\n        }\n        // Check MACD signals for fundamental concerns\n        if (analysis.macd && (analysis.macd.macdLine !== null || analysis.macd.signalLine !== null)) {\n            const { TechnicalIndicatorCalculator } = await Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ../calculators/TechnicalIndicatorCalculator.js */ \"(rsc)/../../packages/core/dist/calculators/TechnicalIndicatorCalculator.js\"));\n            const macdAnalysis = TechnicalIndicatorCalculator.analyzeMACD(analysis.macd);\n            // Add MACD-specific warnings\n            macdAnalysis.fundamentalConcerns.forEach((concern)=>{\n                if (concern !== 'MACD data unavailable') {\n                    warnings.push(concern);\n                }\n            });\n        }\n        // Check RSI signals for fundamental concerns\n        if (analysis.rsi && analysis.rsi.rsi !== null) {\n            const { TechnicalIndicatorCalculator } = await Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ../calculators/TechnicalIndicatorCalculator.js */ \"(rsc)/../../packages/core/dist/calculators/TechnicalIndicatorCalculator.js\"));\n            const rsiAnalysis = TechnicalIndicatorCalculator.analyzeRSI(analysis.rsi);\n            // Add RSI-specific warnings\n            rsiAnalysis.fundamentalConcerns.forEach((concern)=>{\n                if (concern !== 'RSI data unavailable') {\n                    warnings.push(concern);\n                }\n            });\n        }\n        return warnings;\n    }\n    countFundamentalFields(fundamentals) {\n        let count = 0;\n        if (isFinite(fundamentals.operatingCashFlow)) count++;\n        if (isFinite(fundamentals.capitalExpenditure)) count++;\n        if (isFinite(fundamentals.cashDividendsPaid)) count++;\n        if (isFinite(fundamentals.netIncome)) count++;\n        if (isFinite(fundamentals.epsPayoutRatio)) count++;\n        return count;\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/../../packages/core/dist/cli/DivvyCliApp.js\n");

/***/ }),

/***/ "(rsc)/../../packages/core/dist/data/DividendAristocrats.js":
/*!************************************************************!*\
  !*** ../../packages/core/dist/data/DividendAristocrats.js ***!
  \************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DIVIDEND_ARISTOCRATS: () => (/* binding */ DIVIDEND_ARISTOCRATS),\n/* harmony export */   DIVIDEND_KINGS: () => (/* binding */ DIVIDEND_KINGS),\n/* harmony export */   DividendEliteDetector: () => (/* binding */ DividendEliteDetector)\n/* harmony export */ });\n/**\n * Known dividend aristocrats and kings for data quality validation\n * Sources: S&P Dividend Aristocrats list, Dividend Kings lists\n */ const DIVIDEND_KINGS = [\n    {\n        ticker: 'KO',\n        name: 'Coca-Cola',\n        yearsOfIncreases: 61,\n        category: 'king'\n    },\n    {\n        ticker: 'JNJ',\n        name: 'Johnson & Johnson',\n        yearsOfIncreases: 61,\n        category: 'king'\n    },\n    {\n        ticker: 'PG',\n        name: 'Procter & Gamble',\n        yearsOfIncreases: 67,\n        category: 'king'\n    },\n    {\n        ticker: 'MMM',\n        name: '3M Company',\n        yearsOfIncreases: 65,\n        category: 'king'\n    },\n    {\n        ticker: 'CL',\n        name: 'Colgate-Palmolive',\n        yearsOfIncreases: 60,\n        category: 'king'\n    },\n    {\n        ticker: 'KMB',\n        name: 'Kimberly-Clark',\n        yearsOfIncreases: 51,\n        category: 'king'\n    },\n    {\n        ticker: 'SYY',\n        name: 'Sysco Corporation',\n        yearsOfIncreases: 53,\n        category: 'king'\n    },\n    {\n        ticker: 'HRL',\n        name: 'Hormel Foods',\n        yearsOfIncreases: 57,\n        category: 'king'\n    },\n    {\n        ticker: 'WMT',\n        name: 'Walmart',\n        yearsOfIncreases: 49,\n        category: 'king'\n    },\n    {\n        ticker: 'PEP',\n        name: 'PepsiCo',\n        yearsOfIncreases: 51,\n        category: 'king'\n    },\n    {\n        ticker: 'MDT',\n        name: 'Medtronic',\n        yearsOfIncreases: 46,\n        category: 'king'\n    },\n    {\n        ticker: 'CVX',\n        name: 'Chevron',\n        yearsOfIncreases: 36,\n        category: 'king'\n    },\n    {\n        ticker: 'XOM',\n        name: 'Exxon Mobil',\n        yearsOfIncreases: 40,\n        category: 'king'\n    },\n    {\n        ticker: 'ED',\n        name: 'Consolidated Edison',\n        yearsOfIncreases: 49,\n        category: 'king'\n    },\n    {\n        ticker: 'SO',\n        name: 'Southern Company',\n        yearsOfIncreases: 42,\n        category: 'king'\n    }\n];\nconst DIVIDEND_ARISTOCRATS = [\n    {\n        ticker: 'ABBV',\n        name: 'AbbVie',\n        yearsOfIncreases: 51,\n        category: 'aristocrat'\n    },\n    {\n        ticker: 'ADM',\n        name: 'Archer-Daniels-Midland',\n        yearsOfIncreases: 48,\n        category: 'aristocrat'\n    },\n    {\n        ticker: 'AFL',\n        name: 'Aflac',\n        yearsOfIncreases: 40,\n        category: 'aristocrat'\n    },\n    {\n        ticker: 'ALB',\n        name: 'Albemarle Corporation',\n        yearsOfIncreases: 29,\n        category: 'aristocrat'\n    },\n    {\n        ticker: 'APD',\n        name: 'Air Products and Chemicals',\n        yearsOfIncreases: 41,\n        category: 'aristocrat'\n    },\n    {\n        ticker: 'ATO',\n        name: 'Atmos Energy',\n        yearsOfIncreases: 39,\n        category: 'aristocrat'\n    },\n    {\n        ticker: 'BDX',\n        name: 'Becton Dickinson',\n        yearsOfIncreases: 51,\n        category: 'aristocrat'\n    },\n    {\n        ticker: 'BF.B',\n        name: 'Brown-Forman',\n        yearsOfIncreases: 39,\n        category: 'aristocrat'\n    },\n    {\n        ticker: 'CAT',\n        name: 'Caterpillar',\n        yearsOfIncreases: 29,\n        category: 'aristocrat'\n    },\n    {\n        ticker: 'CHD',\n        name: 'Church & Dwight',\n        yearsOfIncreases: 27,\n        category: 'aristocrat'\n    },\n    {\n        ticker: 'CTAS',\n        name: 'Cintas Corporation',\n        yearsOfIncreases: 39,\n        category: 'aristocrat'\n    },\n    {\n        ticker: 'ECL',\n        name: 'Ecolab',\n        yearsOfIncreases: 31,\n        category: 'aristocrat'\n    },\n    {\n        ticker: 'EMR',\n        name: 'Emerson Electric',\n        yearsOfIncreases: 66,\n        category: 'aristocrat'\n    },\n    {\n        ticker: 'ESS',\n        name: 'Essex Property Trust',\n        yearsOfIncreases: 29,\n        category: 'aristocrat'\n    },\n    {\n        ticker: 'EXPD',\n        name: 'Expeditors International',\n        yearsOfIncreases: 28,\n        category: 'aristocrat'\n    },\n    {\n        ticker: 'GPC',\n        name: 'Genuine Parts',\n        yearsOfIncreases: 67,\n        category: 'aristocrat'\n    },\n    {\n        ticker: 'ITW',\n        name: 'Illinois Tool Works',\n        yearsOfIncreases: 60,\n        category: 'aristocrat'\n    },\n    {\n        ticker: 'LOW',\n        name: 'Lowe\\'s Companies',\n        yearsOfIncreases: 60,\n        category: 'aristocrat'\n    },\n    {\n        ticker: 'MCD',\n        name: 'McDonald\\'s Corporation',\n        yearsOfIncreases: 46,\n        category: 'aristocrat'\n    },\n    {\n        ticker: 'MKC',\n        name: 'McCormick & Company',\n        yearsOfIncreases: 37,\n        category: 'aristocrat'\n    },\n    {\n        ticker: 'NDSN',\n        name: 'Nordson Corporation',\n        yearsOfIncreases: 60,\n        category: 'aristocrat'\n    },\n    {\n        ticker: 'NUE',\n        name: 'Nucor Corporation',\n        yearsOfIncreases: 50,\n        category: 'aristocrat'\n    },\n    {\n        ticker: 'O',\n        name: 'Realty Income',\n        yearsOfIncreases: 28,\n        category: 'aristocrat'\n    },\n    {\n        ticker: 'PNR',\n        name: 'Pentair plc',\n        yearsOfIncreases: 47,\n        category: 'aristocrat'\n    },\n    {\n        ticker: 'PPG',\n        name: 'PPG Industries',\n        yearsOfIncreases: 51,\n        category: 'aristocrat'\n    },\n    {\n        ticker: 'SHW',\n        name: 'Sherwin-Williams',\n        yearsOfIncreases: 44,\n        category: 'aristocrat'\n    },\n    {\n        ticker: 'SPGI',\n        name: 'S&P Global',\n        yearsOfIncreases: 50,\n        category: 'aristocrat'\n    },\n    {\n        ticker: 'SWK',\n        name: 'Stanley Black & Decker',\n        yearsOfIncreases: 55,\n        category: 'aristocrat'\n    },\n    {\n        ticker: 'TGT',\n        name: 'Target Corporation',\n        yearsOfIncreases: 55,\n        category: 'aristocrat'\n    },\n    {\n        ticker: 'TROW',\n        name: 'T. Rowe Price',\n        yearsOfIncreases: 37,\n        category: 'aristocrat'\n    },\n    {\n        ticker: 'WBA',\n        name: 'Walgreens Boots Alliance',\n        yearsOfIncreases: 47,\n        category: 'aristocrat'\n    },\n    {\n        ticker: 'WST',\n        name: 'West Pharmaceutical Services',\n        yearsOfIncreases: 30,\n        category: 'aristocrat'\n    }\n];\nclass DividendEliteDetector {\n    static{\n        this.ALL_ELITE = [\n            ...DIVIDEND_KINGS,\n            ...DIVIDEND_ARISTOCRATS\n        ];\n    }\n    /**\n     * Check if a ticker is a known dividend elite stock\n     */ static isKnownElite(ticker) {\n        return this.ALL_ELITE.find((stock)=>stock.ticker === ticker) || null;\n    }\n    /**\n     * Get expected dividend streak for known elite stocks\n     */ static getExpectedStreak(ticker) {\n        const stock = this.isKnownElite(ticker);\n        return stock ? stock.yearsOfIncreases : null;\n    }\n    /**\n     * Validate calculated streak against known data\n     */ static validateStreak(ticker, calculatedStreak) {\n        const expectedStreak = this.getExpectedStreak(ticker);\n        if (!expectedStreak) {\n            // Not a known elite stock\n            return {\n                isValid: true,\n                confidence: 'high'\n            };\n        }\n        // For known elite stocks, check if calculated streak is reasonable\n        const ratio = calculatedStreak / expectedStreak;\n        if (ratio >= 0.8) {\n            // Within 20% of expected - likely good data\n            return {\n                isValid: true,\n                expectedStreak,\n                confidence: 'high'\n            };\n        } else if (ratio >= 0.5) {\n            // 50-80% of expected - some data issues\n            return {\n                isValid: true,\n                expectedStreak,\n                confidence: 'medium',\n                warning: `Calculated streak (${calculatedStreak}) lower than expected (${expectedStreak}) due to data quality issues`\n            };\n        } else if (calculatedStreak >= 10) {\n            // At least 10 years but much lower than expected\n            return {\n                isValid: true,\n                expectedStreak,\n                confidence: 'low',\n                warning: `Significant data quality issues detected. Expected ${expectedStreak} years, calculated ${calculatedStreak}`\n            };\n        } else {\n            // Very low streak for known elite stock - major data problems\n            return {\n                isValid: false,\n                expectedStreak,\n                confidence: 'low',\n                warning: `Major data quality issues. Known ${this.isKnownElite(ticker)?.category} with ${expectedStreak} years, but calculated only ${calculatedStreak}`\n            };\n        }\n    }\n    /**\n     * Get all tickers by category\n     */ static getKings() {\n        return DIVIDEND_KINGS.map((stock)=>stock.ticker);\n    }\n    static getAristocrats() {\n        return DIVIDEND_ARISTOCRATS.map((stock)=>stock.ticker);\n    }\n    /**\n     * Suggest adjusted streak based on known status\n     */ static getAdjustedStreak(ticker, calculatedStreak) {\n        const validation = this.validateStreak(ticker, calculatedStreak);\n        if (!validation.expectedStreak || validation.confidence === 'high') {\n            return {\n                adjustedStreak: calculatedStreak,\n                adjustment: 'none',\n                rationale: undefined\n            };\n        }\n        if (validation.confidence === 'medium') {\n            // Minor adjustment - use calculated but note the issue\n            return {\n                adjustedStreak: calculatedStreak,\n                adjustment: 'minor',\n                rationale: validation.warning\n            };\n        }\n        // Major adjustment - use a conservative estimate\n        const conservativeEstimate = Math.max(calculatedStreak, Math.min(validation.expectedStreak * 0.7, 25));\n        return {\n            adjustedStreak: Math.round(conservativeEstimate),\n            adjustment: 'major',\n            rationale: `Adjusted for known ${this.isKnownElite(ticker)?.category} status with data quality issues`\n        };\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/../../packages/core/dist/data/DividendAristocrats.js\n");

/***/ }),

/***/ "(rsc)/../../packages/core/dist/errors/DivvyErrors.js":
/*!******************************************************!*\
  !*** ../../packages/core/dist/errors/DivvyErrors.js ***!
  \******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ConfigurationError: () => (/* binding */ ConfigurationError),\n/* harmony export */   DataQualityError: () => (/* binding */ DataQualityError),\n/* harmony export */   DataSourceError: () => (/* binding */ DataSourceError),\n/* harmony export */   DivvyError: () => (/* binding */ DivvyError),\n/* harmony export */   InsufficientDataError: () => (/* binding */ InsufficientDataError),\n/* harmony export */   NetworkError: () => (/* binding */ NetworkError),\n/* harmony export */   RateLimitError: () => (/* binding */ RateLimitError),\n/* harmony export */   TickerNotFoundError: () => (/* binding */ TickerNotFoundError),\n/* harmony export */   ValidationError: () => (/* binding */ ValidationError)\n/* harmony export */ });\nclass DivvyError extends Error {\n    constructor(message, code, isRetryable = false){\n        super(message);\n        this.name = this.constructor.name;\n        this.code = code;\n        this.isRetryable = isRetryable;\n        Error.captureStackTrace(this, this.constructor);\n    }\n}\nclass ValidationError extends DivvyError {\n    constructor(message, field){\n        const code = field ? `VALIDATION_${field.toUpperCase()}` : 'VALIDATION_ERROR';\n        super(message, code, false);\n    }\n}\nclass DataSourceError extends DivvyError {\n    constructor(message, source, isRetryable = true){\n        super(message, `DATA_SOURCE_${source.toUpperCase()}`, isRetryable);\n        this.source = source;\n    }\n}\nclass NetworkError extends DivvyError {\n    constructor(message, statusCode){\n        super(message, 'NETWORK_ERROR', true);\n        this.statusCode = statusCode;\n    }\n}\nclass DataQualityError extends DivvyError {\n    constructor(message, dataType){\n        super(message, `DATA_QUALITY_${dataType.toUpperCase()}`, false);\n        this.dataType = dataType;\n    }\n}\nclass ConfigurationError extends DivvyError {\n    constructor(message){\n        super(message, 'CONFIGURATION_ERROR', false);\n    }\n}\nclass TickerNotFoundError extends DivvyError {\n    constructor(ticker){\n        super(`Ticker symbol '${ticker}' not found or invalid`, 'TICKER_NOT_FOUND', false);\n        this.ticker = ticker;\n    }\n}\nclass InsufficientDataError extends DivvyError {\n    constructor(missingData){\n        const dataList = missingData.join(', ');\n        super(`Insufficient data for analysis. Missing: ${dataList}`, 'INSUFFICIENT_DATA', false);\n        this.missingData = missingData;\n    }\n}\nclass RateLimitError extends DivvyError {\n    constructor(message, retryAfter){\n        super(message, 'RATE_LIMIT', true);\n        this.retryAfter = retryAfter;\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vLi4vcGFja2FnZXMvY29yZS9kaXN0L2Vycm9ycy9EaXZ2eUVycm9ycy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7QUFBTyxNQUFNQSxtQkFBbUJDO0lBRzVCLFlBQVlDLE9BQU8sRUFBRUMsSUFBSSxFQUFFQyxjQUFjLEtBQUssQ0FBRTtRQUM1QyxLQUFLLENBQUNGO1FBQ04sSUFBSSxDQUFDRyxJQUFJLEdBQUcsSUFBSSxDQUFDLFdBQVcsQ0FBQ0EsSUFBSTtRQUNqQyxJQUFJLENBQUNGLElBQUksR0FBR0E7UUFDWixJQUFJLENBQUNDLFdBQVcsR0FBR0E7UUFDbkJILE1BQU1LLGlCQUFpQixDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsV0FBVztJQUNsRDtBQUNKO0FBQ08sTUFBTUMsd0JBQXdCUDtJQUNqQyxZQUFZRSxPQUFPLEVBQUVNLEtBQUssQ0FBRTtRQUN4QixNQUFNTCxPQUFPSyxRQUFRLENBQUMsV0FBVyxFQUFFQSxNQUFNQyxXQUFXLElBQUksR0FBRztRQUMzRCxLQUFLLENBQUNQLFNBQVNDLE1BQU07SUFDekI7QUFDSjtBQUNPLE1BQU1PLHdCQUF3QlY7SUFFakMsWUFBWUUsT0FBTyxFQUFFUyxNQUFNLEVBQUVQLGNBQWMsSUFBSSxDQUFFO1FBQzdDLEtBQUssQ0FBQ0YsU0FBUyxDQUFDLFlBQVksRUFBRVMsT0FBT0YsV0FBVyxJQUFJLEVBQUVMO1FBQ3RELElBQUksQ0FBQ08sTUFBTSxHQUFHQTtJQUNsQjtBQUNKO0FBQ08sTUFBTUMscUJBQXFCWjtJQUU5QixZQUFZRSxPQUFPLEVBQUVXLFVBQVUsQ0FBRTtRQUM3QixLQUFLLENBQUNYLFNBQVMsaUJBQWlCO1FBQ2hDLElBQUksQ0FBQ1csVUFBVSxHQUFHQTtJQUN0QjtBQUNKO0FBQ08sTUFBTUMseUJBQXlCZDtJQUVsQyxZQUFZRSxPQUFPLEVBQUVhLFFBQVEsQ0FBRTtRQUMzQixLQUFLLENBQUNiLFNBQVMsQ0FBQyxhQUFhLEVBQUVhLFNBQVNOLFdBQVcsSUFBSSxFQUFFO1FBQ3pELElBQUksQ0FBQ00sUUFBUSxHQUFHQTtJQUNwQjtBQUNKO0FBQ08sTUFBTUMsMkJBQTJCaEI7SUFDcEMsWUFBWUUsT0FBTyxDQUFFO1FBQ2pCLEtBQUssQ0FBQ0EsU0FBUyx1QkFBdUI7SUFDMUM7QUFDSjtBQUNPLE1BQU1lLDRCQUE0QmpCO0lBRXJDLFlBQVlrQixNQUFNLENBQUU7UUFDaEIsS0FBSyxDQUFDLENBQUMsZUFBZSxFQUFFQSxPQUFPLHNCQUFzQixDQUFDLEVBQUUsb0JBQW9CO1FBQzVFLElBQUksQ0FBQ0EsTUFBTSxHQUFHQTtJQUNsQjtBQUNKO0FBQ08sTUFBTUMsOEJBQThCbkI7SUFFdkMsWUFBWW9CLFdBQVcsQ0FBRTtRQUNyQixNQUFNQyxXQUFXRCxZQUFZRSxJQUFJLENBQUM7UUFDbEMsS0FBSyxDQUFDLENBQUMseUNBQXlDLEVBQUVELFVBQVUsRUFBRSxxQkFBcUI7UUFDbkYsSUFBSSxDQUFDRCxXQUFXLEdBQUdBO0lBQ3ZCO0FBQ0o7QUFDTyxNQUFNRyx1QkFBdUJ2QjtJQUVoQyxZQUFZRSxPQUFPLEVBQUVzQixVQUFVLENBQUU7UUFDN0IsS0FBSyxDQUFDdEIsU0FBUyxjQUFjO1FBQzdCLElBQUksQ0FBQ3NCLFVBQVUsR0FBR0E7SUFDdEI7QUFDSiIsInNvdXJjZXMiOlsiL1VzZXJzL21hcnRpbnN0YXJvc3RhL0RldmVsb3BtZW50L3ZpYmVzL2Rpdnl5L3BhY2thZ2VzL2NvcmUvZGlzdC9lcnJvcnMvRGl2dnlFcnJvcnMuanMiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGNsYXNzIERpdnZ5RXJyb3IgZXh0ZW5kcyBFcnJvciB7XG4gICAgY29kZTtcbiAgICBpc1JldHJ5YWJsZTtcbiAgICBjb25zdHJ1Y3RvcihtZXNzYWdlLCBjb2RlLCBpc1JldHJ5YWJsZSA9IGZhbHNlKSB7XG4gICAgICAgIHN1cGVyKG1lc3NhZ2UpO1xuICAgICAgICB0aGlzLm5hbWUgPSB0aGlzLmNvbnN0cnVjdG9yLm5hbWU7XG4gICAgICAgIHRoaXMuY29kZSA9IGNvZGU7XG4gICAgICAgIHRoaXMuaXNSZXRyeWFibGUgPSBpc1JldHJ5YWJsZTtcbiAgICAgICAgRXJyb3IuY2FwdHVyZVN0YWNrVHJhY2UodGhpcywgdGhpcy5jb25zdHJ1Y3Rvcik7XG4gICAgfVxufVxuZXhwb3J0IGNsYXNzIFZhbGlkYXRpb25FcnJvciBleHRlbmRzIERpdnZ5RXJyb3Ige1xuICAgIGNvbnN0cnVjdG9yKG1lc3NhZ2UsIGZpZWxkKSB7XG4gICAgICAgIGNvbnN0IGNvZGUgPSBmaWVsZCA/IGBWQUxJREFUSU9OXyR7ZmllbGQudG9VcHBlckNhc2UoKX1gIDogJ1ZBTElEQVRJT05fRVJST1InO1xuICAgICAgICBzdXBlcihtZXNzYWdlLCBjb2RlLCBmYWxzZSk7XG4gICAgfVxufVxuZXhwb3J0IGNsYXNzIERhdGFTb3VyY2VFcnJvciBleHRlbmRzIERpdnZ5RXJyb3Ige1xuICAgIHNvdXJjZTtcbiAgICBjb25zdHJ1Y3RvcihtZXNzYWdlLCBzb3VyY2UsIGlzUmV0cnlhYmxlID0gdHJ1ZSkge1xuICAgICAgICBzdXBlcihtZXNzYWdlLCBgREFUQV9TT1VSQ0VfJHtzb3VyY2UudG9VcHBlckNhc2UoKX1gLCBpc1JldHJ5YWJsZSk7XG4gICAgICAgIHRoaXMuc291cmNlID0gc291cmNlO1xuICAgIH1cbn1cbmV4cG9ydCBjbGFzcyBOZXR3b3JrRXJyb3IgZXh0ZW5kcyBEaXZ2eUVycm9yIHtcbiAgICBzdGF0dXNDb2RlO1xuICAgIGNvbnN0cnVjdG9yKG1lc3NhZ2UsIHN0YXR1c0NvZGUpIHtcbiAgICAgICAgc3VwZXIobWVzc2FnZSwgJ05FVFdPUktfRVJST1InLCB0cnVlKTtcbiAgICAgICAgdGhpcy5zdGF0dXNDb2RlID0gc3RhdHVzQ29kZTtcbiAgICB9XG59XG5leHBvcnQgY2xhc3MgRGF0YVF1YWxpdHlFcnJvciBleHRlbmRzIERpdnZ5RXJyb3Ige1xuICAgIGRhdGFUeXBlO1xuICAgIGNvbnN0cnVjdG9yKG1lc3NhZ2UsIGRhdGFUeXBlKSB7XG4gICAgICAgIHN1cGVyKG1lc3NhZ2UsIGBEQVRBX1FVQUxJVFlfJHtkYXRhVHlwZS50b1VwcGVyQ2FzZSgpfWAsIGZhbHNlKTtcbiAgICAgICAgdGhpcy5kYXRhVHlwZSA9IGRhdGFUeXBlO1xuICAgIH1cbn1cbmV4cG9ydCBjbGFzcyBDb25maWd1cmF0aW9uRXJyb3IgZXh0ZW5kcyBEaXZ2eUVycm9yIHtcbiAgICBjb25zdHJ1Y3RvcihtZXNzYWdlKSB7XG4gICAgICAgIHN1cGVyKG1lc3NhZ2UsICdDT05GSUdVUkFUSU9OX0VSUk9SJywgZmFsc2UpO1xuICAgIH1cbn1cbmV4cG9ydCBjbGFzcyBUaWNrZXJOb3RGb3VuZEVycm9yIGV4dGVuZHMgRGl2dnlFcnJvciB7XG4gICAgdGlja2VyO1xuICAgIGNvbnN0cnVjdG9yKHRpY2tlcikge1xuICAgICAgICBzdXBlcihgVGlja2VyIHN5bWJvbCAnJHt0aWNrZXJ9JyBub3QgZm91bmQgb3IgaW52YWxpZGAsICdUSUNLRVJfTk9UX0ZPVU5EJywgZmFsc2UpO1xuICAgICAgICB0aGlzLnRpY2tlciA9IHRpY2tlcjtcbiAgICB9XG59XG5leHBvcnQgY2xhc3MgSW5zdWZmaWNpZW50RGF0YUVycm9yIGV4dGVuZHMgRGl2dnlFcnJvciB7XG4gICAgbWlzc2luZ0RhdGE7XG4gICAgY29uc3RydWN0b3IobWlzc2luZ0RhdGEpIHtcbiAgICAgICAgY29uc3QgZGF0YUxpc3QgPSBtaXNzaW5nRGF0YS5qb2luKCcsICcpO1xuICAgICAgICBzdXBlcihgSW5zdWZmaWNpZW50IGRhdGEgZm9yIGFuYWx5c2lzLiBNaXNzaW5nOiAke2RhdGFMaXN0fWAsICdJTlNVRkZJQ0lFTlRfREFUQScsIGZhbHNlKTtcbiAgICAgICAgdGhpcy5taXNzaW5nRGF0YSA9IG1pc3NpbmdEYXRhO1xuICAgIH1cbn1cbmV4cG9ydCBjbGFzcyBSYXRlTGltaXRFcnJvciBleHRlbmRzIERpdnZ5RXJyb3Ige1xuICAgIHJldHJ5QWZ0ZXI7XG4gICAgY29uc3RydWN0b3IobWVzc2FnZSwgcmV0cnlBZnRlcikge1xuICAgICAgICBzdXBlcihtZXNzYWdlLCAnUkFURV9MSU1JVCcsIHRydWUpO1xuICAgICAgICB0aGlzLnJldHJ5QWZ0ZXIgPSByZXRyeUFmdGVyO1xuICAgIH1cbn1cbiJdLCJuYW1lcyI6WyJEaXZ2eUVycm9yIiwiRXJyb3IiLCJtZXNzYWdlIiwiY29kZSIsImlzUmV0cnlhYmxlIiwibmFtZSIsImNhcHR1cmVTdGFja1RyYWNlIiwiVmFsaWRhdGlvbkVycm9yIiwiZmllbGQiLCJ0b1VwcGVyQ2FzZSIsIkRhdGFTb3VyY2VFcnJvciIsInNvdXJjZSIsIk5ldHdvcmtFcnJvciIsInN0YXR1c0NvZGUiLCJEYXRhUXVhbGl0eUVycm9yIiwiZGF0YVR5cGUiLCJDb25maWd1cmF0aW9uRXJyb3IiLCJUaWNrZXJOb3RGb3VuZEVycm9yIiwidGlja2VyIiwiSW5zdWZmaWNpZW50RGF0YUVycm9yIiwibWlzc2luZ0RhdGEiLCJkYXRhTGlzdCIsImpvaW4iLCJSYXRlTGltaXRFcnJvciIsInJldHJ5QWZ0ZXIiXSwiaWdub3JlTGlzdCI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/../../packages/core/dist/errors/DivvyErrors.js\n");

/***/ }),

/***/ "(rsc)/../../packages/core/dist/formatters/ErrorFormatter.js":
/*!*************************************************************!*\
  !*** ../../packages/core/dist/formatters/ErrorFormatter.js ***!
  \*************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ErrorFormatter: () => (/* binding */ ErrorFormatter)\n/* harmony export */ });\n/* harmony import */ var _errors_DivvyErrors_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../errors/DivvyErrors.js */ \"(rsc)/../../packages/core/dist/errors/DivvyErrors.js\");\n\nclass ErrorFormatter {\n    static formatError(error) {\n        if (error instanceof _errors_DivvyErrors_js__WEBPACK_IMPORTED_MODULE_0__.TickerNotFoundError) {\n            return this.formatTickerNotFoundError(error);\n        }\n        if (error instanceof _errors_DivvyErrors_js__WEBPACK_IMPORTED_MODULE_0__.ValidationError) {\n            return this.formatValidationError(error);\n        }\n        if (error instanceof _errors_DivvyErrors_js__WEBPACK_IMPORTED_MODULE_0__.InsufficientDataError) {\n            return this.formatInsufficientDataError(error);\n        }\n        if (error instanceof _errors_DivvyErrors_js__WEBPACK_IMPORTED_MODULE_0__.NetworkError) {\n            return this.formatNetworkError(error);\n        }\n        if (error instanceof _errors_DivvyErrors_js__WEBPACK_IMPORTED_MODULE_0__.RateLimitError) {\n            return this.formatRateLimitError(error);\n        }\n        if (error instanceof _errors_DivvyErrors_js__WEBPACK_IMPORTED_MODULE_0__.DataSourceError) {\n            return this.formatDataSourceError(error);\n        }\n        if (error instanceof _errors_DivvyErrors_js__WEBPACK_IMPORTED_MODULE_0__.DivvyError) {\n            return this.formatGenericDivvyError(error);\n        }\n        return this.formatGenericError(error);\n    }\n    static formatTickerNotFoundError(error) {\n        return [\n            `❌ Ticker Symbol Not Found: '${error.ticker}'`,\n            '',\n            '💡 Suggestions:',\n            '   • Check the spelling of the ticker symbol',\n            '   • Verify the ticker is listed on a major exchange',\n            '   • Try using the full company name to search for the correct ticker',\n            '   • Some international stocks may require exchange suffixes (e.g., \"BMW.DE\")',\n            '',\n            '📝 Example: divvy AAPL'\n        ].join('\\n');\n    }\n    static formatValidationError(error) {\n        return [\n            `❌ Invalid Input: ${error.message}`,\n            '',\n            '💡 Tips:',\n            '   • Ticker symbols should be 1-10 characters',\n            '   • Use only letters, numbers, dots, and hyphens',\n            '   • Years should be between 1-50',\n            '   • Required return should be between 0.1%-100%',\n            '',\n            '📝 Example: divvy MSFT --years 10 --r 0.08'\n        ].join('\\n');\n    }\n    static formatInsufficientDataError(error) {\n        return [\n            '❌ Insufficient Data for Analysis',\n            '',\n            `Missing data: ${error.missingData.join(', ')}`,\n            '',\n            '💡 This could happen because:',\n            '   • The company is too new or recently went public',\n            '   • The stock has limited trading history',\n            '   • The company doesn\\'t pay dividends',\n            '   • Data provider temporarily unavailable',\n            '',\n            '🔄 Try again later or check if the ticker symbol is correct.'\n        ].join('\\n');\n    }\n    static formatNetworkError(error) {\n        const parts = [\n            '❌ Network Connection Issue',\n            '',\n            `Details: ${error.message}`\n        ];\n        if (error.statusCode) {\n            parts.push(`Status Code: ${error.statusCode}`);\n        }\n        parts.push('', '💡 Troubleshooting:', '   • Check your internet connection', '   • Try again in a few moments', '   • Verify you can access other websites', '   • Check if you\\'re behind a corporate firewall', '');\n        if (error.isRetryable) {\n            parts.push('🔄 This error is usually temporary. The request will be retried automatically.');\n        }\n        return parts.join('\\n');\n    }\n    static formatRateLimitError(error) {\n        const parts = [\n            '❌ Rate Limit Exceeded',\n            '',\n            'You\\'ve made too many requests in a short time period.',\n            ''\n        ];\n        if (error.retryAfter) {\n            const minutes = Math.ceil(error.retryAfter / 60000);\n            parts.push(`⏳ Please wait ${minutes} minute(s) before trying again.`);\n        } else {\n            parts.push('⏳ Please wait a few minutes before trying again.');\n        }\n        parts.push('', '💡 To avoid rate limits:', '   • Reduce the frequency of requests', '   • Avoid running multiple divvy commands simultaneously', '   • Consider using fewer years of historical data (--years 5)');\n        return parts.join('\\n');\n    }\n    static formatDataSourceError(error) {\n        return [\n            `❌ Data Source Error (${error.source})`,\n            '',\n            `Details: ${error.message}`,\n            '',\n            '💡 This could be due to:',\n            '   • Temporary service outage',\n            '   • Changes in the data provider\\'s API',\n            '   • Invalid or delisted ticker symbol',\n            '',\n            error.isRetryable ? '🔄 This error is usually temporary. Please try again later.' : '⚠️  This appears to be a permanent issue. Please verify the ticker symbol.'\n        ].join('\\n');\n    }\n    static formatGenericDivvyError(error) {\n        return [\n            `❌ Error (${error.code})`,\n            '',\n            error.message,\n            '',\n            error.isRetryable ? '🔄 You can try this request again.' : '⚠️  Please check your input and try again.'\n        ].join('\\n');\n    }\n    static formatGenericError(error) {\n        return [\n            '❌ Unexpected Error',\n            '',\n            error.message,\n            '',\n            '💡 If this error persists:',\n            '   • Try a different ticker symbol',\n            '   • Reduce the years of historical data requested',\n            '   • Check for any special characters in your command',\n            '   • Report this issue if the problem continues',\n            '',\n            '🐛 Error Details:',\n            `   Name: ${error.name}`,\n            `   Stack: ${error.stack?.split('\\n')[1]?.trim() || 'Not available'}`\n        ].join('\\n');\n    }\n    static formatWarnings(warnings) {\n        if (warnings.length === 0) return '';\n        const parts = [\n            '⚠️  Data Quality Warnings:',\n            ''\n        ];\n        warnings.forEach((warning)=>{\n            parts.push(`   • ${warning}`);\n        });\n        parts.push('', '💡 These warnings indicate potential data quality issues.', '   The analysis will continue with estimates where possible.', '');\n        return parts.join('\\n');\n    }\n    static formatDataQualityReport(score, level, recommendations) {\n        const emoji = this.getQualityEmoji(level);\n        const parts = [\n            `${emoji} Data Quality: ${level.toUpperCase()} (${score}/100)`,\n            ''\n        ];\n        if (recommendations.length > 0) {\n            parts.push('📋 Recommendations:');\n            recommendations.forEach((rec)=>{\n                parts.push(`   • ${rec}`);\n            });\n            parts.push('');\n        }\n        return parts.join('\\n');\n    }\n    static getQualityEmoji(level) {\n        switch(level.toLowerCase()){\n            case 'excellent':\n                return '🟢';\n            case 'good':\n                return '🟡';\n            case 'fair':\n                return '🟠';\n            case 'poor':\n                return '🔴';\n            default:\n                return '⚪';\n        }\n    }\n    static formatRetryInfo(attempts, totalDelayMs) {\n        if (attempts <= 1) return '';\n        const seconds = (totalDelayMs / 1000).toFixed(1);\n        return `🔄 Request completed after ${attempts} attempts (${seconds}s delay)`;\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/../../packages/core/dist/formatters/ErrorFormatter.js\n");

/***/ }),

/***/ "(rsc)/../../packages/core/dist/formatters/OutputFormatter.js":
/*!**************************************************************!*\
  !*** ../../packages/core/dist/formatters/OutputFormatter.js ***!
  \**************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   OutputFormatter: () => (/* binding */ OutputFormatter)\n/* harmony export */ });\n/* harmony import */ var _data_DividendAristocrats_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../data/DividendAristocrats.js */ \"(rsc)/../../packages/core/dist/data/DividendAristocrats.js\");\n/* harmony import */ var _calculators_TechnicalIndicatorCalculator_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../calculators/TechnicalIndicatorCalculator.js */ \"(rsc)/../../packages/core/dist/calculators/TechnicalIndicatorCalculator.js\");\n\n\nclass OutputFormatter {\n    static formatPercentage(value) {\n        return value != null && isFinite(value) ? (value * 100).toFixed(2) + \"%\" : \"—\";\n    }\n    static formatNumber(value, digits = 2) {\n        return value == null || !isFinite(value) ? \"—\" : value.toFixed(digits);\n    }\n    static formatDividendAnalysis(analysis, _requiredReturn) {\n        const { ticker, quote, ttmDividends, ttmYield, cagr3, cagr5, streak, fundamentals, safeGrowth, forwardDividend, forwardYield, scores, totalScore } = analysis;\n        console.log(`\\n${quote.name} (${ticker}) — currency: ${quote.currency}`);\n        console.log(\"──────────────────────────────────────────────────────────\");\n        console.log(`Price:                 ${this.formatNumber(quote.price)} ${quote.currency}`);\n        console.log(`TTM Dividends:         ${this.formatNumber(ttmDividends)} (${this.formatPercentage(ttmYield)})`);\n        console.log(`3y/5y Dividend CAGR:   ${cagr3 == null ? \"—\" : this.formatPercentage(cagr3)} / ${cagr5 == null ? \"—\" : this.formatPercentage(cagr5)}`);\n        // Enhanced dividend streak display with elite status\n        const eliteStock = _data_DividendAristocrats_js__WEBPACK_IMPORTED_MODULE_0__.DividendEliteDetector.isKnownElite(ticker);\n        let streakDisplay = `${streak} year(s)`;\n        if (eliteStock) {\n            const badge = eliteStock.category === 'king' ? '👑 King' : '🏆 Aristocrat';\n            streakDisplay = `${streak} year(s) ${badge}`;\n        }\n        console.log(`Dividend streak:       ${streakDisplay}`);\n        console.log(`EPS payout ratio:      ${!isFinite(fundamentals.epsPayoutRatio) ? \"—\" : this.formatPercentage(fundamentals.epsPayoutRatio)}`);\n        console.log(`FCF payout ratio:      ${!isFinite(fundamentals.fcfPayoutRatio) ? \"—\" : this.formatPercentage(fundamentals.fcfPayoutRatio)}`);\n        console.log(`FCF coverage:          ${!isFinite(fundamentals.fcfCoverage) ? \"—\" : this.formatNumber(fundamentals.fcfCoverage, 2)}x`);\n        console.log(`Safe growth used:      ${this.formatPercentage(safeGrowth)}`);\n        console.log(`Expected fwd yield:    ${this.formatPercentage(forwardYield)}  (from D1=${this.formatNumber(forwardDividend)})`);\n        // Add technical indicators if available\n        const hasEMA = analysis.ema && (analysis.ema.ema20 || analysis.ema.ema50 || analysis.ema.ema200);\n        const hasMACD = analysis.macd && (analysis.macd.macdLine !== null || analysis.macd.signalLine !== null);\n        const hasRSI = analysis.rsi && analysis.rsi.rsi !== null;\n        if (hasEMA || hasMACD || hasRSI) {\n            console.log(`\\nTechnical Indicators:`);\n            // EMA indicators\n            if (hasEMA) {\n                if (analysis.ema.ema200) {\n                    const ema200Status = quote.price > analysis.ema.ema200 ? 'ABOVE' : 'BELOW';\n                    console.log(`• EMA200: ${this.formatNumber(analysis.ema.ema200)} (${ema200Status})`);\n                }\n                if (analysis.ema.ema50) {\n                    const ema50Status = quote.price > analysis.ema.ema50 ? 'ABOVE' : 'BELOW';\n                    console.log(`• EMA50:  ${this.formatNumber(analysis.ema.ema50)} (${ema50Status})`);\n                }\n                if (analysis.ema.ema20) {\n                    const ema20Status = quote.price > analysis.ema.ema20 ? 'ABOVE' : 'BELOW';\n                    console.log(`• EMA20:  ${this.formatNumber(analysis.ema.ema20)} (${ema20Status})`);\n                }\n            }\n            // MACD indicators\n            if (hasMACD) {\n                const macdAnalysis = _calculators_TechnicalIndicatorCalculator_js__WEBPACK_IMPORTED_MODULE_1__.TechnicalIndicatorCalculator.analyzeMACD(analysis.macd);\n                const signalIcon = macdAnalysis.signal === 'bullish' ? '📈' : macdAnalysis.signal === 'bearish' ? '📉' : '➡️';\n                console.log(`• MACD:   ${signalIcon} ${macdAnalysis.signal.toUpperCase()} (${macdAnalysis.strength})`);\n                if (analysis.macd.macdLine !== null && analysis.macd.signalLine !== null) {\n                    console.log(`  - MACD Line: ${this.formatNumber(analysis.macd.macdLine, 4)}`);\n                    console.log(`  - Signal:    ${this.formatNumber(analysis.macd.signalLine, 4)}`);\n                }\n                if (analysis.macd.histogram !== null) {\n                    const histogramIcon = analysis.macd.histogram > 0 ? '⬆️' : analysis.macd.histogram < 0 ? '⬇️' : '➡️';\n                    console.log(`  - Histogram: ${this.formatNumber(analysis.macd.histogram, 4)} ${histogramIcon}`);\n                }\n                if (macdAnalysis.crossover !== 'none') {\n                    const crossIcon = macdAnalysis.crossover === 'bullish_crossover' ? '🚀' : '⚠️';\n                    console.log(`  - ${crossIcon} ${macdAnalysis.crossover.replace('_', ' ').toUpperCase()}`);\n                }\n            }\n            // RSI indicators\n            if (hasRSI) {\n                const rsiAnalysis = _calculators_TechnicalIndicatorCalculator_js__WEBPACK_IMPORTED_MODULE_1__.TechnicalIndicatorCalculator.analyzeRSI(analysis.rsi);\n                const signalIcon = rsiAnalysis.signal === 'overbought' ? '📈🔴' : rsiAnalysis.signal === 'oversold' ? '📉🟢' : '📊';\n                const conditionText = rsiAnalysis.condition === 'extreme_overbought' ? 'EXTREME OVERBOUGHT' : rsiAnalysis.condition === 'extreme_oversold' ? 'EXTREME OVERSOLD' : rsiAnalysis.signal.toUpperCase();\n                console.log(`• RSI(${analysis.rsi.period}): ${signalIcon} ${this.formatNumber(analysis.rsi.rsi, 1)} (${conditionText})`);\n                if (rsiAnalysis.strength !== 'weak') {\n                    console.log(`  - Strength: ${rsiAnalysis.strength.toUpperCase()}`);\n                }\n                if (rsiAnalysis.trend !== 'stable') {\n                    const trendIcon = rsiAnalysis.trend === 'rising' ? '⬆️' : '⬇️';\n                    console.log(`  - Trend: ${trendIcon} ${rsiAnalysis.trend.toUpperCase()}`);\n                }\n            }\n        }\n        console.log(`\\nDividend Potential Score: ${totalScore}/100`);\n        console.log(`• Drivers → payout:${this.formatNumber(scores.payout, 0)} fcf:${this.formatNumber(scores.fcf, 0)} streak:${this.formatNumber(scores.streak, 0)} growth:${this.formatNumber(scores.growth, 0)} trend:${this.formatNumber(scores.trend, 0)} macd:${this.formatNumber(scores.macd, 0)} rsi:${this.formatNumber(scores.rsi, 0)}`);\n    }\n    static formatGordonGrowthModel(ddmPrice, currentPrice, requiredReturn, safeGrowth) {\n        if (ddmPrice) {\n            const ddmUpside = (ddmPrice - currentPrice) / currentPrice;\n            console.log(`\\n[DDM] r=${(requiredReturn * 100).toFixed(1)}% g=${this.formatPercentage(safeGrowth)}  ->  price*= ${this.formatNumber(ddmPrice)}  (${this.formatPercentage(ddmUpside)} vs current)`);\n        }\n    }\n    static formatFooter() {\n        console.log(\"\\nNotes: This is an educational heuristic, not investment advice.\");\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/../../packages/core/dist/formatters/OutputFormatter.js\n");

/***/ }),

/***/ "(rsc)/../../packages/core/dist/lib.js":
/*!***************************************!*\
  !*** ../../packages/core/dist/lib.js ***!
  \***************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AlphaVantageService: () => (/* reexport safe */ _services_AlphaVantageService_js__WEBPACK_IMPORTED_MODULE_2__.AlphaVantageService),\n/* harmony export */   DatabaseService: () => (/* reexport safe */ _services_DatabaseService_js__WEBPACK_IMPORTED_MODULE_3__.DatabaseService),\n/* harmony export */   DividendAnalysis: () => (/* reexport safe */ _models_DividendAnalysis_js__WEBPACK_IMPORTED_MODULE_8__.DividendAnalysis),\n/* harmony export */   DividendAnalysisService: () => (/* reexport safe */ _services_DividendAnalysisService_js__WEBPACK_IMPORTED_MODULE_0__.DividendAnalysisService),\n/* harmony export */   DividendCalculator: () => (/* reexport safe */ _calculators_DividendCalculator_js__WEBPACK_IMPORTED_MODULE_5__.DividendCalculator),\n/* harmony export */   DividendEvent: () => (/* reexport safe */ _models_StockData_js__WEBPACK_IMPORTED_MODULE_9__.DividendEvent),\n/* harmony export */   DividendScores: () => (/* reexport safe */ _models_DividendAnalysis_js__WEBPACK_IMPORTED_MODULE_8__.DividendScores),\n/* harmony export */   DivvyCliApp: () => (/* reexport safe */ _cli_DivvyCliApp_js__WEBPACK_IMPORTED_MODULE_13__.DivvyCliApp),\n/* harmony export */   FallbackDataProvider: () => (/* reexport safe */ _services_FallbackDataProvider_js__WEBPACK_IMPORTED_MODULE_4__.FallbackDataProvider),\n/* harmony export */   Fundamentals: () => (/* reexport safe */ _models_StockData_js__WEBPACK_IMPORTED_MODULE_9__.Fundamentals),\n/* harmony export */   InputValidator: () => (/* reexport safe */ _validation_InputValidator_js__WEBPACK_IMPORTED_MODULE_11__.InputValidator),\n/* harmony export */   OutputFormatter: () => (/* reexport safe */ _formatters_OutputFormatter_js__WEBPACK_IMPORTED_MODULE_12__.OutputFormatter),\n/* harmony export */   Quote: () => (/* reexport safe */ _models_StockData_js__WEBPACK_IMPORTED_MODULE_9__.Quote),\n/* harmony export */   ScoreCalculator: () => (/* reexport safe */ _calculators_ScoreCalculator_js__WEBPACK_IMPORTED_MODULE_6__.ScoreCalculator),\n/* harmony export */   TechnicalIndicatorCalculator: () => (/* reexport safe */ _calculators_TechnicalIndicatorCalculator_js__WEBPACK_IMPORTED_MODULE_7__.TechnicalIndicatorCalculator),\n/* harmony export */   YahooFinanceService: () => (/* reexport safe */ _services_YahooFinanceService_js__WEBPACK_IMPORTED_MODULE_1__.YahooFinanceService),\n/* harmony export */   calculateCAGR: () => (/* reexport safe */ _utils_MathUtils_js__WEBPACK_IMPORTED_MODULE_10__.calculateCAGR),\n/* harmony export */   clamp: () => (/* reexport safe */ _utils_MathUtils_js__WEBPACK_IMPORTED_MODULE_10__.clamp),\n/* harmony export */   isValidNumber: () => (/* reexport safe */ _utils_MathUtils_js__WEBPACK_IMPORTED_MODULE_10__.isValidNumber),\n/* harmony export */   sum: () => (/* reexport safe */ _utils_MathUtils_js__WEBPACK_IMPORTED_MODULE_10__.sum)\n/* harmony export */ });\n/* harmony import */ var _services_DividendAnalysisService_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./services/DividendAnalysisService.js */ \"(rsc)/../../packages/core/dist/services/DividendAnalysisService.js\");\n/* harmony import */ var _services_YahooFinanceService_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./services/YahooFinanceService.js */ \"(rsc)/../../packages/core/dist/services/YahooFinanceService.js\");\n/* harmony import */ var _services_AlphaVantageService_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./services/AlphaVantageService.js */ \"(rsc)/../../packages/core/dist/services/AlphaVantageService.js\");\n/* harmony import */ var _services_DatabaseService_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./services/DatabaseService.js */ \"(rsc)/../../packages/core/dist/services/DatabaseService.js\");\n/* harmony import */ var _services_FallbackDataProvider_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./services/FallbackDataProvider.js */ \"(rsc)/../../packages/core/dist/services/FallbackDataProvider.js\");\n/* harmony import */ var _calculators_DividendCalculator_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./calculators/DividendCalculator.js */ \"(rsc)/../../packages/core/dist/calculators/DividendCalculator.js\");\n/* harmony import */ var _calculators_ScoreCalculator_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./calculators/ScoreCalculator.js */ \"(rsc)/../../packages/core/dist/calculators/ScoreCalculator.js\");\n/* harmony import */ var _calculators_TechnicalIndicatorCalculator_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./calculators/TechnicalIndicatorCalculator.js */ \"(rsc)/../../packages/core/dist/calculators/TechnicalIndicatorCalculator.js\");\n/* harmony import */ var _models_DividendAnalysis_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./models/DividendAnalysis.js */ \"(rsc)/../../packages/core/dist/models/DividendAnalysis.js\");\n/* harmony import */ var _models_StockData_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./models/StockData.js */ \"(rsc)/../../packages/core/dist/models/StockData.js\");\n/* harmony import */ var _utils_MathUtils_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./utils/MathUtils.js */ \"(rsc)/../../packages/core/dist/utils/MathUtils.js\");\n/* harmony import */ var _validation_InputValidator_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./validation/InputValidator.js */ \"(rsc)/../../packages/core/dist/validation/InputValidator.js\");\n/* harmony import */ var _formatters_OutputFormatter_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./formatters/OutputFormatter.js */ \"(rsc)/../../packages/core/dist/formatters/OutputFormatter.js\");\n/* harmony import */ var _cli_DivvyCliApp_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./cli/DivvyCliApp.js */ \"(rsc)/../../packages/core/dist/cli/DivvyCliApp.js\");\n// Main services\n\n\n\n\n\n// Calculators\n\n\n\n// Models\n\n\n// Utilities\n\n\n\n// CLI\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vLi4vcGFja2FnZXMvY29yZS9kaXN0L2xpYi5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUEsZ0JBQWdCO0FBQ2dFO0FBQ1I7QUFDQTtBQUNSO0FBQ1U7QUFDMUUsY0FBYztBQUMyRDtBQUNOO0FBQzBCO0FBQzdGLFNBQVM7QUFDb0M7QUFDUDtBQUN0QyxZQUFZO0FBQ3lCO0FBQzJCO0FBQ0U7QUFDbEUsTUFBTTtBQUM2QyIsInNvdXJjZXMiOlsiL1VzZXJzL21hcnRpbnN0YXJvc3RhL0RldmVsb3BtZW50L3ZpYmVzL2Rpdnl5L3BhY2thZ2VzL2NvcmUvZGlzdC9saWIuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gTWFpbiBzZXJ2aWNlc1xuZXhwb3J0IHsgRGl2aWRlbmRBbmFseXNpc1NlcnZpY2UgfSBmcm9tICcuL3NlcnZpY2VzL0RpdmlkZW5kQW5hbHlzaXNTZXJ2aWNlLmpzJztcbmV4cG9ydCB7IFlhaG9vRmluYW5jZVNlcnZpY2UgfSBmcm9tICcuL3NlcnZpY2VzL1lhaG9vRmluYW5jZVNlcnZpY2UuanMnO1xuZXhwb3J0IHsgQWxwaGFWYW50YWdlU2VydmljZSB9IGZyb20gJy4vc2VydmljZXMvQWxwaGFWYW50YWdlU2VydmljZS5qcyc7XG5leHBvcnQgeyBEYXRhYmFzZVNlcnZpY2UgfSBmcm9tICcuL3NlcnZpY2VzL0RhdGFiYXNlU2VydmljZS5qcyc7XG5leHBvcnQgeyBGYWxsYmFja0RhdGFQcm92aWRlciB9IGZyb20gJy4vc2VydmljZXMvRmFsbGJhY2tEYXRhUHJvdmlkZXIuanMnO1xuLy8gQ2FsY3VsYXRvcnNcbmV4cG9ydCB7IERpdmlkZW5kQ2FsY3VsYXRvciB9IGZyb20gJy4vY2FsY3VsYXRvcnMvRGl2aWRlbmRDYWxjdWxhdG9yLmpzJztcbmV4cG9ydCB7IFNjb3JlQ2FsY3VsYXRvciB9IGZyb20gJy4vY2FsY3VsYXRvcnMvU2NvcmVDYWxjdWxhdG9yLmpzJztcbmV4cG9ydCB7IFRlY2huaWNhbEluZGljYXRvckNhbGN1bGF0b3IgfSBmcm9tICcuL2NhbGN1bGF0b3JzL1RlY2huaWNhbEluZGljYXRvckNhbGN1bGF0b3IuanMnO1xuLy8gTW9kZWxzXG5leHBvcnQgKiBmcm9tICcuL21vZGVscy9EaXZpZGVuZEFuYWx5c2lzLmpzJztcbmV4cG9ydCAqIGZyb20gJy4vbW9kZWxzL1N0b2NrRGF0YS5qcyc7XG4vLyBVdGlsaXRpZXNcbmV4cG9ydCAqIGZyb20gJy4vdXRpbHMvTWF0aFV0aWxzLmpzJztcbmV4cG9ydCB7IElucHV0VmFsaWRhdG9yIH0gZnJvbSAnLi92YWxpZGF0aW9uL0lucHV0VmFsaWRhdG9yLmpzJztcbmV4cG9ydCB7IE91dHB1dEZvcm1hdHRlciB9IGZyb20gJy4vZm9ybWF0dGVycy9PdXRwdXRGb3JtYXR0ZXIuanMnO1xuLy8gQ0xJXG5leHBvcnQgeyBEaXZ2eUNsaUFwcCB9IGZyb20gJy4vY2xpL0RpdnZ5Q2xpQXBwLmpzJztcbiJdLCJuYW1lcyI6WyJEaXZpZGVuZEFuYWx5c2lzU2VydmljZSIsIllhaG9vRmluYW5jZVNlcnZpY2UiLCJBbHBoYVZhbnRhZ2VTZXJ2aWNlIiwiRGF0YWJhc2VTZXJ2aWNlIiwiRmFsbGJhY2tEYXRhUHJvdmlkZXIiLCJEaXZpZGVuZENhbGN1bGF0b3IiLCJTY29yZUNhbGN1bGF0b3IiLCJUZWNobmljYWxJbmRpY2F0b3JDYWxjdWxhdG9yIiwiSW5wdXRWYWxpZGF0b3IiLCJPdXRwdXRGb3JtYXR0ZXIiLCJEaXZ2eUNsaUFwcCJdLCJpZ25vcmVMaXN0IjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/../../packages/core/dist/lib.js\n");

/***/ }),

/***/ "(rsc)/../../packages/core/dist/models/DividendAnalysis.js":
/*!***********************************************************!*\
  !*** ../../packages/core/dist/models/DividendAnalysis.js ***!
  \***********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DividendAnalysis: () => (/* binding */ DividendAnalysis),\n/* harmony export */   DividendScores: () => (/* binding */ DividendScores)\n/* harmony export */ });\nclass DividendAnalysis {\n    constructor({ ticker, quote, ttmDividends, ttmYield, annualDividends, cagr3, cagr5, streak, fundamentals, safeGrowth, forwardDividend, forwardYield, scores, totalScore, ema, macd, rsi }){\n        this.ticker = ticker;\n        this.quote = quote;\n        this.ttmDividends = ttmDividends;\n        this.ttmYield = ttmYield;\n        this.annualDividends = annualDividends;\n        this.cagr3 = cagr3;\n        this.cagr5 = cagr5;\n        this.streak = streak;\n        this.fundamentals = fundamentals;\n        this.safeGrowth = safeGrowth;\n        this.forwardDividend = forwardDividend;\n        this.forwardYield = forwardYield;\n        this.scores = scores;\n        this.totalScore = totalScore;\n        this.ema = ema;\n        this.macd = macd;\n        this.rsi = rsi;\n    }\n}\nclass DividendScores {\n    constructor({ payout, fcf, streak, growth, trend, macd, rsi }){\n        this.payout = payout;\n        this.fcf = fcf;\n        this.streak = streak;\n        this.growth = growth;\n        this.trend = trend;\n        this.macd = macd;\n        this.rsi = rsi;\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vLi4vcGFja2FnZXMvY29yZS9kaXN0L21vZGVscy9EaXZpZGVuZEFuYWx5c2lzLmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQU8sTUFBTUE7SUFrQlQsWUFBWSxFQUFFQyxNQUFNLEVBQUVDLEtBQUssRUFBRUMsWUFBWSxFQUFFQyxRQUFRLEVBQUVDLGVBQWUsRUFBRUMsS0FBSyxFQUFFQyxLQUFLLEVBQUVDLE1BQU0sRUFBRUMsWUFBWSxFQUFFQyxVQUFVLEVBQUVDLGVBQWUsRUFBRUMsWUFBWSxFQUFFQyxNQUFNLEVBQUVDLFVBQVUsRUFBRUMsR0FBRyxFQUFFQyxJQUFJLEVBQUVDLEdBQUcsRUFBRSxDQUFFO1FBQ3ZMLElBQUksQ0FBQ2hCLE1BQU0sR0FBR0E7UUFDZCxJQUFJLENBQUNDLEtBQUssR0FBR0E7UUFDYixJQUFJLENBQUNDLFlBQVksR0FBR0E7UUFDcEIsSUFBSSxDQUFDQyxRQUFRLEdBQUdBO1FBQ2hCLElBQUksQ0FBQ0MsZUFBZSxHQUFHQTtRQUN2QixJQUFJLENBQUNDLEtBQUssR0FBR0E7UUFDYixJQUFJLENBQUNDLEtBQUssR0FBR0E7UUFDYixJQUFJLENBQUNDLE1BQU0sR0FBR0E7UUFDZCxJQUFJLENBQUNDLFlBQVksR0FBR0E7UUFDcEIsSUFBSSxDQUFDQyxVQUFVLEdBQUdBO1FBQ2xCLElBQUksQ0FBQ0MsZUFBZSxHQUFHQTtRQUN2QixJQUFJLENBQUNDLFlBQVksR0FBR0E7UUFDcEIsSUFBSSxDQUFDQyxNQUFNLEdBQUdBO1FBQ2QsSUFBSSxDQUFDQyxVQUFVLEdBQUdBO1FBQ2xCLElBQUksQ0FBQ0MsR0FBRyxHQUFHQTtRQUNYLElBQUksQ0FBQ0MsSUFBSSxHQUFHQTtRQUNaLElBQUksQ0FBQ0MsR0FBRyxHQUFHQTtJQUNmO0FBQ0o7QUFDTyxNQUFNQztJQVFULFlBQVksRUFBRUMsTUFBTSxFQUFFQyxHQUFHLEVBQUVaLE1BQU0sRUFBRWEsTUFBTSxFQUFFQyxLQUFLLEVBQUVOLElBQUksRUFBRUMsR0FBRyxFQUFFLENBQUU7UUFDM0QsSUFBSSxDQUFDRSxNQUFNLEdBQUdBO1FBQ2QsSUFBSSxDQUFDQyxHQUFHLEdBQUdBO1FBQ1gsSUFBSSxDQUFDWixNQUFNLEdBQUdBO1FBQ2QsSUFBSSxDQUFDYSxNQUFNLEdBQUdBO1FBQ2QsSUFBSSxDQUFDQyxLQUFLLEdBQUdBO1FBQ2IsSUFBSSxDQUFDTixJQUFJLEdBQUdBO1FBQ1osSUFBSSxDQUFDQyxHQUFHLEdBQUdBO0lBQ2Y7QUFDSiIsInNvdXJjZXMiOlsiL1VzZXJzL21hcnRpbnN0YXJvc3RhL0RldmVsb3BtZW50L3ZpYmVzL2Rpdnl5L3BhY2thZ2VzL2NvcmUvZGlzdC9tb2RlbHMvRGl2aWRlbmRBbmFseXNpcy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgY2xhc3MgRGl2aWRlbmRBbmFseXNpcyB7XG4gICAgdGlja2VyO1xuICAgIHF1b3RlO1xuICAgIHR0bURpdmlkZW5kcztcbiAgICB0dG1ZaWVsZDtcbiAgICBhbm51YWxEaXZpZGVuZHM7XG4gICAgY2FncjM7XG4gICAgY2FncjU7XG4gICAgc3RyZWFrO1xuICAgIGZ1bmRhbWVudGFscztcbiAgICBzYWZlR3Jvd3RoO1xuICAgIGZvcndhcmREaXZpZGVuZDtcbiAgICBmb3J3YXJkWWllbGQ7XG4gICAgc2NvcmVzO1xuICAgIHRvdGFsU2NvcmU7XG4gICAgZW1hO1xuICAgIG1hY2Q7XG4gICAgcnNpO1xuICAgIGNvbnN0cnVjdG9yKHsgdGlja2VyLCBxdW90ZSwgdHRtRGl2aWRlbmRzLCB0dG1ZaWVsZCwgYW5udWFsRGl2aWRlbmRzLCBjYWdyMywgY2FncjUsIHN0cmVhaywgZnVuZGFtZW50YWxzLCBzYWZlR3Jvd3RoLCBmb3J3YXJkRGl2aWRlbmQsIGZvcndhcmRZaWVsZCwgc2NvcmVzLCB0b3RhbFNjb3JlLCBlbWEsIG1hY2QsIHJzaSB9KSB7XG4gICAgICAgIHRoaXMudGlja2VyID0gdGlja2VyO1xuICAgICAgICB0aGlzLnF1b3RlID0gcXVvdGU7XG4gICAgICAgIHRoaXMudHRtRGl2aWRlbmRzID0gdHRtRGl2aWRlbmRzO1xuICAgICAgICB0aGlzLnR0bVlpZWxkID0gdHRtWWllbGQ7XG4gICAgICAgIHRoaXMuYW5udWFsRGl2aWRlbmRzID0gYW5udWFsRGl2aWRlbmRzO1xuICAgICAgICB0aGlzLmNhZ3IzID0gY2FncjM7XG4gICAgICAgIHRoaXMuY2FncjUgPSBjYWdyNTtcbiAgICAgICAgdGhpcy5zdHJlYWsgPSBzdHJlYWs7XG4gICAgICAgIHRoaXMuZnVuZGFtZW50YWxzID0gZnVuZGFtZW50YWxzO1xuICAgICAgICB0aGlzLnNhZmVHcm93dGggPSBzYWZlR3Jvd3RoO1xuICAgICAgICB0aGlzLmZvcndhcmREaXZpZGVuZCA9IGZvcndhcmREaXZpZGVuZDtcbiAgICAgICAgdGhpcy5mb3J3YXJkWWllbGQgPSBmb3J3YXJkWWllbGQ7XG4gICAgICAgIHRoaXMuc2NvcmVzID0gc2NvcmVzO1xuICAgICAgICB0aGlzLnRvdGFsU2NvcmUgPSB0b3RhbFNjb3JlO1xuICAgICAgICB0aGlzLmVtYSA9IGVtYTtcbiAgICAgICAgdGhpcy5tYWNkID0gbWFjZDtcbiAgICAgICAgdGhpcy5yc2kgPSByc2k7XG4gICAgfVxufVxuZXhwb3J0IGNsYXNzIERpdmlkZW5kU2NvcmVzIHtcbiAgICBwYXlvdXQ7XG4gICAgZmNmO1xuICAgIHN0cmVhaztcbiAgICBncm93dGg7XG4gICAgdHJlbmQ7XG4gICAgbWFjZDtcbiAgICByc2k7XG4gICAgY29uc3RydWN0b3IoeyBwYXlvdXQsIGZjZiwgc3RyZWFrLCBncm93dGgsIHRyZW5kLCBtYWNkLCByc2kgfSkge1xuICAgICAgICB0aGlzLnBheW91dCA9IHBheW91dDtcbiAgICAgICAgdGhpcy5mY2YgPSBmY2Y7XG4gICAgICAgIHRoaXMuc3RyZWFrID0gc3RyZWFrO1xuICAgICAgICB0aGlzLmdyb3d0aCA9IGdyb3d0aDtcbiAgICAgICAgdGhpcy50cmVuZCA9IHRyZW5kO1xuICAgICAgICB0aGlzLm1hY2QgPSBtYWNkO1xuICAgICAgICB0aGlzLnJzaSA9IHJzaTtcbiAgICB9XG59XG4iXSwibmFtZXMiOlsiRGl2aWRlbmRBbmFseXNpcyIsInRpY2tlciIsInF1b3RlIiwidHRtRGl2aWRlbmRzIiwidHRtWWllbGQiLCJhbm51YWxEaXZpZGVuZHMiLCJjYWdyMyIsImNhZ3I1Iiwic3RyZWFrIiwiZnVuZGFtZW50YWxzIiwic2FmZUdyb3d0aCIsImZvcndhcmREaXZpZGVuZCIsImZvcndhcmRZaWVsZCIsInNjb3JlcyIsInRvdGFsU2NvcmUiLCJlbWEiLCJtYWNkIiwicnNpIiwiRGl2aWRlbmRTY29yZXMiLCJwYXlvdXQiLCJmY2YiLCJncm93dGgiLCJ0cmVuZCJdLCJpZ25vcmVMaXN0IjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/../../packages/core/dist/models/DividendAnalysis.js\n");

/***/ }),

/***/ "(rsc)/../../packages/core/dist/models/StockData.js":
/*!****************************************************!*\
  !*** ../../packages/core/dist/models/StockData.js ***!
  \****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DividendEvent: () => (/* binding */ DividendEvent),\n/* harmony export */   Fundamentals: () => (/* binding */ Fundamentals),\n/* harmony export */   Quote: () => (/* binding */ Quote)\n/* harmony export */ });\nclass Quote {\n    constructor({ regularMarketPrice, postMarketPrice, preMarketPrice, currency, shortName, longName, sector, industry }){\n        this.price = regularMarketPrice || postMarketPrice || preMarketPrice || 0;\n        this.currency = currency || \"USD\";\n        this.name = shortName || longName || \"\";\n        this.sector = sector || null;\n        this.industry = industry || null;\n    }\n}\nclass DividendEvent {\n    constructor({ date, amount }){\n        this.date = new Date(typeof date === 'number' ? date * 1000 : date);\n        this.amount = Number(amount);\n    }\n    get year() {\n        return this.date.getUTCFullYear();\n    }\n    isValid() {\n        return this.amount > 0 && isFinite(this.amount) && this.year > 1990 && this.year < 2030;\n    }\n}\nclass Fundamentals {\n    constructor(data = {}){\n        this.operatingCashFlow = this.extractValue(data.OperatingCashFlow);\n        this.capitalExpenditure = Math.abs(this.extractValue(data.CapitalExpenditure));\n        this.cashDividendsPaid = Math.abs(this.extractValue(data.CashDividendsPaid));\n        this.netIncome = this.extractValue(data.NetIncome);\n        this.payoutRatio = this.extractValue(data.payoutRatio);\n    }\n    extractValue(field) {\n        if (!field) return NaN;\n        if (typeof field === 'number') return field;\n        return Number(field.raw ?? field);\n    }\n    get freeCashFlow() {\n        return isFinite(this.operatingCashFlow) && isFinite(this.capitalExpenditure) ? this.operatingCashFlow - this.capitalExpenditure : NaN;\n    }\n    get fcfPayoutRatio() {\n        const fcf = this.freeCashFlow;\n        return isFinite(this.cashDividendsPaid) && isFinite(fcf) && fcf !== 0 ? this.cashDividendsPaid / fcf : NaN;\n    }\n    get fcfCoverage() {\n        const fcf = this.freeCashFlow;\n        return isFinite(this.cashDividendsPaid) && isFinite(fcf) && this.cashDividendsPaid > 0 ? fcf / this.cashDividendsPaid : this.cashDividendsPaid === 0 ? Infinity : NaN;\n    }\n    get epsPayoutRatio() {\n        if (isFinite(this.payoutRatio)) return this.payoutRatio;\n        if (isFinite(this.cashDividendsPaid) && isFinite(this.netIncome) && this.netIncome !== 0) {\n            return this.cashDividendsPaid / Math.abs(this.netIncome);\n        }\n        return NaN;\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vLi4vcGFja2FnZXMvY29yZS9kaXN0L21vZGVscy9TdG9ja0RhdGEuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQU8sTUFBTUE7SUFNVCxZQUFZLEVBQUVDLGtCQUFrQixFQUFFQyxlQUFlLEVBQUVDLGNBQWMsRUFBRUMsUUFBUSxFQUFFQyxTQUFTLEVBQUVDLFFBQVEsRUFBRUMsTUFBTSxFQUFFQyxRQUFRLEVBQUUsQ0FBRTtRQUNsSCxJQUFJLENBQUNDLEtBQUssR0FBR1Isc0JBQXNCQyxtQkFBbUJDLGtCQUFrQjtRQUN4RSxJQUFJLENBQUNDLFFBQVEsR0FBR0EsWUFBWTtRQUM1QixJQUFJLENBQUNNLElBQUksR0FBR0wsYUFBYUMsWUFBWTtRQUNyQyxJQUFJLENBQUNDLE1BQU0sR0FBR0EsVUFBVTtRQUN4QixJQUFJLENBQUNDLFFBQVEsR0FBR0EsWUFBWTtJQUNoQztBQUNKO0FBQ08sTUFBTUc7SUFHVCxZQUFZLEVBQUVDLElBQUksRUFBRUMsTUFBTSxFQUFFLENBQUU7UUFDMUIsSUFBSSxDQUFDRCxJQUFJLEdBQUcsSUFBSUUsS0FBSyxPQUFPRixTQUFTLFdBQVdBLE9BQU8sT0FBT0E7UUFDOUQsSUFBSSxDQUFDQyxNQUFNLEdBQUdFLE9BQU9GO0lBQ3pCO0lBQ0EsSUFBSUcsT0FBTztRQUNQLE9BQU8sSUFBSSxDQUFDSixJQUFJLENBQUNLLGNBQWM7SUFDbkM7SUFDQUMsVUFBVTtRQUNOLE9BQVEsSUFBSSxDQUFDTCxNQUFNLEdBQUcsS0FDbEJNLFNBQVMsSUFBSSxDQUFDTixNQUFNLEtBQ3BCLElBQUksQ0FBQ0csSUFBSSxHQUFHLFFBQ1osSUFBSSxDQUFDQSxJQUFJLEdBQUc7SUFDcEI7QUFDSjtBQUNPLE1BQU1JO0lBTVQsWUFBWUMsT0FBTyxDQUFDLENBQUMsQ0FBRTtRQUNuQixJQUFJLENBQUNDLGlCQUFpQixHQUFHLElBQUksQ0FBQ0MsWUFBWSxDQUFDRixLQUFLRyxpQkFBaUI7UUFDakUsSUFBSSxDQUFDQyxrQkFBa0IsR0FBR0MsS0FBS0MsR0FBRyxDQUFDLElBQUksQ0FBQ0osWUFBWSxDQUFDRixLQUFLTyxrQkFBa0I7UUFDNUUsSUFBSSxDQUFDQyxpQkFBaUIsR0FBR0gsS0FBS0MsR0FBRyxDQUFDLElBQUksQ0FBQ0osWUFBWSxDQUFDRixLQUFLUyxpQkFBaUI7UUFDMUUsSUFBSSxDQUFDQyxTQUFTLEdBQUcsSUFBSSxDQUFDUixZQUFZLENBQUNGLEtBQUtXLFNBQVM7UUFDakQsSUFBSSxDQUFDQyxXQUFXLEdBQUcsSUFBSSxDQUFDVixZQUFZLENBQUNGLEtBQUtZLFdBQVc7SUFDekQ7SUFDQVYsYUFBYVcsS0FBSyxFQUFFO1FBQ2hCLElBQUksQ0FBQ0EsT0FDRCxPQUFPQztRQUNYLElBQUksT0FBT0QsVUFBVSxVQUNqQixPQUFPQTtRQUNYLE9BQU9uQixPQUFPbUIsTUFBTUUsR0FBRyxJQUFJRjtJQUMvQjtJQUNBLElBQUlHLGVBQWU7UUFDZixPQUFPbEIsU0FBUyxJQUFJLENBQUNHLGlCQUFpQixLQUFLSCxTQUFTLElBQUksQ0FBQ00sa0JBQWtCLElBQ3JFLElBQUksQ0FBQ0gsaUJBQWlCLEdBQUcsSUFBSSxDQUFDRyxrQkFBa0IsR0FDaERVO0lBQ1Y7SUFDQSxJQUFJRyxpQkFBaUI7UUFDakIsTUFBTUMsTUFBTSxJQUFJLENBQUNGLFlBQVk7UUFDN0IsT0FBT2xCLFNBQVMsSUFBSSxDQUFDVSxpQkFBaUIsS0FBS1YsU0FBU29CLFFBQVFBLFFBQVEsSUFDOUQsSUFBSSxDQUFDVixpQkFBaUIsR0FBR1UsTUFDekJKO0lBQ1Y7SUFDQSxJQUFJSyxjQUFjO1FBQ2QsTUFBTUQsTUFBTSxJQUFJLENBQUNGLFlBQVk7UUFDN0IsT0FBT2xCLFNBQVMsSUFBSSxDQUFDVSxpQkFBaUIsS0FBS1YsU0FBU29CLFFBQVEsSUFBSSxDQUFDVixpQkFBaUIsR0FBRyxJQUMvRVUsTUFBTSxJQUFJLENBQUNWLGlCQUFpQixHQUMzQixJQUFJLENBQUNBLGlCQUFpQixLQUFLLElBQUlZLFdBQVdOO0lBQ3JEO0lBQ0EsSUFBSU8saUJBQWlCO1FBQ2pCLElBQUl2QixTQUFTLElBQUksQ0FBQ2MsV0FBVyxHQUN6QixPQUFPLElBQUksQ0FBQ0EsV0FBVztRQUMzQixJQUFJZCxTQUFTLElBQUksQ0FBQ1UsaUJBQWlCLEtBQUtWLFNBQVMsSUFBSSxDQUFDWSxTQUFTLEtBQUssSUFBSSxDQUFDQSxTQUFTLEtBQUssR0FBRztZQUN0RixPQUFPLElBQUksQ0FBQ0YsaUJBQWlCLEdBQUdILEtBQUtDLEdBQUcsQ0FBQyxJQUFJLENBQUNJLFNBQVM7UUFDM0Q7UUFDQSxPQUFPSTtJQUNYO0FBQ0oiLCJzb3VyY2VzIjpbIi9Vc2Vycy9tYXJ0aW5zdGFyb3N0YS9EZXZlbG9wbWVudC92aWJlcy9kaXZ5eS9wYWNrYWdlcy9jb3JlL2Rpc3QvbW9kZWxzL1N0b2NrRGF0YS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgY2xhc3MgUXVvdGUge1xuICAgIHByaWNlO1xuICAgIGN1cnJlbmN5O1xuICAgIG5hbWU7XG4gICAgc2VjdG9yO1xuICAgIGluZHVzdHJ5O1xuICAgIGNvbnN0cnVjdG9yKHsgcmVndWxhck1hcmtldFByaWNlLCBwb3N0TWFya2V0UHJpY2UsIHByZU1hcmtldFByaWNlLCBjdXJyZW5jeSwgc2hvcnROYW1lLCBsb25nTmFtZSwgc2VjdG9yLCBpbmR1c3RyeSB9KSB7XG4gICAgICAgIHRoaXMucHJpY2UgPSByZWd1bGFyTWFya2V0UHJpY2UgfHwgcG9zdE1hcmtldFByaWNlIHx8IHByZU1hcmtldFByaWNlIHx8IDA7XG4gICAgICAgIHRoaXMuY3VycmVuY3kgPSBjdXJyZW5jeSB8fCBcIlVTRFwiO1xuICAgICAgICB0aGlzLm5hbWUgPSBzaG9ydE5hbWUgfHwgbG9uZ05hbWUgfHwgXCJcIjtcbiAgICAgICAgdGhpcy5zZWN0b3IgPSBzZWN0b3IgfHwgbnVsbDtcbiAgICAgICAgdGhpcy5pbmR1c3RyeSA9IGluZHVzdHJ5IHx8IG51bGw7XG4gICAgfVxufVxuZXhwb3J0IGNsYXNzIERpdmlkZW5kRXZlbnQge1xuICAgIGRhdGU7XG4gICAgYW1vdW50O1xuICAgIGNvbnN0cnVjdG9yKHsgZGF0ZSwgYW1vdW50IH0pIHtcbiAgICAgICAgdGhpcy5kYXRlID0gbmV3IERhdGUodHlwZW9mIGRhdGUgPT09ICdudW1iZXInID8gZGF0ZSAqIDEwMDAgOiBkYXRlKTtcbiAgICAgICAgdGhpcy5hbW91bnQgPSBOdW1iZXIoYW1vdW50KTtcbiAgICB9XG4gICAgZ2V0IHllYXIoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmRhdGUuZ2V0VVRDRnVsbFllYXIoKTtcbiAgICB9XG4gICAgaXNWYWxpZCgpIHtcbiAgICAgICAgcmV0dXJuICh0aGlzLmFtb3VudCA+IDAgJiZcbiAgICAgICAgICAgIGlzRmluaXRlKHRoaXMuYW1vdW50KSAmJlxuICAgICAgICAgICAgdGhpcy55ZWFyID4gMTk5MCAmJlxuICAgICAgICAgICAgdGhpcy55ZWFyIDwgMjAzMCk7XG4gICAgfVxufVxuZXhwb3J0IGNsYXNzIEZ1bmRhbWVudGFscyB7XG4gICAgb3BlcmF0aW5nQ2FzaEZsb3c7XG4gICAgY2FwaXRhbEV4cGVuZGl0dXJlO1xuICAgIGNhc2hEaXZpZGVuZHNQYWlkO1xuICAgIG5ldEluY29tZTtcbiAgICBwYXlvdXRSYXRpbztcbiAgICBjb25zdHJ1Y3RvcihkYXRhID0ge30pIHtcbiAgICAgICAgdGhpcy5vcGVyYXRpbmdDYXNoRmxvdyA9IHRoaXMuZXh0cmFjdFZhbHVlKGRhdGEuT3BlcmF0aW5nQ2FzaEZsb3cpO1xuICAgICAgICB0aGlzLmNhcGl0YWxFeHBlbmRpdHVyZSA9IE1hdGguYWJzKHRoaXMuZXh0cmFjdFZhbHVlKGRhdGEuQ2FwaXRhbEV4cGVuZGl0dXJlKSk7XG4gICAgICAgIHRoaXMuY2FzaERpdmlkZW5kc1BhaWQgPSBNYXRoLmFicyh0aGlzLmV4dHJhY3RWYWx1ZShkYXRhLkNhc2hEaXZpZGVuZHNQYWlkKSk7XG4gICAgICAgIHRoaXMubmV0SW5jb21lID0gdGhpcy5leHRyYWN0VmFsdWUoZGF0YS5OZXRJbmNvbWUpO1xuICAgICAgICB0aGlzLnBheW91dFJhdGlvID0gdGhpcy5leHRyYWN0VmFsdWUoZGF0YS5wYXlvdXRSYXRpbyk7XG4gICAgfVxuICAgIGV4dHJhY3RWYWx1ZShmaWVsZCkge1xuICAgICAgICBpZiAoIWZpZWxkKVxuICAgICAgICAgICAgcmV0dXJuIE5hTjtcbiAgICAgICAgaWYgKHR5cGVvZiBmaWVsZCA9PT0gJ251bWJlcicpXG4gICAgICAgICAgICByZXR1cm4gZmllbGQ7XG4gICAgICAgIHJldHVybiBOdW1iZXIoZmllbGQucmF3ID8/IGZpZWxkKTtcbiAgICB9XG4gICAgZ2V0IGZyZWVDYXNoRmxvdygpIHtcbiAgICAgICAgcmV0dXJuIGlzRmluaXRlKHRoaXMub3BlcmF0aW5nQ2FzaEZsb3cpICYmIGlzRmluaXRlKHRoaXMuY2FwaXRhbEV4cGVuZGl0dXJlKVxuICAgICAgICAgICAgPyB0aGlzLm9wZXJhdGluZ0Nhc2hGbG93IC0gdGhpcy5jYXBpdGFsRXhwZW5kaXR1cmVcbiAgICAgICAgICAgIDogTmFOO1xuICAgIH1cbiAgICBnZXQgZmNmUGF5b3V0UmF0aW8oKSB7XG4gICAgICAgIGNvbnN0IGZjZiA9IHRoaXMuZnJlZUNhc2hGbG93O1xuICAgICAgICByZXR1cm4gaXNGaW5pdGUodGhpcy5jYXNoRGl2aWRlbmRzUGFpZCkgJiYgaXNGaW5pdGUoZmNmKSAmJiBmY2YgIT09IDBcbiAgICAgICAgICAgID8gdGhpcy5jYXNoRGl2aWRlbmRzUGFpZCAvIGZjZlxuICAgICAgICAgICAgOiBOYU47XG4gICAgfVxuICAgIGdldCBmY2ZDb3ZlcmFnZSgpIHtcbiAgICAgICAgY29uc3QgZmNmID0gdGhpcy5mcmVlQ2FzaEZsb3c7XG4gICAgICAgIHJldHVybiBpc0Zpbml0ZSh0aGlzLmNhc2hEaXZpZGVuZHNQYWlkKSAmJiBpc0Zpbml0ZShmY2YpICYmIHRoaXMuY2FzaERpdmlkZW5kc1BhaWQgPiAwXG4gICAgICAgICAgICA/IGZjZiAvIHRoaXMuY2FzaERpdmlkZW5kc1BhaWRcbiAgICAgICAgICAgIDogKHRoaXMuY2FzaERpdmlkZW5kc1BhaWQgPT09IDAgPyBJbmZpbml0eSA6IE5hTik7XG4gICAgfVxuICAgIGdldCBlcHNQYXlvdXRSYXRpbygpIHtcbiAgICAgICAgaWYgKGlzRmluaXRlKHRoaXMucGF5b3V0UmF0aW8pKVxuICAgICAgICAgICAgcmV0dXJuIHRoaXMucGF5b3V0UmF0aW87XG4gICAgICAgIGlmIChpc0Zpbml0ZSh0aGlzLmNhc2hEaXZpZGVuZHNQYWlkKSAmJiBpc0Zpbml0ZSh0aGlzLm5ldEluY29tZSkgJiYgdGhpcy5uZXRJbmNvbWUgIT09IDApIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmNhc2hEaXZpZGVuZHNQYWlkIC8gTWF0aC5hYnModGhpcy5uZXRJbmNvbWUpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBOYU47XG4gICAgfVxufVxuIl0sIm5hbWVzIjpbIlF1b3RlIiwicmVndWxhck1hcmtldFByaWNlIiwicG9zdE1hcmtldFByaWNlIiwicHJlTWFya2V0UHJpY2UiLCJjdXJyZW5jeSIsInNob3J0TmFtZSIsImxvbmdOYW1lIiwic2VjdG9yIiwiaW5kdXN0cnkiLCJwcmljZSIsIm5hbWUiLCJEaXZpZGVuZEV2ZW50IiwiZGF0ZSIsImFtb3VudCIsIkRhdGUiLCJOdW1iZXIiLCJ5ZWFyIiwiZ2V0VVRDRnVsbFllYXIiLCJpc1ZhbGlkIiwiaXNGaW5pdGUiLCJGdW5kYW1lbnRhbHMiLCJkYXRhIiwib3BlcmF0aW5nQ2FzaEZsb3ciLCJleHRyYWN0VmFsdWUiLCJPcGVyYXRpbmdDYXNoRmxvdyIsImNhcGl0YWxFeHBlbmRpdHVyZSIsIk1hdGgiLCJhYnMiLCJDYXBpdGFsRXhwZW5kaXR1cmUiLCJjYXNoRGl2aWRlbmRzUGFpZCIsIkNhc2hEaXZpZGVuZHNQYWlkIiwibmV0SW5jb21lIiwiTmV0SW5jb21lIiwicGF5b3V0UmF0aW8iLCJmaWVsZCIsIk5hTiIsInJhdyIsImZyZWVDYXNoRmxvdyIsImZjZlBheW91dFJhdGlvIiwiZmNmIiwiZmNmQ292ZXJhZ2UiLCJJbmZpbml0eSIsImVwc1BheW91dFJhdGlvIl0sImlnbm9yZUxpc3QiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/../../packages/core/dist/models/StockData.js\n");

/***/ }),

/***/ "(rsc)/../../packages/core/dist/services/AlphaVantageService.js":
/*!****************************************************************!*\
  !*** ../../packages/core/dist/services/AlphaVantageService.js ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AlphaVantageService: () => (/* binding */ AlphaVantageService)\n/* harmony export */ });\n/* harmony import */ var _utils_RetryHandler_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/RetryHandler.js */ \"(rsc)/../../packages/core/dist/utils/RetryHandler.js\");\n/* harmony import */ var _errors_DivvyErrors_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../errors/DivvyErrors.js */ \"(rsc)/../../packages/core/dist/errors/DivvyErrors.js\");\n\n\nclass AlphaVantageService {\n    constructor(apiKey, dailyCeiling = 25){\n        this.baseUrl = 'https://www.alphavantage.co/query';\n        this.apiKey = apiKey || process.env.ALPHA_VANTAGE_API_KEY || '';\n        this.dailyCeiling = dailyCeiling;\n        if (!this.apiKey) {\n            throw new Error('Alpha Vantage API key is required. Set ALPHA_VANTAGE_API_KEY environment variable.');\n        }\n    }\n    async getCompanyOverview(symbol) {\n        try {\n            const params = new URLSearchParams({\n                function: 'OVERVIEW',\n                symbol: symbol.toUpperCase(),\n                apikey: this.apiKey\n            });\n            const response = await _utils_RetryHandler_js__WEBPACK_IMPORTED_MODULE_0__.RetryHandler.withRetry(async ()=>{\n                const res = await fetch(`${this.baseUrl}?${params}`);\n                if (!res.ok) {\n                    throw new _errors_DivvyErrors_js__WEBPACK_IMPORTED_MODULE_1__.NetworkError(`HTTP ${res.status}: ${res.statusText}`);\n                }\n                return res.json();\n            }, _utils_RetryHandler_js__WEBPACK_IMPORTED_MODULE_0__.RetryHandler.getNetworkRetryConfig());\n            if (response['Error Message']) {\n                throw new _errors_DivvyErrors_js__WEBPACK_IMPORTED_MODULE_1__.TickerNotFoundError(symbol);\n            }\n            if (response['Note']) {\n                throw new _errors_DivvyErrors_js__WEBPACK_IMPORTED_MODULE_1__.RateLimitError('Alpha Vantage API rate limit exceeded', 60000 // 1 minute retry delay\n                );\n            }\n            if (!response.Symbol) {\n                throw new _errors_DivvyErrors_js__WEBPACK_IMPORTED_MODULE_1__.DataSourceError(`Invalid response from Alpha Vantage for ${symbol}`, 'alphavantage', false);\n            }\n            return response;\n        } catch (error) {\n            throw this.handleAlphaVantageError(error, 'overview', symbol);\n        }\n    }\n    async getTimeSeriesDaily(symbol, outputSize = 'compact') {\n        try {\n            const params = new URLSearchParams({\n                function: 'TIME_SERIES_DAILY_ADJUSTED',\n                symbol: symbol.toUpperCase(),\n                outputsize: outputSize,\n                apikey: this.apiKey\n            });\n            const response = await _utils_RetryHandler_js__WEBPACK_IMPORTED_MODULE_0__.RetryHandler.withRetry(async ()=>{\n                const res = await fetch(`${this.baseUrl}?${params}`);\n                if (!res.ok) {\n                    throw new _errors_DivvyErrors_js__WEBPACK_IMPORTED_MODULE_1__.NetworkError(`HTTP ${res.status}: ${res.statusText}`);\n                }\n                return res.json();\n            }, _utils_RetryHandler_js__WEBPACK_IMPORTED_MODULE_0__.RetryHandler.getNetworkRetryConfig());\n            if (response['Error Message']) {\n                throw new _errors_DivvyErrors_js__WEBPACK_IMPORTED_MODULE_1__.TickerNotFoundError(symbol);\n            }\n            if (response['Note']) {\n                throw new _errors_DivvyErrors_js__WEBPACK_IMPORTED_MODULE_1__.RateLimitError('Alpha Vantage API rate limit exceeded', 60000);\n            }\n            if (!response['Time Series (Daily)']) {\n                throw new _errors_DivvyErrors_js__WEBPACK_IMPORTED_MODULE_1__.DataSourceError(`No time series data available for ${symbol}`, 'alphavantage', false);\n            }\n            return response;\n        } catch (error) {\n            throw this.handleAlphaVantageError(error, 'time-series', symbol);\n        }\n    }\n    async getIncomeStatement(symbol) {\n        try {\n            const params = new URLSearchParams({\n                function: 'INCOME_STATEMENT',\n                symbol: symbol.toUpperCase(),\n                apikey: this.apiKey\n            });\n            const response = await _utils_RetryHandler_js__WEBPACK_IMPORTED_MODULE_0__.RetryHandler.withRetry(async ()=>{\n                const res = await fetch(`${this.baseUrl}?${params}`);\n                if (!res.ok) {\n                    throw new _errors_DivvyErrors_js__WEBPACK_IMPORTED_MODULE_1__.NetworkError(`HTTP ${res.status}: ${res.statusText}`);\n                }\n                return res.json();\n            }, _utils_RetryHandler_js__WEBPACK_IMPORTED_MODULE_0__.RetryHandler.getNetworkRetryConfig());\n            if (response['Error Message']) {\n                throw new _errors_DivvyErrors_js__WEBPACK_IMPORTED_MODULE_1__.TickerNotFoundError(symbol);\n            }\n            if (response['Note']) {\n                throw new _errors_DivvyErrors_js__WEBPACK_IMPORTED_MODULE_1__.RateLimitError('Alpha Vantage API rate limit exceeded', 60000);\n            }\n            if (!response.annualReports) {\n                throw new _errors_DivvyErrors_js__WEBPACK_IMPORTED_MODULE_1__.DataSourceError(`No income statement data available for ${symbol}`, 'alphavantage', false);\n            }\n            return response;\n        } catch (error) {\n            throw this.handleAlphaVantageError(error, 'income-statement', symbol);\n        }\n    }\n    async getCashFlow(symbol) {\n        try {\n            const params = new URLSearchParams({\n                function: 'CASH_FLOW',\n                symbol: symbol.toUpperCase(),\n                apikey: this.apiKey\n            });\n            const response = await _utils_RetryHandler_js__WEBPACK_IMPORTED_MODULE_0__.RetryHandler.withRetry(async ()=>{\n                const res = await fetch(`${this.baseUrl}?${params}`);\n                if (!res.ok) {\n                    throw new _errors_DivvyErrors_js__WEBPACK_IMPORTED_MODULE_1__.NetworkError(`HTTP ${res.status}: ${res.statusText}`);\n                }\n                return res.json();\n            }, _utils_RetryHandler_js__WEBPACK_IMPORTED_MODULE_0__.RetryHandler.getNetworkRetryConfig());\n            if (response['Error Message']) {\n                throw new _errors_DivvyErrors_js__WEBPACK_IMPORTED_MODULE_1__.TickerNotFoundError(symbol);\n            }\n            if (response['Note']) {\n                throw new _errors_DivvyErrors_js__WEBPACK_IMPORTED_MODULE_1__.RateLimitError('Alpha Vantage API rate limit exceeded', 60000);\n            }\n            if (!response.annualReports) {\n                throw new _errors_DivvyErrors_js__WEBPACK_IMPORTED_MODULE_1__.DataSourceError(`No cash flow data available for ${symbol}`, 'alphavantage', false);\n            }\n            return response;\n        } catch (error) {\n            throw this.handleAlphaVantageError(error, 'cash-flow', symbol);\n        }\n    }\n    handleAlphaVantageError(error, operation, symbol) {\n        // Handle specific Alpha Vantage errors\n        if (error?.message?.includes('Invalid API call') || error?.message?.includes('not found')) {\n            return new _errors_DivvyErrors_js__WEBPACK_IMPORTED_MODULE_1__.TickerNotFoundError(symbol);\n        }\n        if (error?.message?.includes('rate limit') || error?.message?.includes('429')) {\n            return new _errors_DivvyErrors_js__WEBPACK_IMPORTED_MODULE_1__.RateLimitError(`Alpha Vantage rate limit exceeded for ${operation}`, 60000);\n        }\n        if (error?.code === 'ENOTFOUND' || error?.code === 'ECONNREFUSED') {\n            return new _errors_DivvyErrors_js__WEBPACK_IMPORTED_MODULE_1__.NetworkError(`Network error accessing Alpha Vantage for ${operation}: ${error.message}`);\n        }\n        if (error?.message?.includes('timeout')) {\n            return new _errors_DivvyErrors_js__WEBPACK_IMPORTED_MODULE_1__.NetworkError(`Timeout error accessing Alpha Vantage for ${operation}`);\n        }\n        // If it's already one of our custom errors, pass it through\n        if (error?.code?.startsWith('VALIDATION_') || error?.code?.startsWith('DATA_QUALITY_') || error?.code?.startsWith('INSUFFICIENT_')) {\n            return error;\n        }\n        // Generic data source error\n        return new _errors_DivvyErrors_js__WEBPACK_IMPORTED_MODULE_1__.DataSourceError(`Alpha Vantage ${operation} failed: ${error.message}`, 'alphavantage', true);\n    }\n    // Health check method to test if Alpha Vantage is accessible\n    async healthCheck() {\n        const start = Date.now();\n        try {\n            await this.getCompanyOverview('AAPL');\n            return {\n                available: true,\n                latency: Date.now() - start\n            };\n        } catch (error) {\n            return {\n                available: false,\n                latency: Date.now() - start,\n                error: error instanceof Error ? error.message : 'Unknown error'\n            };\n        }\n    }\n    // Get remaining daily quota (placeholder - would need actual implementation)\n    getRemainingQuota() {\n        // This would integrate with rate limiting service in Phase 4\n        return this.dailyCeiling;\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/../../packages/core/dist/services/AlphaVantageService.js\n");

/***/ }),

/***/ "(rsc)/../../packages/core/dist/services/DatabaseService.js":
/*!************************************************************!*\
  !*** ../../packages/core/dist/services/DatabaseService.js ***!
  \************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DatabaseService: () => (/* binding */ DatabaseService)\n/* harmony export */ });\n/* harmony import */ var _supabase_supabaseClient_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../supabase/supabaseClient.js */ \"(rsc)/../../packages/core/dist/supabase/supabaseClient.js\");\n/* harmony import */ var _models_DividendAnalysis_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../models/DividendAnalysis.js */ \"(rsc)/../../packages/core/dist/models/DividendAnalysis.js\");\n/* harmony import */ var _models_StockData_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../models/StockData.js */ \"(rsc)/../../packages/core/dist/models/StockData.js\");\n/* harmony import */ var crypto__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! crypto */ \"crypto\");\n\n\n\n\nclass DatabaseService {\n    static createOptionsHash(options) {\n        const normalized = JSON.stringify(options, Object.keys(options).sort());\n        return (0,crypto__WEBPACK_IMPORTED_MODULE_3__.createHash)('md5').update(normalized).digest('hex').substring(0, 16);\n    }\n    static async ensureTicker(symbol, name, sector, industry) {\n        // Try to get existing ticker\n        const { data: existingTicker, error: selectError } = await _supabase_supabaseClient_js__WEBPACK_IMPORTED_MODULE_0__.supabase.from('tickers').select('id').eq('symbol', symbol).single();\n        if (existingTicker) {\n            return existingTicker.id;\n        }\n        if (selectError && selectError.code !== 'PGRST116') {\n            throw new Error(`Database error checking ticker: ${selectError.message}`);\n        }\n        // Insert new ticker\n        const { data: newTicker, error: insertError } = await _supabase_supabaseClient_js__WEBPACK_IMPORTED_MODULE_0__.supabase.from('tickers').insert({\n            symbol: symbol.toUpperCase(),\n            name: name || null,\n            sector: sector || null,\n            industry: industry || null\n        }).select('id').single();\n        if (insertError) {\n            throw new Error(`Failed to create ticker: ${insertError.message}`);\n        }\n        return newTicker.id;\n    }\n    static async saveAnalysis(analysis, options = {}) {\n        try {\n            // Ensure ticker exists\n            const tickerId = await this.ensureTicker(analysis.ticker, analysis.quote.name, analysis.quote.sector || undefined, analysis.quote.industry || undefined);\n            const optionsHash = this.createOptionsHash(options);\n            // Prepare analysis record\n            const record = {\n                ticker_id: tickerId,\n                observed_at: new Date().toISOString(),\n                options_hash: optionsHash,\n                price: analysis.quote.price,\n                ttm_div: isFinite(analysis.ttmDividends) ? analysis.ttmDividends : null,\n                ttm_yield: analysis.ttmYield ?? null,\n                forward_yield: analysis.forwardYield ?? null,\n                cagr3: analysis.cagr3 ?? null,\n                cagr5: analysis.cagr5 ?? null,\n                safe_growth: analysis.safeGrowth,\n                streak: analysis.streak,\n                payout_eps: isFinite(analysis.fundamentals.epsPayoutRatio) ? analysis.fundamentals.epsPayoutRatio : null,\n                payout_fcf: isFinite(analysis.fundamentals.fcfPayoutRatio) ? analysis.fundamentals.fcfPayoutRatio : null,\n                fcf_coverage: isFinite(analysis.fundamentals.fcfCoverage) ? analysis.fundamentals.fcfCoverage : null,\n                ddm_price: null,\n                score_payout: Math.round(analysis.scores.payout),\n                score_fcf: Math.round(analysis.scores.fcf),\n                score_streak: Math.round(analysis.scores.streak),\n                score_growth: Math.round(analysis.scores.growth),\n                score_total: analysis.totalScore,\n                raw: {\n                    analysis: {\n                        ticker: analysis.ticker,\n                        quote: analysis.quote,\n                        ttmDividends: analysis.ttmDividends,\n                        ttmYield: analysis.ttmYield,\n                        annualDividends: analysis.annualDividends,\n                        cagr3: analysis.cagr3,\n                        cagr5: analysis.cagr5,\n                        streak: analysis.streak,\n                        fundamentals: {\n                            operatingCashFlow: analysis.fundamentals.operatingCashFlow,\n                            capitalExpenditure: analysis.fundamentals.capitalExpenditure,\n                            cashDividendsPaid: analysis.fundamentals.cashDividendsPaid,\n                            netIncome: analysis.fundamentals.netIncome,\n                            payoutRatio: analysis.fundamentals.payoutRatio,\n                            freeCashFlow: analysis.fundamentals.freeCashFlow,\n                            fcfPayoutRatio: analysis.fundamentals.fcfPayoutRatio,\n                            fcfCoverage: analysis.fundamentals.fcfCoverage,\n                            epsPayoutRatio: analysis.fundamentals.epsPayoutRatio\n                        },\n                        safeGrowth: analysis.safeGrowth,\n                        forwardDividend: analysis.forwardDividend,\n                        forwardYield: analysis.forwardYield,\n                        scores: analysis.scores,\n                        totalScore: analysis.totalScore,\n                        ema: analysis.ema,\n                        macd: analysis.macd,\n                        rsi: analysis.rsi\n                    },\n                    options,\n                    savedAt: new Date().toISOString()\n                }\n            };\n            const { data, error } = await _supabase_supabaseClient_js__WEBPACK_IMPORTED_MODULE_0__.supabase.from('analyses').insert(record).select('id').single();\n            if (error) {\n                throw new Error(`Failed to save analysis: ${error.message}`);\n            }\n            return data.id;\n        } catch (error) {\n            console.error('Database save failed:', error);\n            throw error;\n        }\n    }\n    static async getRecentAnalysis(symbol, optionsHash, hoursThreshold = 24) {\n        const cutoffTime = new Date();\n        cutoffTime.setHours(cutoffTime.getHours() - hoursThreshold);\n        const { data, error } = await _supabase_supabaseClient_js__WEBPACK_IMPORTED_MODULE_0__.supabase.from('analyses').select(`\n        *,\n        tickers!inner (symbol)\n      `).eq('tickers.symbol', symbol.toUpperCase()).eq('options_hash', optionsHash).gte('observed_at', cutoffTime.toISOString()).order('observed_at', {\n            ascending: false\n        }).limit(1).single();\n        if (error) {\n            // If no record found, return null (not an error)\n            if (error.code === 'PGRST116') {\n                return null;\n            }\n            throw new Error(`Failed to get recent analysis: ${error.message}`);\n        }\n        return data;\n    }\n    static async getAnalysisHistory(symbol, limit = 30) {\n        const { data, error } = await _supabase_supabaseClient_js__WEBPACK_IMPORTED_MODULE_0__.supabase.from('analyses').select(`\n        *,\n        tickers!inner (symbol)\n      `).eq('tickers.symbol', symbol.toUpperCase()).order('observed_at', {\n            ascending: false\n        }).limit(limit);\n        if (error) {\n            throw new Error(`Failed to get analysis history: ${error.message}`);\n        }\n        return data || [];\n    }\n    static async getLeaderboard(date, limit = 50) {\n        const targetDate = date || new Date();\n        const dateStr = targetDate.toISOString().split('T')[0];\n        const { data, error } = await _supabase_supabaseClient_js__WEBPACK_IMPORTED_MODULE_0__.supabase.from('leaderboard_daily').select('*').eq('as_of_date', dateStr).order('rank').limit(limit);\n        if (error) {\n            throw new Error(`Failed to get leaderboard: ${error.message}`);\n        }\n        return data || [];\n    }\n    static async refreshLeaderboard() {\n        const { error } = await _supabase_supabaseClient_js__WEBPACK_IMPORTED_MODULE_0__.supabase.rpc('refresh_leaderboard_daily');\n        if (error) {\n            throw new Error(`Failed to refresh leaderboard: ${error.message}`);\n        }\n    }\n    static hydrateAnalysisFromRecord(record) {\n        // The raw field contains the full analysis data\n        const rawAnalysis = record.raw.analysis;\n        // Reconstruct the Quote object\n        const quote = new _models_StockData_js__WEBPACK_IMPORTED_MODULE_2__.Quote({\n            regularMarketPrice: rawAnalysis.quote.price,\n            currency: rawAnalysis.quote.currency,\n            shortName: rawAnalysis.quote.name,\n            sector: rawAnalysis.quote.sector,\n            industry: rawAnalysis.quote.industry\n        });\n        // Reconstruct the Fundamentals object\n        const fundamentals = new _models_StockData_js__WEBPACK_IMPORTED_MODULE_2__.Fundamentals({\n            OperatingCashFlow: {\n                raw: rawAnalysis.fundamentals.operatingCashFlow\n            },\n            CapitalExpenditure: {\n                raw: rawAnalysis.fundamentals.capitalExpenditure\n            },\n            CashDividendsPaid: {\n                raw: rawAnalysis.fundamentals.cashDividendsPaid\n            },\n            NetIncome: {\n                raw: rawAnalysis.fundamentals.netIncome\n            },\n            payoutRatio: {\n                raw: rawAnalysis.fundamentals.payoutRatio\n            }\n        });\n        // Reconstruct the DividendScores object\n        const scores = new _models_DividendAnalysis_js__WEBPACK_IMPORTED_MODULE_1__.DividendScores({\n            payout: rawAnalysis.scores.payout,\n            fcf: rawAnalysis.scores.fcf,\n            streak: rawAnalysis.scores.streak,\n            growth: rawAnalysis.scores.growth,\n            trend: rawAnalysis.scores.trend || 0,\n            macd: rawAnalysis.scores.macd || 50,\n            rsi: rawAnalysis.scores.rsi || 50 // Default to 50 (neutral) if not present in old data\n        });\n        // Reconstruct EMA data (default to null if not present in old data)\n        const ema = {\n            ema20: rawAnalysis.ema?.ema20 || null,\n            ema50: rawAnalysis.ema?.ema50 || null,\n            ema200: rawAnalysis.ema?.ema200 || null\n        };\n        // Reconstruct MACD data (default to null if not present in old data)\n        const macd = {\n            macdLine: rawAnalysis.macd?.macdLine || null,\n            signalLine: rawAnalysis.macd?.signalLine || null,\n            histogram: rawAnalysis.macd?.histogram || null\n        };\n        // Reconstruct RSI data (default to null if not present in old data)\n        const rsi = {\n            rsi: rawAnalysis.rsi?.rsi || null,\n            period: rawAnalysis.rsi?.period || 14\n        };\n        // Create and return the full DividendAnalysis\n        return new _models_DividendAnalysis_js__WEBPACK_IMPORTED_MODULE_1__.DividendAnalysis({\n            ticker: rawAnalysis.ticker,\n            quote,\n            ttmDividends: rawAnalysis.ttmDividends,\n            ttmYield: rawAnalysis.ttmYield,\n            annualDividends: rawAnalysis.annualDividends,\n            cagr3: rawAnalysis.cagr3,\n            cagr5: rawAnalysis.cagr5,\n            streak: rawAnalysis.streak,\n            fundamentals,\n            safeGrowth: rawAnalysis.safeGrowth,\n            forwardDividend: rawAnalysis.forwardDividend,\n            forwardYield: rawAnalysis.forwardYield,\n            scores,\n            totalScore: rawAnalysis.totalScore,\n            ema,\n            macd,\n            rsi\n        });\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/../../packages/core/dist/services/DatabaseService.js\n");

/***/ }),

/***/ "(rsc)/../../packages/core/dist/services/DividendAnalysisService.js":
/*!********************************************************************!*\
  !*** ../../packages/core/dist/services/DividendAnalysisService.js ***!
  \********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DividendAnalysisService: () => (/* binding */ DividendAnalysisService)\n/* harmony export */ });\n/* harmony import */ var _YahooFinanceService_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./YahooFinanceService.js */ \"(rsc)/../../packages/core/dist/services/YahooFinanceService.js\");\n/* harmony import */ var _AlphaVantageService_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./AlphaVantageService.js */ \"(rsc)/../../packages/core/dist/services/AlphaVantageService.js\");\n/* harmony import */ var _calculators_DividendCalculator_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../calculators/DividendCalculator.js */ \"(rsc)/../../packages/core/dist/calculators/DividendCalculator.js\");\n/* harmony import */ var _calculators_ScoreCalculator_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../calculators/ScoreCalculator.js */ \"(rsc)/../../packages/core/dist/calculators/ScoreCalculator.js\");\n/* harmony import */ var _models_DividendAnalysis_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../models/DividendAnalysis.js */ \"(rsc)/../../packages/core/dist/models/DividendAnalysis.js\");\n/* harmony import */ var _data_DividendAristocrats_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../data/DividendAristocrats.js */ \"(rsc)/../../packages/core/dist/data/DividendAristocrats.js\");\n/* harmony import */ var _utils_MathUtils_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../utils/MathUtils.js */ \"(rsc)/../../packages/core/dist/utils/MathUtils.js\");\n/* harmony import */ var _DatabaseService_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./DatabaseService.js */ \"(rsc)/../../packages/core/dist/services/DatabaseService.js\");\n/* harmony import */ var _calculators_TechnicalIndicatorCalculator_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../calculators/TechnicalIndicatorCalculator.js */ \"(rsc)/../../packages/core/dist/calculators/TechnicalIndicatorCalculator.js\");\n\n\n\n\n\n\n\n\n\nclass DividendAnalysisService {\n    constructor(){\n        this.yahooService = new _YahooFinanceService_js__WEBPACK_IMPORTED_MODULE_0__.YahooFinanceService();\n        // Initialize Alpha Vantage service if API key is available\n        try {\n            this.alphaVantageService = new _AlphaVantageService_js__WEBPACK_IMPORTED_MODULE_1__.AlphaVantageService();\n        } catch (error) {\n            console.warn('Alpha Vantage service not available:', error instanceof Error ? error.message : 'Unknown error');\n            this.alphaVantageService = null;\n        }\n    }\n    async healthCheck() {\n        return this.yahooService.healthCheck();\n    }\n    async analyze(ticker, years = 15, requiredReturn = 0.09, saveToDb = true, forceFresh = false, provider = 'yahoo') {\n        // Create options hash for caching (include provider)\n        const options = {\n            requiredReturn,\n            years,\n            periods: years,\n            provider\n        };\n        const optionsHash = _DatabaseService_js__WEBPACK_IMPORTED_MODULE_7__.DatabaseService.createOptionsHash(options);\n        // Check for recent cached analysis (within 24 hours) unless forced fresh\n        if (saveToDb && !forceFresh) {\n            try {\n                const cachedRecord = await _DatabaseService_js__WEBPACK_IMPORTED_MODULE_7__.DatabaseService.getRecentAnalysis(ticker, optionsHash, 24);\n                if (cachedRecord) {\n                    console.log(`📋 Using cached analysis for ${ticker} (${new Date(cachedRecord.observed_at).toLocaleString()})`);\n                    return _DatabaseService_js__WEBPACK_IMPORTED_MODULE_7__.DatabaseService.hydrateAnalysisFromRecord(cachedRecord);\n                }\n            } catch (error) {\n                console.warn('Cache lookup failed, proceeding with fresh analysis:', error instanceof Error ? error.message : 'Unknown error');\n            }\n        }\n        if (forceFresh) {\n            console.log(`🔄 Force fresh analysis requested for ${ticker}, bypassing cache`);\n        }\n        // Perform fresh analysis\n        console.log(`🔍 Performing fresh analysis for ${ticker}...`);\n        // Get quote and enhance with Alpha Vantage data if requested\n        let quote = await this.yahooService.getQuote(ticker);\n        // Get company overview from Alpha Vantage if provider is 'av' and service is available\n        let companyOverview = null;\n        if (provider === 'av' && this.alphaVantageService) {\n            try {\n                companyOverview = await this.alphaVantageService.getCompanyOverview(ticker);\n                console.log(`📊 Using Alpha Vantage company overview for ${ticker}`);\n                // Create new enhanced quote with AV data if available\n                if (companyOverview.Sector && companyOverview.Industry) {\n                    const { Quote } = await Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ../models/StockData.js */ \"(rsc)/../../packages/core/dist/models/StockData.js\"));\n                    quote = new Quote({\n                        regularMarketPrice: quote.price,\n                        currency: quote.currency,\n                        shortName: quote.name,\n                        sector: companyOverview.Sector,\n                        industry: companyOverview.Industry\n                    });\n                }\n            } catch (error) {\n                console.warn(`⚠️  Alpha Vantage company overview failed, falling back to Yahoo Finance: ${error instanceof Error ? error.message : 'Unknown error'}`);\n            }\n        }\n        const dividendEvents = await this.yahooService.getDividendEvents(ticker, years);\n        const fundamentals = await this.yahooService.getFundamentals(ticker, years);\n        const ttmDividends = _calculators_DividendCalculator_js__WEBPACK_IMPORTED_MODULE_2__.DividendCalculator.calculateTTMDividends(dividendEvents);\n        const ttmYield = quote.price ? ttmDividends / quote.price : null;\n        const annualDividends = _calculators_DividendCalculator_js__WEBPACK_IMPORTED_MODULE_2__.DividendCalculator.annualizeDividends(dividendEvents);\n        const last3 = annualDividends.slice(-3);\n        const last5 = annualDividends.slice(-5);\n        const cagr3 = last3.length >= 3 ? (0,_utils_MathUtils_js__WEBPACK_IMPORTED_MODULE_6__.calculateCAGR)(last3) : null;\n        const cagr5 = last5.length >= 5 ? (0,_utils_MathUtils_js__WEBPACK_IMPORTED_MODULE_6__.calculateCAGR)(last5) : null;\n        // Calculate dividend streak with enhanced logic\n        const rawStreak = _calculators_DividendCalculator_js__WEBPACK_IMPORTED_MODULE_2__.DividendCalculator.calculateDividendStreak(annualDividends);\n        // Validate against known dividend elite stocks\n        const streakValidation = _data_DividendAristocrats_js__WEBPACK_IMPORTED_MODULE_5__.DividendEliteDetector.validateStreak(ticker, rawStreak);\n        const { adjustedStreak, rationale } = _data_DividendAristocrats_js__WEBPACK_IMPORTED_MODULE_5__.DividendEliteDetector.getAdjustedStreak(ticker, rawStreak);\n        // Use adjusted streak for analysis\n        const streak = adjustedStreak;\n        // Log data quality issues for known elite stocks\n        if (streakValidation.warning && !\"development\" || \"development\" === 'development') {\n            console.warn(`⚠️  Dividend Streak: ${streakValidation.warning}`);\n            if (rationale) {\n                console.warn(`🔧 Adjustment: ${rationale}`);\n            }\n        }\n        const safeGrowth = _calculators_DividendCalculator_js__WEBPACK_IMPORTED_MODULE_2__.DividendCalculator.calculateSafeGrowth(cagr5, cagr3, fundamentals, streak);\n        const forwardDividend = isFinite(ttmDividends) ? ttmDividends * (1 + safeGrowth) : NaN;\n        const forwardYield = quote.price ? forwardDividend / quote.price : null;\n        let ema = {\n            ema20: null,\n            ema50: null,\n            ema200: null\n        };\n        let macd = {\n            macdLine: null,\n            signalLine: null,\n            histogram: null\n        };\n        let rsi = {\n            rsi: null,\n            period: 14\n        };\n        let emaSource = 'none';\n        let macdSource = 'none';\n        let rsiSource = 'none';\n        // Try Alpha Vantage first for EMA calculations\n        if (this.alphaVantageService && (provider === 'av' || provider === 'auto')) {\n            try {\n                const timeSeries = await this.alphaVantageService.getTimeSeriesDaily(ticker, 'full');\n                const closePrices = _calculators_TechnicalIndicatorCalculator_js__WEBPACK_IMPORTED_MODULE_8__.TechnicalIndicatorCalculator.extractClosePrices(timeSeries);\n                if (closePrices.length >= 200) {\n                    const ema20 = _calculators_TechnicalIndicatorCalculator_js__WEBPACK_IMPORTED_MODULE_8__.TechnicalIndicatorCalculator.calculateEMA(closePrices, 20);\n                    const ema50 = _calculators_TechnicalIndicatorCalculator_js__WEBPACK_IMPORTED_MODULE_8__.TechnicalIndicatorCalculator.calculateEMA(closePrices, 50);\n                    const ema200 = _calculators_TechnicalIndicatorCalculator_js__WEBPACK_IMPORTED_MODULE_8__.TechnicalIndicatorCalculator.calculateEMA(closePrices, 200);\n                    ema = {\n                        ema20: ema20.length > 0 ? ema20[ema20.length - 1] : null,\n                        ema50: ema50.length > 0 ? ema50[ema50.length - 1] : null,\n                        ema200: ema200.length > 0 ? ema200[ema200.length - 1] : null\n                    };\n                    emaSource = 'alphavantage';\n                    // Calculate MACD and RSI using the same data \n                    const indicators = [];\n                    if (closePrices.length >= 35) {\n                        macd = _calculators_TechnicalIndicatorCalculator_js__WEBPACK_IMPORTED_MODULE_8__.TechnicalIndicatorCalculator.calculateMACD(closePrices);\n                        macdSource = 'alphavantage';\n                        indicators.push('MACD');\n                    }\n                    if (closePrices.length >= 15) {\n                        rsi = _calculators_TechnicalIndicatorCalculator_js__WEBPACK_IMPORTED_MODULE_8__.TechnicalIndicatorCalculator.calculateRSI(closePrices);\n                        rsiSource = 'alphavantage';\n                        indicators.push('RSI');\n                    }\n                    if (indicators.length > 0) {\n                        console.log(`📊 EMA & ${indicators.join(' & ')} calculated using Alpha Vantage data (${closePrices.length} data points)`);\n                    } else {\n                        console.log(`📊 EMA calculated using Alpha Vantage data (${closePrices.length} data points)`);\n                    }\n                } else {\n                    console.warn(`⚠️  Insufficient Alpha Vantage data for EMA calculation (${closePrices.length} points, need 200+)`);\n                }\n            } catch (error) {\n                console.warn(`⚠️  Alpha Vantage EMA calculation failed, falling back to Yahoo Finance: ${error instanceof Error ? error.message : 'Unknown error'}`);\n            }\n        }\n        // Fallback to Yahoo Finance if Alpha Vantage failed or not available\n        if (emaSource === 'none') {\n            try {\n                const historicalPrices = await this.yahooService.getHistoricalPrices(ticker, 2); // Get 2 years for EMA200\n                const closePrices = _calculators_TechnicalIndicatorCalculator_js__WEBPACK_IMPORTED_MODULE_8__.TechnicalIndicatorCalculator.extractClosePrices(historicalPrices);\n                if (closePrices.length >= 200) {\n                    const ema20 = _calculators_TechnicalIndicatorCalculator_js__WEBPACK_IMPORTED_MODULE_8__.TechnicalIndicatorCalculator.calculateEMA(closePrices, 20);\n                    const ema50 = _calculators_TechnicalIndicatorCalculator_js__WEBPACK_IMPORTED_MODULE_8__.TechnicalIndicatorCalculator.calculateEMA(closePrices, 50);\n                    const ema200 = _calculators_TechnicalIndicatorCalculator_js__WEBPACK_IMPORTED_MODULE_8__.TechnicalIndicatorCalculator.calculateEMA(closePrices, 200);\n                    ema = {\n                        ema20: ema20.length > 0 ? ema20[ema20.length - 1] : null,\n                        ema50: ema50.length > 0 ? ema50[ema50.length - 1] : null,\n                        ema200: ema200.length > 0 ? ema200[ema200.length - 1] : null\n                    };\n                    emaSource = 'yahoo';\n                    // Calculate MACD and RSI using Yahoo Finance data if not already calculated\n                    const indicators = [];\n                    if (macdSource === 'none' && closePrices.length >= 35) {\n                        macd = _calculators_TechnicalIndicatorCalculator_js__WEBPACK_IMPORTED_MODULE_8__.TechnicalIndicatorCalculator.calculateMACD(closePrices);\n                        macdSource = 'yahoo';\n                        indicators.push('MACD');\n                    }\n                    if (rsiSource === 'none' && closePrices.length >= 15) {\n                        rsi = _calculators_TechnicalIndicatorCalculator_js__WEBPACK_IMPORTED_MODULE_8__.TechnicalIndicatorCalculator.calculateRSI(closePrices);\n                        rsiSource = 'yahoo';\n                        indicators.push('RSI');\n                    }\n                    if (indicators.length > 0) {\n                        console.log(`📊 EMA & ${indicators.join(' & ')} calculated using Yahoo Finance data (${closePrices.length} data points)`);\n                    } else {\n                        console.log(`📊 EMA calculated using Yahoo Finance data (${closePrices.length} data points)`);\n                    }\n                } else {\n                    console.warn(`⚠️  Insufficient Yahoo Finance data for EMA calculation (${closePrices.length} points, need 200+)`);\n                }\n            } catch (error) {\n                console.warn(`⚠️  Yahoo Finance EMA calculation also failed: ${error instanceof Error ? error.message : 'Unknown error'}`);\n            }\n        }\n        const scores = _calculators_ScoreCalculator_js__WEBPACK_IMPORTED_MODULE_3__.ScoreCalculator.calculateDividendScores(fundamentals, streak, safeGrowth, quote, ema, macd, rsi);\n        const totalScore = _calculators_ScoreCalculator_js__WEBPACK_IMPORTED_MODULE_3__.ScoreCalculator.calculateTotalScore(scores);\n        // Analyze EMA trends for fundamental concerns\n        const emaAnalysis = _calculators_ScoreCalculator_js__WEBPACK_IMPORTED_MODULE_3__.ScoreCalculator.analyzeEMATrends(quote.price, ema);\n        // Log EMA trend analysis if there are concerns\n        if (emaAnalysis.fundamentalConcerns.length > 0 && emaAnalysis.fundamentalConcerns[0] !== 'EMA data unavailable') {\n            console.log(`📈 EMA Trend Analysis: ${emaAnalysis.trendStrength.toUpperCase()}`);\n            emaAnalysis.fundamentalConcerns.forEach((concern)=>{\n                console.log(`   ⚠️  ${concern}`);\n            });\n        }\n        const analysis = new _models_DividendAnalysis_js__WEBPACK_IMPORTED_MODULE_4__.DividendAnalysis({\n            ticker,\n            quote,\n            ttmDividends,\n            ttmYield,\n            annualDividends,\n            cagr3,\n            cagr5,\n            streak,\n            fundamentals,\n            safeGrowth,\n            forwardDividend,\n            forwardYield,\n            scores,\n            totalScore,\n            ema,\n            macd,\n            rsi\n        });\n        // Save to database if requested\n        if (saveToDb) {\n            try {\n                await _DatabaseService_js__WEBPACK_IMPORTED_MODULE_7__.DatabaseService.saveAnalysis(analysis, options);\n                console.log(`💾 Analysis saved to database for ${ticker}`);\n            } catch (error) {\n                console.warn('Failed to save analysis to database:', error instanceof Error ? error.message : 'Unknown error');\n            // Don't throw - analysis should still succeed even if DB save fails\n            }\n        }\n        return analysis;\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/../../packages/core/dist/services/DividendAnalysisService.js\n");

/***/ }),

/***/ "(rsc)/../../packages/core/dist/services/FallbackDataProvider.js":
/*!*****************************************************************!*\
  !*** ../../packages/core/dist/services/FallbackDataProvider.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   FallbackDataProvider: () => (/* binding */ FallbackDataProvider)\n/* harmony export */ });\n/* harmony import */ var _models_StockData_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../models/StockData.js */ \"(rsc)/../../packages/core/dist/models/StockData.js\");\n/* harmony import */ var _errors_DivvyErrors_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../errors/DivvyErrors.js */ \"(rsc)/../../packages/core/dist/errors/DivvyErrors.js\");\n\n\nclass FallbackDataProvider {\n    /**\n     * Provides fallback fundamentals when API data is incomplete\n     */ static createFallbackFundamentals(partialData, ttmDividends, _price) {\n        const fallbackData = {\n            ...partialData\n        };\n        // Estimate missing financial metrics using conservative assumptions\n        if (!fallbackData.OperatingCashFlow && ttmDividends > 0) {\n            // Conservative estimate: Assume dividends are 30% of operating cash flow\n            fallbackData.OperatingCashFlow = {\n                raw: ttmDividends / 0.3\n            };\n        }\n        if (!fallbackData.CapitalExpenditure && fallbackData.OperatingCashFlow) {\n            // Conservative estimate: CapEx is typically 10-20% of OCF\n            fallbackData.CapitalExpenditure = {\n                raw: fallbackData.OperatingCashFlow.raw * 0.15\n            };\n        }\n        if (!fallbackData.CashDividendsPaid && ttmDividends > 0) {\n            fallbackData.CashDividendsPaid = {\n                raw: ttmDividends\n            };\n        }\n        if (!fallbackData.NetIncome && ttmDividends > 0) {\n            // Conservative estimate: Assume 40% payout ratio\n            fallbackData.NetIncome = {\n                raw: ttmDividends / 0.4\n            };\n        }\n        if (!fallbackData.payoutRatio && ttmDividends > 0 && fallbackData.NetIncome) {\n            fallbackData.payoutRatio = {\n                raw: ttmDividends / fallbackData.NetIncome.raw\n            };\n        }\n        return new _models_StockData_js__WEBPACK_IMPORTED_MODULE_0__.Fundamentals(fallbackData);\n    }\n    /**\n     * Estimates missing dividend data points using interpolation\n     */ static fillDividendGaps(annualData) {\n        if (annualData.length < 2) {\n            return annualData;\n        }\n        const sortedData = annualData.sort((a, b)=>a[0] - b[0]);\n        const filledData = [];\n        for(let i = 0; i < sortedData.length - 1; i++){\n            const [currentYear, currentAmount] = sortedData[i];\n            const [nextYear, nextAmount] = sortedData[i + 1];\n            filledData.push([\n                currentYear,\n                currentAmount\n            ]);\n            // Fill gaps between years\n            for(let year = currentYear + 1; year < nextYear; year++){\n                const progress = (year - currentYear) / (nextYear - currentYear);\n                const interpolatedAmount = currentAmount + (nextAmount - currentAmount) * progress;\n                filledData.push([\n                    year,\n                    interpolatedAmount\n                ]);\n            }\n        }\n        // Add the last data point\n        filledData.push(sortedData[sortedData.length - 1]);\n        return filledData;\n    }\n    /**\n     * Provides conservative estimates for key ratios when data is missing\n     */ static getConservativeEstimates() {\n        return {\n            epsPayoutRatio: {\n                value: 0.8,\n                confidence: 'low',\n                source: 'conservative',\n                rationale: 'Conservative assumption when EPS payout data unavailable'\n            },\n            fcfCoverage: {\n                value: 1.2,\n                confidence: 'low',\n                source: 'conservative',\n                rationale: 'Conservative FCF coverage when cash flow data unavailable'\n            },\n            dividendGrowth: {\n                value: 0.0,\n                confidence: 'medium',\n                source: 'conservative',\n                rationale: 'Zero growth assumption when historical data is insufficient'\n            }\n        };\n    }\n    /**\n     * Creates synthetic dividend history for stocks with limited data\n     */ static createSyntheticDividendHistory(knownData, targetYears) {\n        if (knownData.length === 0) {\n            throw new _errors_DivvyErrors_js__WEBPACK_IMPORTED_MODULE_1__.InsufficientDataError([\n                'dividend history'\n            ]);\n        }\n        if (knownData.length >= targetYears) {\n            return knownData;\n        }\n        const sortedData = knownData.sort((a, b)=>a[0] - b[0]);\n        const [oldestYear, oldestAmount] = sortedData[0];\n        const [newestYear, newestAmount] = sortedData[sortedData.length - 1];\n        // Calculate historical growth rate\n        const years = newestYear - oldestYear;\n        const growthRate = years > 0 ? Math.pow(newestAmount / oldestAmount, 1 / years) - 1 : 0;\n        // Cap growth rate for conservative estimates\n        const conservativeGrowthRate = Math.max(-0.1, Math.min(0.1, growthRate));\n        const syntheticData = [\n            ...sortedData\n        ];\n        // Add historical data points going backwards\n        let currentAmount = oldestAmount;\n        for(let year = oldestYear - 1; year >= newestYear - targetYears; year--){\n            currentAmount = currentAmount / (1 + conservativeGrowthRate);\n            if (currentAmount > 0) {\n                syntheticData.unshift([\n                    year,\n                    currentAmount\n                ]);\n            }\n        }\n        return syntheticData.sort((a, b)=>a[0] - b[0]);\n    }\n    /**\n     * Provides industry-average estimates for missing data\n     */ static getIndustryAverages(sector) {\n        // Default averages (could be enhanced with actual industry data)\n        const defaults = {\n            payoutRatio: 0.6,\n            dividendYield: 0.025,\n            fcfMargin: 0.15\n        };\n        // Sector-specific adjustments (simplified for demo)\n        const sectorAdjustments = {\n            'utilities': {\n                payoutRatio: 0.7,\n                dividendYield: 0.04\n            },\n            'reits': {\n                payoutRatio: 0.9,\n                dividendYield: 0.05\n            },\n            'technology': {\n                payoutRatio: 0.3,\n                dividendYield: 0.015\n            },\n            'financials': {\n                payoutRatio: 0.5,\n                dividendYield: 0.03\n            }\n        };\n        const adjustments = sector ? sectorAdjustments[sector.toLowerCase()] || {} : {};\n        const finalValues = {\n            ...defaults,\n            ...adjustments\n        };\n        return {\n            payoutRatio: {\n                value: finalValues.payoutRatio,\n                confidence: sector ? 'medium' : 'low',\n                source: 'industry_average',\n                rationale: sector ? `Industry average for ${sector} sector` : 'General market average'\n            },\n            dividendYield: {\n                value: finalValues.dividendYield,\n                confidence: sector ? 'medium' : 'low',\n                source: 'industry_average',\n                rationale: sector ? `Industry average for ${sector} sector` : 'General market average'\n            },\n            fcfMargin: {\n                value: finalValues.fcfMargin,\n                confidence: 'low',\n                source: 'industry_average',\n                rationale: 'Estimated free cash flow margin'\n            }\n        };\n    }\n    /**\n     * Validates if we have minimum viable data for analysis\n     */ static validateMinimumData(hasPrice, dividendEventCount, hasAnyFundamentals) {\n        const missing = [];\n        if (!hasPrice) {\n            missing.push('current stock price');\n        }\n        if (dividendEventCount === 0) {\n            missing.push('dividend history');\n        }\n        if (dividendEventCount < 2) {\n            missing.push('sufficient dividend history (minimum 2 years)');\n        }\n        if (missing.length > 0) {\n            throw new _errors_DivvyErrors_js__WEBPACK_IMPORTED_MODULE_1__.InsufficientDataError(missing);\n        }\n        // Warning for limited fundamentals\n        if (!hasAnyFundamentals) {\n            console.warn('Warning: No fundamental data available. Analysis will use conservative estimates.');\n        }\n    }\n    /**\n     * Creates a data quality report with recommendations\n     */ static assessDataQuality(hasPrice, dividendEventCount, fundamentalFields, totalFundamentalFields) {\n        let score = 0;\n        const recommendations = [];\n        // Price data (20 points)\n        if (hasPrice) {\n            score += 20;\n        } else {\n            recommendations.push('Current price data is required for analysis');\n        }\n        // Dividend history (40 points)\n        if (dividendEventCount >= 10) {\n            score += 40;\n        } else if (dividendEventCount >= 5) {\n            score += 30;\n            recommendations.push('More dividend history would improve analysis accuracy');\n        } else if (dividendEventCount >= 2) {\n            score += 20;\n            recommendations.push('Limited dividend history - analysis may be less reliable');\n        } else {\n            recommendations.push('Insufficient dividend history for reliable analysis');\n        }\n        // Fundamental data (40 points)\n        const fundamentalCompleteness = fundamentalFields / totalFundamentalFields;\n        score += fundamentalCompleteness * 40;\n        if (fundamentalCompleteness < 0.5) {\n            recommendations.push('Missing fundamental data - consider finding additional data sources');\n        } else if (fundamentalCompleteness < 0.8) {\n            recommendations.push('Some fundamental data missing - analysis uses estimates');\n        }\n        // Determine quality level\n        let level;\n        if (score >= 90) level = 'excellent';\n        else if (score >= 70) level = 'good';\n        else if (score >= 50) level = 'fair';\n        else level = 'poor';\n        return {\n            score,\n            level,\n            recommendations\n        };\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/../../packages/core/dist/services/FallbackDataProvider.js\n");

/***/ }),

/***/ "(rsc)/../../packages/core/dist/services/YahooFinanceService.js":
/*!****************************************************************!*\
  !*** ../../packages/core/dist/services/YahooFinanceService.js ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   YahooFinanceService: () => (/* binding */ YahooFinanceService)\n/* harmony export */ });\n/* harmony import */ var yahoo_finance2__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! yahoo-finance2 */ \"(rsc)/../../node_modules/yahoo-finance2/dist/esm/src/index-node.js\");\n/* harmony import */ var _models_StockData_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../models/StockData.js */ \"(rsc)/../../packages/core/dist/models/StockData.js\");\n/* harmony import */ var _utils_RetryHandler_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/RetryHandler.js */ \"(rsc)/../../packages/core/dist/utils/RetryHandler.js\");\n/* harmony import */ var _validation_DataQualityChecker_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../validation/DataQualityChecker.js */ \"(rsc)/../../packages/core/dist/validation/DataQualityChecker.js\");\n/* harmony import */ var _errors_DivvyErrors_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../errors/DivvyErrors.js */ \"(rsc)/../../packages/core/dist/errors/DivvyErrors.js\");\n\n\n\n\n\nclass YahooFinanceService {\n    async getQuote(ticker) {\n        try {\n            const [quote, companyInfo] = await Promise.all([\n                _utils_RetryHandler_js__WEBPACK_IMPORTED_MODULE_2__.RetryHandler.withRetry(async ()=>{\n                    const result = await yahoo_finance2__WEBPACK_IMPORTED_MODULE_0__[\"default\"].quote(ticker);\n                    if (!result) {\n                        throw new _errors_DivvyErrors_js__WEBPACK_IMPORTED_MODULE_4__.TickerNotFoundError(ticker);\n                    }\n                    return result;\n                }, _utils_RetryHandler_js__WEBPACK_IMPORTED_MODULE_2__.RetryHandler.getNetworkRetryConfig()),\n                this.getCompanyInfo(ticker)\n            ]);\n            // Validate the raw quote data first\n            _validation_DataQualityChecker_js__WEBPACK_IMPORTED_MODULE_3__.DataQualityChecker.validateQuote(quote);\n            // Then enhance with company info by creating new Quote with merged data\n            return new _models_StockData_js__WEBPACK_IMPORTED_MODULE_1__.Quote({\n                ...quote,\n                sector: companyInfo.sector || undefined,\n                industry: companyInfo.industry || undefined\n            });\n        } catch (error) {\n            throw this.handleYahooError(error, 'quote', ticker);\n        }\n    }\n    async getCompanyInfo(ticker) {\n        try {\n            const quoteSummary = await _utils_RetryHandler_js__WEBPACK_IMPORTED_MODULE_2__.RetryHandler.withRetry(async ()=>{\n                return await yahoo_finance2__WEBPACK_IMPORTED_MODULE_0__[\"default\"].quoteSummary(ticker, {\n                    modules: [\n                        \"assetProfile\"\n                    ]\n                });\n            }, _utils_RetryHandler_js__WEBPACK_IMPORTED_MODULE_2__.RetryHandler.getDataSourceRetryConfig());\n            const profile = quoteSummary?.assetProfile;\n            return {\n                sector: profile?.sector || null,\n                industry: profile?.industry || null\n            };\n        } catch (error) {\n            console.warn(`Failed to fetch company info for ${ticker}:`, error instanceof Error ? error.message : 'Unknown error');\n            return {\n                sector: null,\n                industry: null\n            };\n        }\n    }\n    async getDividendEvents(ticker, years = 15) {\n        try {\n            const endDate = new Date();\n            const startDate = new Date();\n            startDate.setFullYear(endDate.getFullYear() - years);\n            const chart = await _utils_RetryHandler_js__WEBPACK_IMPORTED_MODULE_2__.RetryHandler.withRetry(async ()=>{\n                return await yahoo_finance2__WEBPACK_IMPORTED_MODULE_0__[\"default\"].chart(ticker, {\n                    period1: startDate,\n                    period2: endDate,\n                    interval: \"1mo\",\n                    events: \"dividends\"\n                });\n            }, _utils_RetryHandler_js__WEBPACK_IMPORTED_MODULE_2__.RetryHandler.getDataSourceRetryConfig());\n            let divs = [];\n            if (chart?.events?.dividends && typeof chart.events.dividends === 'object') {\n                divs = Object.values(chart.events.dividends);\n            } else if (Array.isArray(chart?.events)) {\n                divs = chart.events;\n            }\n            const dividendEvents = (divs || []).map((d)=>new _models_StockData_js__WEBPACK_IMPORTED_MODULE_1__.DividendEvent({\n                    date: d.date || d.dateUTC || d.timestamp || new Date(),\n                    amount: d.amount ?? d.divCash ?? d.value ?? 0\n                }));\n            return _validation_DataQualityChecker_js__WEBPACK_IMPORTED_MODULE_3__.DataQualityChecker.validateDividendEvents(dividendEvents, ticker);\n        } catch (error) {\n            throw this.handleYahooError(error, 'dividends', ticker);\n        }\n    }\n    async getFundamentals(ticker, years = 15) {\n        const endDate = new Date();\n        const startDate = new Date();\n        startDate.setFullYear(endDate.getFullYear() - years);\n        let fundamentals = new _models_StockData_js__WEBPACK_IMPORTED_MODULE_1__.Fundamentals();\n        let hasData = false;\n        // Try fundamentals API first\n        try {\n            const fundamentalsData = await _utils_RetryHandler_js__WEBPACK_IMPORTED_MODULE_2__.RetryHandler.withRetry(async ()=>{\n                return await yahoo_finance2__WEBPACK_IMPORTED_MODULE_0__[\"default\"].fundamentalsTimeSeries(ticker, {\n                    period1: startDate,\n                    period2: endDate,\n                    type: \"annual\",\n                    module: \"all\"\n                });\n            }, _utils_RetryHandler_js__WEBPACK_IMPORTED_MODULE_2__.RetryHandler.getDataSourceRetryConfig());\n            if (fundamentalsData?.timeSeries?.[0]) {\n                fundamentals = new _models_StockData_js__WEBPACK_IMPORTED_MODULE_1__.Fundamentals(fundamentalsData.timeSeries[0]);\n                hasData = true;\n            }\n        } catch (error) {\n            console.warn(\"Fundamentals API failed, trying quoteSummary fallback...\");\n        }\n        // Try quoteSummary as fallback\n        if (!hasData) {\n            try {\n                const quoteSummary = await _utils_RetryHandler_js__WEBPACK_IMPORTED_MODULE_2__.RetryHandler.withRetry(async ()=>{\n                    return await yahoo_finance2__WEBPACK_IMPORTED_MODULE_0__[\"default\"].quoteSummary(ticker, {\n                        modules: [\n                            \"summaryDetail\",\n                            \"defaultKeyStatistics\",\n                            \"financialData\"\n                        ]\n                    });\n                }, _utils_RetryHandler_js__WEBPACK_IMPORTED_MODULE_2__.RetryHandler.getDataSourceRetryConfig());\n                // Extract what data we can from quoteSummary\n                const summaryData = {};\n                const summary = quoteSummary;\n                if (summary?.summaryDetail?.payoutRatio || summary?.defaultKeyStatistics?.payoutRatio) {\n                    summaryData.payoutRatio = summary.summaryDetail?.payoutRatio ?? summary.defaultKeyStatistics?.payoutRatio;\n                }\n                if (Object.keys(summaryData).length > 0) {\n                    fundamentals = new _models_StockData_js__WEBPACK_IMPORTED_MODULE_1__.Fundamentals(summaryData);\n                    hasData = true;\n                }\n            } catch (error) {\n                console.warn(\"QuoteSummary also failed, using fallback data\");\n            }\n        }\n        // Validate data quality\n        const qualityReport = _validation_DataQualityChecker_js__WEBPACK_IMPORTED_MODULE_3__.DataQualityChecker.validateFundamentals(fundamentals);\n        // Log warnings\n        if (qualityReport.warnings.length > 0) {\n            console.warn(`Data quality warnings: ${qualityReport.warnings.join(', ')}`);\n        }\n        return fundamentals;\n    }\n    async getHistoricalPrices(ticker, years = 1) {\n        try {\n            const endDate = new Date();\n            const startDate = new Date();\n            startDate.setFullYear(endDate.getFullYear() - years);\n            const chart = await _utils_RetryHandler_js__WEBPACK_IMPORTED_MODULE_2__.RetryHandler.withRetry(async ()=>{\n                return await yahoo_finance2__WEBPACK_IMPORTED_MODULE_0__[\"default\"].chart(ticker, {\n                    period1: startDate,\n                    period2: endDate,\n                    interval: \"1d\"\n                });\n            }, _utils_RetryHandler_js__WEBPACK_IMPORTED_MODULE_2__.RetryHandler.getDataSourceRetryConfig());\n            if (!chart?.quotes) {\n                return [];\n            }\n            return chart.quotes.filter((q)=>q.close !== null && q.close !== undefined).map((q)=>({\n                    date: q.date,\n                    close: q.close\n                }));\n        } catch (error) {\n            throw this.handleYahooError(error, 'historical prices', ticker);\n        }\n    }\n    handleYahooError(error, operation, ticker) {\n        // Handle specific Yahoo Finance errors\n        if (error?.message?.includes('404') || error?.message?.includes('not found')) {\n            return new _errors_DivvyErrors_js__WEBPACK_IMPORTED_MODULE_4__.TickerNotFoundError(ticker);\n        }\n        if (error?.message?.includes('429') || error?.message?.includes('rate limit')) {\n            return new _errors_DivvyErrors_js__WEBPACK_IMPORTED_MODULE_4__.RateLimitError(`Yahoo Finance rate limit exceeded for ${operation}`, 60000 // 1 minute retry delay\n            );\n        }\n        if (error?.code === 'ENOTFOUND' || error?.code === 'ECONNREFUSED') {\n            return new _errors_DivvyErrors_js__WEBPACK_IMPORTED_MODULE_4__.NetworkError(`Network error accessing Yahoo Finance for ${operation}: ${error.message}`);\n        }\n        if (error?.message?.includes('timeout')) {\n            return new _errors_DivvyErrors_js__WEBPACK_IMPORTED_MODULE_4__.NetworkError(`Timeout error accessing Yahoo Finance for ${operation}`);\n        }\n        // If it's already one of our custom errors, pass it through\n        if (error?.code?.startsWith('VALIDATION_') || error?.code?.startsWith('DATA_QUALITY_') || error?.code?.startsWith('INSUFFICIENT_')) {\n            return error;\n        }\n        // Generic data source error\n        return new _errors_DivvyErrors_js__WEBPACK_IMPORTED_MODULE_4__.DataSourceError(`Yahoo Finance ${operation} failed: ${error.message}`, 'yahoo', true // Most Yahoo errors are retryable\n        );\n    }\n    // Health check method to test if Yahoo Finance is accessible\n    async healthCheck() {\n        const start = Date.now();\n        try {\n            await yahoo_finance2__WEBPACK_IMPORTED_MODULE_0__[\"default\"].quote('AAPL');\n            return {\n                available: true,\n                latency: Date.now() - start\n            };\n        } catch (error) {\n            return {\n                available: false,\n                latency: Date.now() - start,\n                error: error instanceof Error ? error.message : 'Unknown error'\n            };\n        }\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/../../packages/core/dist/services/YahooFinanceService.js\n");

/***/ }),

/***/ "(rsc)/../../packages/core/dist/supabase/supabaseClient.js":
/*!***********************************************************!*\
  !*** ../../packages/core/dist/supabase/supabaseClient.js ***!
  \***********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   supabase: () => (/* binding */ supabase)\n/* harmony export */ });\n/* harmony import */ var _supabase_supabase_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @supabase/supabase-js */ \"(rsc)/../../node_modules/@supabase/supabase-js/dist/module/index.js\");\n/* harmony import */ var dotenv__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! dotenv */ \"(rsc)/../../node_modules/dotenv/lib/main.js\");\n\n\n// Load environment variables\n(0,dotenv__WEBPACK_IMPORTED_MODULE_0__.config)();\nconst supabaseUrl = process.env.SUPABASE_URL;\nconst supabaseAnonKey = process.env.SUPABASE_ANON_KEY;\nif (!supabaseUrl || !supabaseAnonKey) {\n    throw new Error('Missing Supabase environment variables. Check your .env file contains SUPABASE_URL and SUPABASE_ANON_KEY');\n}\nconst supabase = (0,_supabase_supabase_js__WEBPACK_IMPORTED_MODULE_1__.createClient)(supabaseUrl, supabaseAnonKey);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vLi4vcGFja2FnZXMvY29yZS9kaXN0L3N1cGFiYXNlL3N1cGFiYXNlQ2xpZW50LmpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUFxRDtBQUNyQjtBQUNoQyw2QkFBNkI7QUFDN0JDLDhDQUFNQTtBQUNOLE1BQU1DLGNBQWNDLFFBQVFDLEdBQUcsQ0FBQ0MsWUFBWTtBQUM1QyxNQUFNQyxrQkFBa0JILFFBQVFDLEdBQUcsQ0FBQ0csaUJBQWlCO0FBQ3JELElBQUksQ0FBQ0wsZUFBZSxDQUFDSSxpQkFBaUI7SUFDbEMsTUFBTSxJQUFJRSxNQUFNO0FBQ3BCO0FBQ08sTUFBTUMsV0FBV1QsbUVBQVlBLENBQUNFLGFBQWFJLGlCQUFpQiIsInNvdXJjZXMiOlsiL1VzZXJzL21hcnRpbnN0YXJvc3RhL0RldmVsb3BtZW50L3ZpYmVzL2Rpdnl5L3BhY2thZ2VzL2NvcmUvZGlzdC9zdXBhYmFzZS9zdXBhYmFzZUNsaWVudC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBjcmVhdGVDbGllbnQgfSBmcm9tICdAc3VwYWJhc2Uvc3VwYWJhc2UtanMnO1xuaW1wb3J0IHsgY29uZmlnIH0gZnJvbSAnZG90ZW52Jztcbi8vIExvYWQgZW52aXJvbm1lbnQgdmFyaWFibGVzXG5jb25maWcoKTtcbmNvbnN0IHN1cGFiYXNlVXJsID0gcHJvY2Vzcy5lbnYuU1VQQUJBU0VfVVJMO1xuY29uc3Qgc3VwYWJhc2VBbm9uS2V5ID0gcHJvY2Vzcy5lbnYuU1VQQUJBU0VfQU5PTl9LRVk7XG5pZiAoIXN1cGFiYXNlVXJsIHx8ICFzdXBhYmFzZUFub25LZXkpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ01pc3NpbmcgU3VwYWJhc2UgZW52aXJvbm1lbnQgdmFyaWFibGVzLiBDaGVjayB5b3VyIC5lbnYgZmlsZSBjb250YWlucyBTVVBBQkFTRV9VUkwgYW5kIFNVUEFCQVNFX0FOT05fS0VZJyk7XG59XG5leHBvcnQgY29uc3Qgc3VwYWJhc2UgPSBjcmVhdGVDbGllbnQoc3VwYWJhc2VVcmwsIHN1cGFiYXNlQW5vbktleSk7XG4iXSwibmFtZXMiOlsiY3JlYXRlQ2xpZW50IiwiY29uZmlnIiwic3VwYWJhc2VVcmwiLCJwcm9jZXNzIiwiZW52IiwiU1VQQUJBU0VfVVJMIiwic3VwYWJhc2VBbm9uS2V5IiwiU1VQQUJBU0VfQU5PTl9LRVkiLCJFcnJvciIsInN1cGFiYXNlIl0sImlnbm9yZUxpc3QiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/../../packages/core/dist/supabase/supabaseClient.js\n");

/***/ }),

/***/ "(rsc)/../../packages/core/dist/utils/MathUtils.js":
/*!***************************************************!*\
  !*** ../../packages/core/dist/utils/MathUtils.js ***!
  \***************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   calculateCAGR: () => (/* binding */ calculateCAGR),\n/* harmony export */   clamp: () => (/* binding */ clamp),\n/* harmony export */   isValidNumber: () => (/* binding */ isValidNumber),\n/* harmony export */   sum: () => (/* binding */ sum)\n/* harmony export */ });\nconst clamp = (x, lo, hi)=>Math.min(hi, Math.max(lo, x));\nconst sum = (arr)=>arr.reduce((a, b)=>a + (b || 0), 0);\nconst isValidNumber = (value)=>value != null && isFinite(value);\nconst calculateCAGR = (series)=>{\n    const vals = series.filter(([, v])=>v > 0);\n    if (vals.length < 2) return null;\n    const first = vals[0];\n    const last = vals[vals.length - 1];\n    const years = last[0] - first[0] || 1;\n    if (years < 2 || first[1] <= 0) return null;\n    return Math.pow(last[1] / first[1], 1 / years) - 1;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vLi4vcGFja2FnZXMvY29yZS9kaXN0L3V0aWxzL01hdGhVdGlscy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQU8sTUFBTUEsUUFBUSxDQUFDQyxHQUFHQyxJQUFJQyxLQUFPQyxLQUFLQyxHQUFHLENBQUNGLElBQUlDLEtBQUtFLEdBQUcsQ0FBQ0osSUFBSUQsSUFBSTtBQUMzRCxNQUFNTSxNQUFNLENBQUNDLE1BQVFBLElBQUlDLE1BQU0sQ0FBQyxDQUFDQyxHQUFHQyxJQUFNRCxJQUFLQyxDQUFBQSxLQUFLLElBQUksR0FBRztBQUMzRCxNQUFNQyxnQkFBZ0IsQ0FBQ0MsUUFBVUEsU0FBUyxRQUFRQyxTQUFTRCxPQUFPO0FBQ2xFLE1BQU1FLGdCQUFnQixDQUFDQztJQUMxQixNQUFNQyxPQUFPRCxPQUFPRSxNQUFNLENBQUMsQ0FBQyxHQUFHQyxFQUFFLEdBQUtBLElBQUk7SUFDMUMsSUFBSUYsS0FBS0csTUFBTSxHQUFHLEdBQ2QsT0FBTztJQUNYLE1BQU1DLFFBQVFKLElBQUksQ0FBQyxFQUFFO0lBQ3JCLE1BQU1LLE9BQU9MLElBQUksQ0FBQ0EsS0FBS0csTUFBTSxHQUFHLEVBQUU7SUFDbEMsTUFBTUcsUUFBUUQsSUFBSSxDQUFDLEVBQUUsR0FBR0QsS0FBSyxDQUFDLEVBQUUsSUFBSTtJQUNwQyxJQUFJRSxRQUFRLEtBQUtGLEtBQUssQ0FBQyxFQUFFLElBQUksR0FDekIsT0FBTztJQUNYLE9BQU9qQixLQUFLb0IsR0FBRyxDQUFDRixJQUFJLENBQUMsRUFBRSxHQUFHRCxLQUFLLENBQUMsRUFBRSxFQUFFLElBQUlFLFNBQVM7QUFDckQsRUFBRSIsInNvdXJjZXMiOlsiL1VzZXJzL21hcnRpbnN0YXJvc3RhL0RldmVsb3BtZW50L3ZpYmVzL2Rpdnl5L3BhY2thZ2VzL2NvcmUvZGlzdC91dGlscy9NYXRoVXRpbHMuanMiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGNvbnN0IGNsYW1wID0gKHgsIGxvLCBoaSkgPT4gTWF0aC5taW4oaGksIE1hdGgubWF4KGxvLCB4KSk7XG5leHBvcnQgY29uc3Qgc3VtID0gKGFycikgPT4gYXJyLnJlZHVjZSgoYSwgYikgPT4gYSArIChiIHx8IDApLCAwKTtcbmV4cG9ydCBjb25zdCBpc1ZhbGlkTnVtYmVyID0gKHZhbHVlKSA9PiB2YWx1ZSAhPSBudWxsICYmIGlzRmluaXRlKHZhbHVlKTtcbmV4cG9ydCBjb25zdCBjYWxjdWxhdGVDQUdSID0gKHNlcmllcykgPT4ge1xuICAgIGNvbnN0IHZhbHMgPSBzZXJpZXMuZmlsdGVyKChbLCB2XSkgPT4gdiA+IDApO1xuICAgIGlmICh2YWxzLmxlbmd0aCA8IDIpXG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIGNvbnN0IGZpcnN0ID0gdmFsc1swXTtcbiAgICBjb25zdCBsYXN0ID0gdmFsc1t2YWxzLmxlbmd0aCAtIDFdO1xuICAgIGNvbnN0IHllYXJzID0gbGFzdFswXSAtIGZpcnN0WzBdIHx8IDE7XG4gICAgaWYgKHllYXJzIDwgMiB8fCBmaXJzdFsxXSA8PSAwKVxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICByZXR1cm4gTWF0aC5wb3cobGFzdFsxXSAvIGZpcnN0WzFdLCAxIC8geWVhcnMpIC0gMTtcbn07XG4iXSwibmFtZXMiOlsiY2xhbXAiLCJ4IiwibG8iLCJoaSIsIk1hdGgiLCJtaW4iLCJtYXgiLCJzdW0iLCJhcnIiLCJyZWR1Y2UiLCJhIiwiYiIsImlzVmFsaWROdW1iZXIiLCJ2YWx1ZSIsImlzRmluaXRlIiwiY2FsY3VsYXRlQ0FHUiIsInNlcmllcyIsInZhbHMiLCJmaWx0ZXIiLCJ2IiwibGVuZ3RoIiwiZmlyc3QiLCJsYXN0IiwieWVhcnMiLCJwb3ciXSwiaWdub3JlTGlzdCI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/../../packages/core/dist/utils/MathUtils.js\n");

/***/ }),

/***/ "(rsc)/../../packages/core/dist/utils/RetryHandler.js":
/*!******************************************************!*\
  !*** ../../packages/core/dist/utils/RetryHandler.js ***!
  \******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   RetryHandler: () => (/* binding */ RetryHandler)\n/* harmony export */ });\n/* harmony import */ var _errors_DivvyErrors_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../errors/DivvyErrors.js */ \"(rsc)/../../packages/core/dist/errors/DivvyErrors.js\");\n\nclass RetryHandler {\n    static{\n        this.DEFAULT_CONFIG = {\n            maxAttempts: 3,\n            baseDelayMs: 1000,\n            maxDelayMs: 30000,\n            backoffMultiplier: 2,\n            retryableErrors: [\n                'NETWORK_ERROR',\n                'DATA_SOURCE_YAHOO',\n                'RATE_LIMIT'\n            ],\n            jitterFactor: 0.1\n        };\n    }\n    static async withRetry(operation, config = {}) {\n        const finalConfig = {\n            ...this.DEFAULT_CONFIG,\n            ...config\n        };\n        const result = await this.executeWithRetry(operation, finalConfig);\n        if (result.success && result.result !== undefined) {\n            return result.result;\n        }\n        throw result.error || new Error('Retry operation failed');\n    }\n    static async executeWithRetry(operation, config) {\n        let lastError;\n        let totalDelay = 0;\n        for(let attempt = 1; attempt <= config.maxAttempts; attempt++){\n            try {\n                const result = await operation();\n                return {\n                    success: true,\n                    result,\n                    error: undefined,\n                    attempts: attempt,\n                    totalDelayMs: totalDelay\n                };\n            } catch (error) {\n                lastError = error;\n                // Check if error is retryable\n                if (!this.isRetryableError(lastError, config.retryableErrors)) {\n                    return {\n                        success: false,\n                        error: lastError,\n                        attempts: attempt,\n                        totalDelayMs: totalDelay\n                    };\n                }\n                // Don't delay on the last attempt\n                if (attempt < config.maxAttempts) {\n                    const delay = this.calculateDelay(attempt, config);\n                    totalDelay += delay;\n                    // Log retry attempt (in production, use proper logger)\n                    console.warn(`Retry attempt ${attempt}/${config.maxAttempts} after ${delay}ms. Error: ${lastError.message}`);\n                    await this.sleep(delay);\n                }\n            }\n        }\n        return {\n            success: false,\n            error: lastError,\n            attempts: config.maxAttempts,\n            totalDelayMs: totalDelay\n        };\n    }\n    static isRetryableError(error, retryableErrors) {\n        // Check if error is marked as retryable\n        if ('isRetryable' in error && error.isRetryable === true) {\n            return true;\n        }\n        // Check error code\n        if ('code' in error && typeof error.code === 'string') {\n            return retryableErrors.includes(error.code);\n        }\n        // Check error type\n        if (error instanceof _errors_DivvyErrors_js__WEBPACK_IMPORTED_MODULE_0__.NetworkError || error instanceof _errors_DivvyErrors_js__WEBPACK_IMPORTED_MODULE_0__.RateLimitError || error instanceof _errors_DivvyErrors_js__WEBPACK_IMPORTED_MODULE_0__.DataSourceError) {\n            return error.isRetryable;\n        }\n        // Check common network error patterns\n        const networkErrorPatterns = [\n            /ENOTFOUND/,\n            /ECONNRESET/,\n            /ETIMEDOUT/,\n            /ECONNREFUSED/,\n            /socket hang up/i,\n            /network timeout/i,\n            /rate limit/i,\n            /429/\n        ];\n        return networkErrorPatterns.some((pattern)=>pattern.test(error.message) || pattern.test(error.name));\n    }\n    static calculateDelay(attempt, config) {\n        // Exponential backoff with jitter\n        const baseDelay = config.baseDelayMs * Math.pow(config.backoffMultiplier, attempt - 1);\n        const jitter = baseDelay * config.jitterFactor * Math.random();\n        const delayWithJitter = baseDelay + jitter;\n        return Math.min(delayWithJitter, config.maxDelayMs);\n    }\n    static sleep(ms) {\n        return new Promise((resolve)=>setTimeout(resolve, ms));\n    }\n    // Specific retry configurations for different operations\n    static getNetworkRetryConfig() {\n        return {\n            maxAttempts: 3,\n            baseDelayMs: 2000,\n            maxDelayMs: 10000,\n            retryableErrors: [\n                'NETWORK_ERROR',\n                'RATE_LIMIT'\n            ]\n        };\n    }\n    static getDataSourceRetryConfig() {\n        return {\n            maxAttempts: 2,\n            baseDelayMs: 1500,\n            maxDelayMs: 5000,\n            retryableErrors: [\n                'DATA_SOURCE_YAHOO',\n                'NETWORK_ERROR'\n            ]\n        };\n    }\n    static getRateLimitRetryConfig() {\n        return {\n            maxAttempts: 5,\n            baseDelayMs: 5000,\n            maxDelayMs: 60000,\n            backoffMultiplier: 1.5,\n            retryableErrors: [\n                'RATE_LIMIT'\n            ]\n        };\n    }\n    // Circuit breaker pattern for failing services\n    static createCircuitBreaker(operation, failureThreshold = 5, recoveryTimeMs = 60000) {\n        let failures = 0;\n        let lastFailureTime = 0;\n        let isOpen = false;\n        return async ()=>{\n            const now = Date.now();\n            // Check if circuit should be reset\n            if (isOpen && now - lastFailureTime > recoveryTimeMs) {\n                isOpen = false;\n                failures = 0;\n            }\n            // If circuit is open, fail fast\n            if (isOpen) {\n                throw new _errors_DivvyErrors_js__WEBPACK_IMPORTED_MODULE_0__.DataSourceError('Circuit breaker is open - service temporarily unavailable', 'CIRCUIT_BREAKER');\n            }\n            try {\n                const result = await operation();\n                // Reset failure count on success\n                failures = 0;\n                return result;\n            } catch (error) {\n                failures++;\n                lastFailureTime = now;\n                // Open circuit if threshold reached\n                if (failures >= failureThreshold) {\n                    isOpen = true;\n                }\n                throw error;\n            }\n        };\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/../../packages/core/dist/utils/RetryHandler.js\n");

/***/ }),

/***/ "(rsc)/../../packages/core/dist/validation/DataQualityChecker.js":
/*!*****************************************************************!*\
  !*** ../../packages/core/dist/validation/DataQualityChecker.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DataQualityChecker: () => (/* binding */ DataQualityChecker)\n/* harmony export */ });\n/* harmony import */ var _errors_DivvyErrors_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../errors/DivvyErrors.js */ \"(rsc)/../../packages/core/dist/errors/DivvyErrors.js\");\n/* harmony import */ var _models_StockData_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../models/StockData.js */ \"(rsc)/../../packages/core/dist/models/StockData.js\");\n\n\nclass DataQualityChecker {\n    static validateQuote(quote) {\n        if (!quote) {\n            throw new _errors_DivvyErrors_js__WEBPACK_IMPORTED_MODULE_0__.TickerNotFoundError('UNKNOWN');\n        }\n        const warnings = [];\n        // Check required fields\n        if (!quote.regularMarketPrice && !quote.postMarketPrice && !quote.preMarketPrice) {\n            throw new _errors_DivvyErrors_js__WEBPACK_IMPORTED_MODULE_0__.DataQualityError('No valid price data found', 'quote');\n        }\n        const price = quote.regularMarketPrice || quote.postMarketPrice || quote.preMarketPrice;\n        if (price <= 0) {\n            throw new _errors_DivvyErrors_js__WEBPACK_IMPORTED_MODULE_0__.DataQualityError('Invalid price: must be greater than zero', 'quote');\n        }\n        if (price > 100000) {\n            warnings.push('Unusually high stock price detected');\n        }\n        // Check for company name\n        if (!quote.shortName && !quote.longName) {\n            warnings.push('Company name not available');\n        }\n        // Validate currency\n        if (!quote.currency) {\n            warnings.push('Currency information missing, assuming USD');\n        }\n        return new _models_StockData_js__WEBPACK_IMPORTED_MODULE_1__.Quote(quote);\n    }\n    static validateDividendEvents(events, _ticker) {\n        if (!Array.isArray(events)) {\n            throw new _errors_DivvyErrors_js__WEBPACK_IMPORTED_MODULE_0__.DataQualityError('Invalid dividend events data structure', 'dividends');\n        }\n        if (events.length === 0) {\n            throw new _errors_DivvyErrors_js__WEBPACK_IMPORTED_MODULE_0__.InsufficientDataError([\n                'dividend history'\n            ]);\n        }\n        const validEvents = events.filter((event)=>{\n            try {\n                return event.isValid();\n            } catch  {\n                return false;\n            }\n        });\n        if (validEvents.length === 0) {\n            throw new _errors_DivvyErrors_js__WEBPACK_IMPORTED_MODULE_0__.DataQualityError('No valid dividend events found', 'dividends');\n        }\n        // Check for data quality issues\n        const warnings = [];\n        if (validEvents.length < events.length) {\n            warnings.push(`Filtered out ${events.length - validEvents.length} invalid dividend events`);\n        }\n        // Check for suspicious dividend amounts\n        const amounts = validEvents.map((e)=>e.amount);\n        const maxAmount = Math.max(...amounts);\n        const minAmount = Math.min(...amounts);\n        if (maxAmount / minAmount > 100) {\n            warnings.push('Large variation in dividend amounts detected');\n        }\n        // Check for temporal consistency\n        const sortedEvents = validEvents.sort((a, b)=>a.date.getTime() - b.date.getTime());\n        let previousYear = 0;\n        for (const event of sortedEvents){\n            const year = event.year;\n            if (year < previousYear) {\n                warnings.push('Dividend events may not be properly sorted');\n                break;\n            }\n            previousYear = year;\n        }\n        // Minimum data requirement\n        if (validEvents.length < 4) {\n            throw new _errors_DivvyErrors_js__WEBPACK_IMPORTED_MODULE_0__.InsufficientDataError([\n                'sufficient dividend history (minimum 4 events)'\n            ]);\n        }\n        return validEvents;\n    }\n    static validateFundamentals(fundamentals) {\n        const warnings = [];\n        const errors = [];\n        const missingData = [];\n        // Check operating cash flow\n        if (!isFinite(fundamentals.operatingCashFlow)) {\n            missingData.push('operating cash flow');\n        } else if (fundamentals.operatingCashFlow < -1e12) {\n            warnings.push('Unusually large negative operating cash flow');\n        }\n        // Check capital expenditure\n        if (!isFinite(fundamentals.capitalExpenditure)) {\n            missingData.push('capital expenditure');\n        } else if (fundamentals.capitalExpenditure > 1e12) {\n            warnings.push('Unusually large capital expenditure');\n        }\n        // Check dividend payments\n        if (!isFinite(fundamentals.cashDividendsPaid)) {\n            missingData.push('cash dividends paid');\n        } else if (fundamentals.cashDividendsPaid < 0) {\n            warnings.push('Negative dividend payments detected');\n        }\n        // Check net income\n        if (!isFinite(fundamentals.netIncome)) {\n            missingData.push('net income');\n        }\n        // Check payout ratio\n        if (!isFinite(fundamentals.epsPayoutRatio)) {\n            missingData.push('EPS payout ratio');\n        } else if (fundamentals.epsPayoutRatio > 2) {\n            warnings.push('Very high EPS payout ratio (>200%)');\n        } else if (fundamentals.epsPayoutRatio < 0) {\n            warnings.push('Negative EPS payout ratio');\n        }\n        // Calculate data completeness\n        const totalFields = 5; // OCF, CapEx, Dividends, Net Income, Payout Ratio\n        const availableFields = totalFields - missingData.length;\n        const dataCompleteness = availableFields / totalFields * 100;\n        const isValid = errors.length === 0 && missingData.length < totalFields;\n        return {\n            isValid,\n            warnings,\n            errors,\n            missingData,\n            dataCompleteness\n        };\n    }\n    static validateAnnualDividends(annualData) {\n        const warnings = [];\n        const errors = [];\n        const missingData = [];\n        if (!Array.isArray(annualData) || annualData.length === 0) {\n            errors.push('No annual dividend data available');\n            return {\n                isValid: false,\n                warnings,\n                errors,\n                missingData: [\n                    'annual dividend history'\n                ],\n                dataCompleteness: 0\n            };\n        }\n        // Check for minimum data points\n        if (annualData.length < 3) {\n            warnings.push('Limited dividend history (less than 3 years)');\n        }\n        // Check for data consistency\n        let previousYear = 0;\n        for (const [year, amount] of annualData){\n            if (year <= previousYear) {\n                warnings.push('Duplicate or out-of-order years in dividend data');\n                break;\n            }\n            if (amount < 0) {\n                warnings.push(`Negative dividend amount found for year ${year}`);\n            }\n            if (amount > 1000) {\n                warnings.push(`Unusually high dividend amount for year ${year}`);\n            }\n            previousYear = year;\n        }\n        // Check for gaps in years\n        const years = annualData.map(([year])=>year).sort((a, b)=>a - b);\n        for(let i = 1; i < years.length; i++){\n            if (years[i] - years[i - 1] > 1) {\n                warnings.push(`Gap in dividend data between ${years[i - 1]} and ${years[i]}`);\n            }\n        }\n        const dataCompleteness = Math.min(100, annualData.length / 10 * 100); // 10 years = 100%\n        return {\n            isValid: true,\n            warnings,\n            errors,\n            missingData,\n            dataCompleteness\n        };\n    }\n    static generateOverallReport(reports) {\n        const combinedWarnings = [];\n        const combinedErrors = [];\n        const combinedMissingData = [];\n        let totalCompleteness = 0;\n        let validReports = 0;\n        for (const report of reports){\n            combinedWarnings.push(...report.warnings);\n            combinedErrors.push(...report.errors);\n            combinedMissingData.push(...report.missingData);\n            if (report.isValid) {\n                totalCompleteness += report.dataCompleteness;\n                validReports++;\n            }\n        }\n        const overallCompleteness = validReports > 0 ? totalCompleteness / validReports : 0;\n        const isValid = combinedErrors.length === 0 && validReports === reports.length;\n        return {\n            isValid,\n            warnings: [\n                ...new Set(combinedWarnings)\n            ],\n            errors: [\n                ...new Set(combinedErrors)\n            ],\n            missingData: [\n                ...new Set(combinedMissingData)\n            ],\n            dataCompleteness: overallCompleteness\n        };\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/../../packages/core/dist/validation/DataQualityChecker.js\n");

/***/ }),

/***/ "(rsc)/../../packages/core/dist/validation/InputValidator.js":
/*!*************************************************************!*\
  !*** ../../packages/core/dist/validation/InputValidator.js ***!
  \*************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   InputValidator: () => (/* binding */ InputValidator)\n/* harmony export */ });\n/* harmony import */ var _errors_DivvyErrors_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../errors/DivvyErrors.js */ \"(rsc)/../../packages/core/dist/errors/DivvyErrors.js\");\n\nclass InputValidator {\n    static{\n        this.TICKER_PATTERN = /^[A-Z0-9.-]{1,10}$/;\n    }\n    static{\n        this.MIN_YEARS = 1;\n    }\n    static{\n        this.MAX_YEARS = 50;\n    }\n    static{\n        this.MIN_REQUIRED_RETURN = 0.001; // 0.1%\n    }\n    static{\n        this.MAX_REQUIRED_RETURN = 1.0; // 100%\n    }\n    static{\n        this.VALID_PROVIDERS = [\n            'yahoo',\n            'av',\n            'auto'\n        ];\n    }\n    static validateTicker(ticker) {\n        if (!ticker) {\n            throw new _errors_DivvyErrors_js__WEBPACK_IMPORTED_MODULE_0__.ValidationError('Ticker symbol is required', 'ticker');\n        }\n        if (typeof ticker !== 'string') {\n            throw new _errors_DivvyErrors_js__WEBPACK_IMPORTED_MODULE_0__.ValidationError('Ticker must be a string', 'ticker');\n        }\n        const cleanTicker = ticker.trim().toUpperCase();\n        if (cleanTicker.length === 0) {\n            throw new _errors_DivvyErrors_js__WEBPACK_IMPORTED_MODULE_0__.ValidationError('Ticker symbol cannot be empty', 'ticker');\n        }\n        if (cleanTicker.length > 10) {\n            throw new _errors_DivvyErrors_js__WEBPACK_IMPORTED_MODULE_0__.ValidationError('Ticker symbol too long (max 10 characters)', 'ticker');\n        }\n        if (!this.TICKER_PATTERN.test(cleanTicker)) {\n            throw new _errors_DivvyErrors_js__WEBPACK_IMPORTED_MODULE_0__.ValidationError('Invalid ticker format. Use only letters, numbers, dots, and hyphens', 'ticker');\n        }\n        // Check for common invalid patterns\n        if (cleanTicker.startsWith('-') || cleanTicker.endsWith('-')) {\n            throw new _errors_DivvyErrors_js__WEBPACK_IMPORTED_MODULE_0__.ValidationError('Ticker cannot start or end with hyphen', 'ticker');\n        }\n        if (cleanTicker.startsWith('.') || cleanTicker.endsWith('.')) {\n            throw new _errors_DivvyErrors_js__WEBPACK_IMPORTED_MODULE_0__.ValidationError('Ticker cannot start or end with dot', 'ticker');\n        }\n        return cleanTicker;\n    }\n    static validateYears(years) {\n        let numYears;\n        if (typeof years === 'string') {\n            numYears = parseInt(years, 10);\n            if (isNaN(numYears)) {\n                throw new _errors_DivvyErrors_js__WEBPACK_IMPORTED_MODULE_0__.ValidationError('Years must be a valid number', 'years');\n            }\n        } else {\n            numYears = years;\n        }\n        if (!Number.isInteger(numYears)) {\n            throw new _errors_DivvyErrors_js__WEBPACK_IMPORTED_MODULE_0__.ValidationError('Years must be a whole number', 'years');\n        }\n        if (numYears < this.MIN_YEARS) {\n            throw new _errors_DivvyErrors_js__WEBPACK_IMPORTED_MODULE_0__.ValidationError(`Years must be at least ${this.MIN_YEARS}`, 'years');\n        }\n        if (numYears > this.MAX_YEARS) {\n            throw new _errors_DivvyErrors_js__WEBPACK_IMPORTED_MODULE_0__.ValidationError(`Years cannot exceed ${this.MAX_YEARS}`, 'years');\n        }\n        return numYears;\n    }\n    static validateRequiredReturn(requiredReturn) {\n        let numReturn;\n        if (typeof requiredReturn === 'string') {\n            numReturn = parseFloat(requiredReturn);\n            if (isNaN(numReturn)) {\n                throw new _errors_DivvyErrors_js__WEBPACK_IMPORTED_MODULE_0__.ValidationError('Required return must be a valid number', 'requiredReturn');\n            }\n        } else {\n            numReturn = requiredReturn;\n        }\n        if (!isFinite(numReturn)) {\n            throw new _errors_DivvyErrors_js__WEBPACK_IMPORTED_MODULE_0__.ValidationError('Required return must be a finite number', 'requiredReturn');\n        }\n        if (numReturn < this.MIN_REQUIRED_RETURN) {\n            throw new _errors_DivvyErrors_js__WEBPACK_IMPORTED_MODULE_0__.ValidationError(`Required return too low (minimum ${(this.MIN_REQUIRED_RETURN * 100).toFixed(1)}%)`, 'requiredReturn');\n        }\n        if (numReturn > this.MAX_REQUIRED_RETURN) {\n            throw new _errors_DivvyErrors_js__WEBPACK_IMPORTED_MODULE_0__.ValidationError(`Required return too high (maximum ${this.MAX_REQUIRED_RETURN * 100}%)`, 'requiredReturn');\n        }\n        return numReturn;\n    }\n    static validateProvider(provider) {\n        if (!provider) {\n            throw new _errors_DivvyErrors_js__WEBPACK_IMPORTED_MODULE_0__.ValidationError('Provider is required', 'provider');\n        }\n        if (typeof provider !== 'string') {\n            throw new _errors_DivvyErrors_js__WEBPACK_IMPORTED_MODULE_0__.ValidationError('Provider must be a string', 'provider');\n        }\n        const cleanProvider = provider.trim().toLowerCase();\n        if (!this.VALID_PROVIDERS.includes(cleanProvider)) {\n            throw new _errors_DivvyErrors_js__WEBPACK_IMPORTED_MODULE_0__.ValidationError(`Invalid provider \"${provider}\". Valid providers: ${this.VALID_PROVIDERS.join(', ')}`, 'provider');\n        }\n        return cleanProvider;\n    }\n    static validateCommanderOptions(options) {\n        if (!options || typeof options !== 'object') {\n            throw new _errors_DivvyErrors_js__WEBPACK_IMPORTED_MODULE_0__.ConfigurationError('Invalid command options');\n        }\n        // Validate years if provided\n        if (options.years !== undefined) {\n            try {\n                this.validateYears(options.years);\n            } catch (error) {\n                if (error instanceof _errors_DivvyErrors_js__WEBPACK_IMPORTED_MODULE_0__.ValidationError) {\n                    throw new _errors_DivvyErrors_js__WEBPACK_IMPORTED_MODULE_0__.ValidationError(`Invalid --years parameter: ${error.message}`, 'years');\n                }\n                throw error;\n            }\n        }\n        // Validate required return if provided\n        if (options.r !== undefined) {\n            try {\n                this.validateRequiredReturn(options.r);\n            } catch (error) {\n                if (error instanceof _errors_DivvyErrors_js__WEBPACK_IMPORTED_MODULE_0__.ValidationError) {\n                    throw new _errors_DivvyErrors_js__WEBPACK_IMPORTED_MODULE_0__.ValidationError(`Invalid --r parameter: ${error.message}`, 'requiredReturn');\n                }\n                throw error;\n            }\n        }\n        // Validate provider if provided\n        if (options.provider !== undefined) {\n            try {\n                this.validateProvider(options.provider);\n            } catch (error) {\n                if (error instanceof _errors_DivvyErrors_js__WEBPACK_IMPORTED_MODULE_0__.ValidationError) {\n                    throw new _errors_DivvyErrors_js__WEBPACK_IMPORTED_MODULE_0__.ValidationError(`Invalid --provider parameter: ${error.message}`, 'provider');\n                }\n                throw error;\n            }\n        }\n    }\n    static sanitizeInput(input) {\n        if (typeof input !== 'string') {\n            throw new _errors_DivvyErrors_js__WEBPACK_IMPORTED_MODULE_0__.ValidationError('Input must be a string');\n        }\n        // Remove potentially dangerous characters\n        return input.trim().replace(/[<>'\"&]/g, '') // Remove HTML/script injection characters\n        .slice(0, 50); // Limit length\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/../../packages/core/dist/validation/InputValidator.js\n");

/***/ }),

/***/ "(rsc)/./src/app/api/analyze/route.ts":
/*!**************************************!*\
  !*** ./src/app/api/analyze/route.ts ***!
  \**************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   GET: () => (/* binding */ GET)\n/* harmony export */ });\n/* harmony import */ var _repo_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @repo/core */ \"(rsc)/../../packages/core/dist/lib.js\");\n/* harmony import */ var next_server__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/server */ \"(rsc)/../../node_modules/next/dist/api/server.js\");\n\n\nasync function GET(request) {\n    const { searchParams } = new URL(request.url);\n    const ticker = searchParams.get('ticker');\n    if (!ticker) {\n        return next_server__WEBPACK_IMPORTED_MODULE_1__.NextResponse.json({\n            error: 'Ticker symbol is required'\n        }, {\n            status: 400\n        });\n    }\n    try {\n        const analysisService = new _repo_core__WEBPACK_IMPORTED_MODULE_0__.DividendAnalysisService();\n        const analysis = await analysisService.analyze(ticker);\n        return next_server__WEBPACK_IMPORTED_MODULE_1__.NextResponse.json(analysis);\n    } catch (error) {\n        console.error(error);\n        const errorMessage = error instanceof Error ? error.message : 'An unknown error occurred';\n        return next_server__WEBPACK_IMPORTED_MODULE_1__.NextResponse.json({\n            error: errorMessage\n        }, {\n            status: 500\n        });\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9zcmMvYXBwL2FwaS9hbmFseXplL3JvdXRlLnRzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUFxRDtBQUNWO0FBRXBDLGVBQWVFLElBQUlDLE9BQWdCO0lBQ3hDLE1BQU0sRUFBRUMsWUFBWSxFQUFFLEdBQUcsSUFBSUMsSUFBSUYsUUFBUUcsR0FBRztJQUM1QyxNQUFNQyxTQUFTSCxhQUFhSSxHQUFHLENBQUM7SUFFaEMsSUFBSSxDQUFDRCxRQUFRO1FBQ1gsT0FBT04scURBQVlBLENBQUNRLElBQUksQ0FBQztZQUFFQyxPQUFPO1FBQTRCLEdBQUc7WUFBRUMsUUFBUTtRQUFJO0lBQ2pGO0lBRUEsSUFBSTtRQUNGLE1BQU1DLGtCQUFrQixJQUFJWiwrREFBdUJBO1FBRW5ELE1BQU1hLFdBQVcsTUFBTUQsZ0JBQWdCRSxPQUFPLENBQUNQO1FBRS9DLE9BQU9OLHFEQUFZQSxDQUFDUSxJQUFJLENBQUNJO0lBQzNCLEVBQUUsT0FBT0gsT0FBTztRQUNkSyxRQUFRTCxLQUFLLENBQUNBO1FBQ2QsTUFBTU0sZUFBZU4saUJBQWlCTyxRQUFRUCxNQUFNUSxPQUFPLEdBQUc7UUFDOUQsT0FBT2pCLHFEQUFZQSxDQUFDUSxJQUFJLENBQUM7WUFBRUMsT0FBT007UUFBYSxHQUFHO1lBQUVMLFFBQVE7UUFBSTtJQUNsRTtBQUNGIiwic291cmNlcyI6WyIvVXNlcnMvbWFydGluc3Rhcm9zdGEvRGV2ZWxvcG1lbnQvdmliZXMvZGl2eXkvYXBwcy93ZWIvc3JjL2FwcC9hcGkvYW5hbHl6ZS9yb3V0ZS50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBEaXZpZGVuZEFuYWx5c2lzU2VydmljZSB9IGZyb20gJ0ByZXBvL2NvcmUnO1xuaW1wb3J0IHsgTmV4dFJlc3BvbnNlIH0gZnJvbSAnbmV4dC9zZXJ2ZXInO1xuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gR0VUKHJlcXVlc3Q6IFJlcXVlc3QpIHtcbiAgY29uc3QgeyBzZWFyY2hQYXJhbXMgfSA9IG5ldyBVUkwocmVxdWVzdC51cmwpO1xuICBjb25zdCB0aWNrZXIgPSBzZWFyY2hQYXJhbXMuZ2V0KCd0aWNrZXInKTtcblxuICBpZiAoIXRpY2tlcikge1xuICAgIHJldHVybiBOZXh0UmVzcG9uc2UuanNvbih7IGVycm9yOiAnVGlja2VyIHN5bWJvbCBpcyByZXF1aXJlZCcgfSwgeyBzdGF0dXM6IDQwMCB9KTtcbiAgfVxuXG4gIHRyeSB7XG4gICAgY29uc3QgYW5hbHlzaXNTZXJ2aWNlID0gbmV3IERpdmlkZW5kQW5hbHlzaXNTZXJ2aWNlKCk7XG5cbiAgICBjb25zdCBhbmFseXNpcyA9IGF3YWl0IGFuYWx5c2lzU2VydmljZS5hbmFseXplKHRpY2tlcik7XG5cbiAgICByZXR1cm4gTmV4dFJlc3BvbnNlLmpzb24oYW5hbHlzaXMpO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGNvbnNvbGUuZXJyb3IoZXJyb3IpO1xuICAgIGNvbnN0IGVycm9yTWVzc2FnZSA9IGVycm9yIGluc3RhbmNlb2YgRXJyb3IgPyBlcnJvci5tZXNzYWdlIDogJ0FuIHVua25vd24gZXJyb3Igb2NjdXJyZWQnO1xuICAgIHJldHVybiBOZXh0UmVzcG9uc2UuanNvbih7IGVycm9yOiBlcnJvck1lc3NhZ2UgfSwgeyBzdGF0dXM6IDUwMCB9KTtcbiAgfVxufVxuIl0sIm5hbWVzIjpbIkRpdmlkZW5kQW5hbHlzaXNTZXJ2aWNlIiwiTmV4dFJlc3BvbnNlIiwiR0VUIiwicmVxdWVzdCIsInNlYXJjaFBhcmFtcyIsIlVSTCIsInVybCIsInRpY2tlciIsImdldCIsImpzb24iLCJlcnJvciIsInN0YXR1cyIsImFuYWx5c2lzU2VydmljZSIsImFuYWx5c2lzIiwiYW5hbHl6ZSIsImNvbnNvbGUiLCJlcnJvck1lc3NhZ2UiLCJFcnJvciIsIm1lc3NhZ2UiXSwiaWdub3JlTGlzdCI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./src/app/api/analyze/route.ts\n");

/***/ }),

/***/ "(ssr)/../../node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?server=true!":
/*!**********************************************************************************************************!*\
  !*** ../../node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?server=true! ***!
  \**********************************************************************************************************/
/***/ (() => {



/***/ }),

/***/ "../app-render/action-async-storage.external":
/*!*******************************************************************************!*\
  !*** external "next/dist/server/app-render/action-async-storage.external.js" ***!
  \*******************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/server/app-render/action-async-storage.external.js");

/***/ }),

/***/ "../app-render/after-task-async-storage.external":
/*!***********************************************************************************!*\
  !*** external "next/dist/server/app-render/after-task-async-storage.external.js" ***!
  \***********************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/server/app-render/after-task-async-storage.external.js");

/***/ }),

/***/ "./work-async-storage.external":
/*!*****************************************************************************!*\
  !*** external "next/dist/server/app-render/work-async-storage.external.js" ***!
  \*****************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/server/app-render/work-async-storage.external.js");

/***/ }),

/***/ "./work-unit-async-storage.external":
/*!**********************************************************************************!*\
  !*** external "next/dist/server/app-render/work-unit-async-storage.external.js" ***!
  \**********************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/server/app-render/work-unit-async-storage.external.js");

/***/ }),

/***/ "crypto":
/*!*************************!*\
  !*** external "crypto" ***!
  \*************************/
/***/ ((module) => {

"use strict";
module.exports = require("crypto");

/***/ }),

/***/ "fs":
/*!*********************!*\
  !*** external "fs" ***!
  \*********************/
/***/ ((module) => {

"use strict";
module.exports = require("fs");

/***/ }),

/***/ "http":
/*!***********************!*\
  !*** external "http" ***!
  \***********************/
/***/ ((module) => {

"use strict";
module.exports = require("http");

/***/ }),

/***/ "https":
/*!************************!*\
  !*** external "https" ***!
  \************************/
/***/ ((module) => {

"use strict";
module.exports = require("https");

/***/ }),

/***/ "next/dist/compiled/next-server/app-page.runtime.dev.js":
/*!*************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-page.runtime.dev.js" ***!
  \*************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/compiled/next-server/app-page.runtime.dev.js");

/***/ }),

/***/ "next/dist/compiled/next-server/app-route.runtime.dev.js":
/*!**************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-route.runtime.dev.js" ***!
  \**************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/compiled/next-server/app-route.runtime.dev.js");

/***/ }),

/***/ "next/dist/shared/lib/no-fallback-error.external":
/*!******************************************************************!*\
  !*** external "next/dist/shared/lib/no-fallback-error.external" ***!
  \******************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/shared/lib/no-fallback-error.external");

/***/ }),

/***/ "next/dist/shared/lib/router/utils/app-paths":
/*!**************************************************************!*\
  !*** external "next/dist/shared/lib/router/utils/app-paths" ***!
  \**************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/shared/lib/router/utils/app-paths");

/***/ }),

/***/ "node:child_process":
/*!*************************************!*\
  !*** external "node:child_process" ***!
  \*************************************/
/***/ ((module) => {

"use strict";
module.exports = require("node:child_process");

/***/ }),

/***/ "node:events":
/*!******************************!*\
  !*** external "node:events" ***!
  \******************************/
/***/ ((module) => {

"use strict";
module.exports = require("node:events");

/***/ }),

/***/ "node:fs":
/*!**************************!*\
  !*** external "node:fs" ***!
  \**************************/
/***/ ((module) => {

"use strict";
module.exports = require("node:fs");

/***/ }),

/***/ "node:path":
/*!****************************!*\
  !*** external "node:path" ***!
  \****************************/
/***/ ((module) => {

"use strict";
module.exports = require("node:path");

/***/ }),

/***/ "node:process":
/*!*******************************!*\
  !*** external "node:process" ***!
  \*******************************/
/***/ ((module) => {

"use strict";
module.exports = require("node:process");

/***/ }),

/***/ "os":
/*!*********************!*\
  !*** external "os" ***!
  \*********************/
/***/ ((module) => {

"use strict";
module.exports = require("os");

/***/ }),

/***/ "path":
/*!***********************!*\
  !*** external "path" ***!
  \***********************/
/***/ ((module) => {

"use strict";
module.exports = require("path");

/***/ }),

/***/ "punycode":
/*!***************************!*\
  !*** external "punycode" ***!
  \***************************/
/***/ ((module) => {

"use strict";
module.exports = require("punycode");

/***/ }),

/***/ "stream":
/*!*************************!*\
  !*** external "stream" ***!
  \*************************/
/***/ ((module) => {

"use strict";
module.exports = require("stream");

/***/ }),

/***/ "url":
/*!**********************!*\
  !*** external "url" ***!
  \**********************/
/***/ ((module) => {

"use strict";
module.exports = require("url");

/***/ }),

/***/ "util":
/*!***********************!*\
  !*** external "util" ***!
  \***********************/
/***/ ((module) => {

"use strict";
module.exports = require("util");

/***/ }),

/***/ "zlib":
/*!***********************!*\
  !*** external "zlib" ***!
  \***********************/
/***/ ((module) => {

"use strict";
module.exports = require("zlib");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../../webpack-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/next","vendor-chunks/@sinclair","vendor-chunks/@supabase","vendor-chunks/yahoo-finance2","vendor-chunks/tough-cookie","vendor-chunks/commander","vendor-chunks/whatwg-url","vendor-chunks/tr46","vendor-chunks/dotenv","vendor-chunks/psl","vendor-chunks/webidl-conversions","vendor-chunks/url-parse","vendor-chunks/universalify","vendor-chunks/requires-port","vendor-chunks/querystringify","vendor-chunks/punycode"], () => (__webpack_exec__("(rsc)/../../node_modules/next/dist/build/webpack/loaders/next-app-loader/index.js?name=app%2Fapi%2Fanalyze%2Froute&page=%2Fapi%2Fanalyze%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fanalyze%2Froute.ts&appDir=%2FUsers%2Fmartinstarosta%2FDevelopment%2Fvibes%2Fdivyy%2Fapps%2Fweb%2Fsrc%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Fmartinstarosta%2FDevelopment%2Fvibes%2Fdivyy%2Fapps%2Fweb&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D&isGlobalNotFoundEnabled=!")));
module.exports = __webpack_exports__;

})();